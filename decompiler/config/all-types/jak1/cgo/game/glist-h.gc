(deftype glst-node (structure)
  ((next glst-node  :offset-assert 0)
   (prev glst-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; anim-tester
; (deftype list-control (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )
(deftype glst-named-node (glst-node)
  ((privname string     :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; anim-tester
; (deftype list-field (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )
(deftype glst-list (structure)
  ((head     glst-node  :offset-assert 0)
   (tail     glst-node  :offset-assert 4)
   (tailpred glst-node  :offset-assert 8)
   (numelem  int32      :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern glst-next (function glst-node glst-node))
(define-extern glst-prev (function glst-node glst-node))
(define-extern glst-head (function glst-list glst-node))
(define-extern glst-tail (function glst-list glst-node))
(define-extern glst-end-of-list? (function glst-node symbol))
(define-extern glst-start-of-list? (function glst-node symbol))
(define-extern glst-empty? (function glst-list symbol))
(define-extern glst-node-name (function glst-named-node string))
(define-extern glst-set-name! (function glst-named-node string string))