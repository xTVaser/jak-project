;; sky-h
(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert 0)
   (snapshot2   int32  :offset-assert 4)
   (morph-start float  :offset-assert 8)
   (morph-end   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sky-h
(deftype sky-color-day (structure)
  ((hour sky-color-hour 24 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; sky-h
(deftype sky-circle-data (structure)
  ((data vector 17 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;; sky-h
(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert 0)
   (pos            vector  :inline :offset 0)
   (r-sun          float           :offset 16)
   (r-halo         float           :offset 20)
   (r-aurora       float           :offset 24)
   (c-sun-start    uint32          :offset 32)
   (c-sun-end      uint32          :offset 48)
   (c-halo-start   uint32          :offset 36)
   (c-halo-end     uint32          :offset 52)
   (c-aurora-start uint32          :offset 40)
   (c-aurora-end   uint32          :offset 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; sky-h
(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert 0)
   (pos   vector  :inline :offset 0)
   (scale vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; sky-h
(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert 0)
   (tilt      float  :offset-assert 4)
   (rise      float  :offset-assert 8)
   (dist      float  :offset-assert 12)
   (min-halo  float  :offset-assert 16)
   (max-halo  float  :offset-assert 20)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; sky-h
(deftype sky-upload-data (basic)
  (
   ;(data   UNKNOWN         27      :offset-assert 16)
   (circle sky-circle-data :inline :offset-assert 16)
   (sun    sky-sun-data 2 :inline       :offset-assert 288)
   (moon   sky-moon-data   :inline :offset-assert 416)
   (data   uint128         27      :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

;; sky-h
(deftype sky-parms (basic)
  ;; check - the alignment on some of these.
  ((orbit             sky-orbit 3     :inline      :offset-assert 4)
   (upload-data       sky-upload-data :inline :offset-assert 112)
   (sun-lights        light-group     :inline :offset-assert 560)
   (moon-lights       light-group     :inline :offset-assert 752)
   (default-lights    light-group     :inline :offset-assert 944)
   (default-vu-lights vu-lights       :inline :offset-assert 1136)
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x4e0
  :flag-assert         #x9000004e0
  )

;; sky-h
(deftype sky-tng-data (basic)
  ((giftag-base  qword   :inline :offset-assert 16)
   (giftag-roof  qword   :inline :offset-assert 32)
   (giftag-ocean qword   :inline :offset-assert 48)
   (fog          vector  :inline :offset-assert 64)
   (sky          uint32 8       :offset-assert 80)
   (time         float           :offset-assert 112)
   (off-s-0      uint16          :offset-assert 116)
   (off-t-0      uint16          :offset-assert 118)
   (off-s-1      uint16          :offset-assert 120)
   (off-t-1      uint16          :offset-assert 122)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

;; sky-h
(deftype sky-work (structure)
  ((adgif-tmpl dma-gif-packet :inline :offset-assert 0)
   (draw-tmpl  dma-gif-packet :inline :offset-assert 32)
   (blend-tmpl dma-gif-packet :inline :offset-assert 64)
   (sky-data   uint128        5       :offset-assert 96)
   (cloud-data uint128        5       :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; sky-h
(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; mood-h
(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert 0)
   (fog-dists   vector :inline :offset-assert 16)
   (fog-start   float         :offset 16) ;; meters
   (fog-end     float         :offset 20) ;;meters
   (fog-max     float          :offset 24)
   (fog-min     float          :offset 28)
   (erase-color vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; mood-h
(deftype mood-fog-table (structure)
  ((data mood-fog 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; mood-h
(deftype mood-lights (structure)
  ((direction vector :inline :offset-assert 0)
   (lgt-color vector :inline :offset-assert 16)
   (prt-color vector :inline :offset-assert 32)
   (amb-color vector :inline :offset-assert 48)
   (shadow    vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; mood-h
(deftype mood-lights-table (structure)
  ((data mood-lights 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

;; mood-h
(deftype mood-sun (structure)
  ((sun-color vector :inline :offset-assert 0)
   (env-color vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; mood-h
(deftype mood-sun-table (structure)
  ((data mood-sun 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; mood-h
(deftype mood-context (basic)
  ((mood-fog-table       mood-fog-table            :offset-assert 4)
   (mood-lights-table    mood-lights-table         :offset-assert 8)
   (mood-sun-table       mood-sun-table            :offset-assert 12)
   (fog-interp           sky-color-day             :offset-assert 16)
   (palette-interp       sky-color-day             :offset-assert 20)
   (sky-texture-interp   sky-color-day             :offset-assert 24)
   (current-fog          mood-fog          :inline :offset-assert 32)
   (current-sun          mood-sun          :inline :offset-assert 80)
   (current-prt-color    vector            :inline :offset-assert 112)
   (current-shadow       vector            :inline :offset-assert 128)
   (current-shadow-color vector            :inline :offset-assert 144)
   ;; (light-group          UNKNOWN           8       :offset-assert 160)
   (times                vector  8 :inline       :offset 1696)
   (sky-times            float           8       :offset-assert 1824)
   ;; (itimes               UNKNOWN           4       :offset-assert 1856)
   ;; (state                UNKNOWN           16      :offset-assert 1920)
   (num-stars            float                     :offset 1936)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x794
  :flag-assert         #x900000794
  )

;; time-of-day-h
(deftype palette-fade-control (structure)
  ((trans      vector :inline :offset-assert 0)
   (fade       float          :offset-assert 16)
   (actor-dist float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; time-of-day-h
(deftype palette-fade-controls (basic)
  ((control palette-fade-control 8 :inline :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x110
  :flag-assert         #xb00000110
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; time-of-day-h
(deftype time-of-day-proc (process)
  ((year            int32  :offset-assert 112)
   (month           int32  :offset-assert 116)
   (week            int32  :offset-assert 120)
   (day             int32  :offset-assert 124)
   (hour            int32  :offset-assert 128)
   (minute          int32  :offset-assert 132)
   (second          int32  :offset-assert 136)
   (frame           int32  :offset-assert 140)
   (time-of-day     float  :offset-assert 144)
   (time-ratio      float  :offset-assert 148)
   (star-count      int32  :offset-assert 152)
   (stars           basic  :offset-assert 156)
   (sun-count       int32  :offset-assert 160)
   (sun             basic  :offset-assert 164)
   (green-sun-count int32  :offset-assert 168)
   (green-sun       basic  :offset-assert 172)
   (moon-count      int32  :offset-assert 176)
   (moon            basic  :offset-assert 180)
   )
  :heap-base #x50
  :method-count-assert 14
  :size-assert         #xb8
  :flag-assert         #xe005000b8
  ;; inherited inspect of process
  )

(define-extern *time-of-day-proc* time-of-day-proc)

;; time-of-day-h
(deftype time-of-day-palette (basic)
  ((width  int32     :offset-assert 4)
   (height int32     :offset-assert 8)
   (pad    int32     :offset-assert 12)
   (data   int32 1 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; time-of-day-h
; (deftype time-of-day-context (basic)
;   ((active-count         uint32              :offset-assert 4)
;    (interp               float               :offset-assert 8)
;    (current-interp       float               :offset-assert 12)
;    (moods                UNKNOWN     2       :offset-assert 16)
;    (current-fog          mood-fog    :inline :offset-assert 32)
;    (current-sun          mood-sun    :inline :offset-assert 80)
;    (current-prt-color    vector      :inline :offset-assert 112)
;    (current-shadow       vector      :inline :offset-assert 128)
;    (current-shadow-color vector      :inline :offset-assert 144)
;    (light-group          UNKNOWN     9       :offset-assert 160)
;    (title-light-group    light-group :inline :offset-assert 1888)
;    (time                 float               :offset-assert 2080)
;    (target-interp        float               :offset-assert 2084)
;    (erase-color          uint32              :offset-assert 2088)
;    (num-stars            float               :offset-assert 2092)
;    (light-masks-0        UNKNOWN     2       :offset-assert 2096)
;    (light-masks-1        UNKNOWN     2       :offset-assert 2098)
;    (light-interp         UNKNOWN     2       :offset-assert 2100)
;    (sky                  basic               :offset-assert 2108)
;    (sun-fade             float               :offset-assert 2112)
;    (title-updated        basic               :offset-assert 2116)
;    )
;   :method-count-assert 9
;   :size-assert         #x848
;   :flag-assert         #x900000848
;   )

; ;; time-of-day-h
; (deftype time-of-day-dma (structure)
;   ((outa  UNKNOWN 256 :offset-assert 0)
;    (outb  UNKNOWN 256 :offset-assert 1024)
;    (banka UNKNOWN 256 :offset-assert 2048)
;    (bankb UNKNOWN 256 :offset-assert 3072)
;    )
;   :method-count-assert 9
;   :size-assert         #x1000
;   :flag-assert         #x900001000
;   )

;; art-h
(deftype joint-anim (basic)
  ((name   basic  :offset-assert 4)
   (number int16  :offset-assert 8)
   (length int16  :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; art-h
; (deftype joint-anim-drawable (joint-anim)
;   ((name   basic            :offset-assert 4)
;    (number int16            :offset-assert 8)
;    (length int16            :offset-assert 10)
;    (data   UNKNOWN :dynamic :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

;; art-h
(deftype joint-anim-compressed (joint-anim)
  ()
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; art-h
; (deftype joint-anim-frame (structure)
;   ((matrices UNKNOWN 2        :offset-assert 0)
;    (data     UNKNOWN :dynamic :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; art-h
; (deftype joint-anim-compressed-hdr (structure)
;   ((control-bits UNKNOWN 14 :offset-assert 0)
;    (num-joints   uint32     :offset-assert 56)
;    (matrix-bits  uint32     :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; art-h
; (deftype joint-anim-compressed-fixed (structure)
;   ((hdr       joint-anim-compressed-hdr :inline :offset-assert 0)
;    (offset-64 uint32                            :offset-assert 64)
;    (offset-32 uint32                            :offset-assert 68)
;    (offset-16 uint32                            :offset-assert 72)
;    (reserved  uint32                            :offset-assert 76)
;    (data      UNKNOWN                   133     :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x8a0
;   :flag-assert         #x9000008a0
;   )

; ;; art-h
; (deftype joint-anim-compressed-frame (structure)
;   ((offset-64 uint32      :offset-assert 0)
;    (offset-32 uint32      :offset-assert 4)
;    (offset-16 uint32      :offset-assert 8)
;    (reserved  uint32      :offset-assert 12)
;    (data      UNKNOWN 133 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x860
;   :flag-assert         #x900000860
;   )

; ;; art-h
; (deftype joint-anim-compressed-control (structure)
;   ((num-frames uint32                        :offset-assert 0)
;    (fixed-qwc  uint32                        :offset-assert 4)
;    (frame-qwc  uint32                        :offset-assert 8)
;    (fixed      joint-anim-compressed-fixed   :offset-assert 12)
;    (data       UNKNOWN                     1 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

;; art-h
(deftype art (basic)
  ((name   basic  :offset 8)
   (length int32  :offset-assert 12)
   (extra  basic  :offset-assert 16)
   )
  :method-count-assert 13
  :size-assert         #x14
  :flag-assert         #xd00000014
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; art-h
(deftype art-element (art)
  ((pad uint8 12))
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

; ;; art-h
; (deftype skeleton-group (basic)
;   ((art-group-name basic           :offset-assert 4)
;    (jgeo           int32           :offset-assert 8)
;    (janim          int32           :offset-assert 12)
;    (bounds         vector  :inline :offset-assert 16)
;    (radius         meters          :offset-assert 28)
;    (mgeo           UNKNOWN 4       :offset-assert 32)
;    (max-lod        int32           :offset-assert 40)
;    (lod-dist       UNKNOWN 4       :offset-assert 44)
;    (longest-edge   meters          :offset-assert 60)
;    (texture-level  int8            :offset-assert 64)
;    (version        int8            :offset-assert 65)
;    (shadow         int8            :offset-assert 66)
;    (sort           int8            :offset-assert 67)
;    )
;   :method-count-assert 9
;   :size-assert         #x48
;   :flag-assert         #x900000048
;   )

;; art-h
(deftype lod-group (structure)
  ((geo  basic   :offset-assert 0)
   (dist float  :offset-assert 4) ;; meters
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; art-h
; (deftype lod-set (structure)
;   ((lod     UNKNOWN 4 :offset-assert 0)
;    (max-lod int8      :offset-assert 32)
;    )
;   :method-count-assert 10
;   :size-assert         #x21
;   :flag-assert         #xa00000021
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; art-h
; (deftype draw-control (basic)
;   ((status                   uint8           :offset-assert 4)
;    (matrix-type              uint8           :offset-assert 5)
;    (data-format              uint8           :offset-assert 6)
;    (global-effect            uint8           :offset-assert 7)
;    (art-group                basic           :offset-assert 8)
;    (jgeo                     basic           :offset-assert 12)
;    (mgeo                     basic           :offset-assert 16)
;    (dma-add-func             basic           :offset-assert 20)
;    (skeleton                 basic           :offset-assert 24)
;    (lod-set                  lod-set :inline :offset-assert 28)
;    (lod                      UNKNOWN 4       :offset-assert 28)
;    (max-lod                  int8            :offset-assert 60)
;    (force-lod                int8            :offset-assert 61)
;    (cur-lod                  int8            :offset-assert 62)
;    (desired-lod              int8            :offset-assert 63)
;    (ripple                   basic           :offset-assert 64)
;    (longest-edge             meters          :offset-assert 68)
;    (longest-edge?            uint32          :offset-assert 68)
;    (light-index              uint8           :offset-assert 72)
;    (dummy                    UNKNOWN 2       :offset-assert 73)
;    (death-draw-overlap       uint8           :offset-assert 75)
;    (death-timer              uint8           :offset-assert 76)
;    (death-timer-org          uint8           :offset-assert 77)
;    (death-vertex-skip        uint16          :offset-assert 78)
;    (death-effect             uint32          :offset-assert 80)
;    (sink-group               basic           :offset-assert 84)
;    (process                  basic           :offset-assert 88)
;    (shadow                   basic           :offset-assert 92)
;    (shadow-ctrl              basic           :offset-assert 96)
;    (origin                   vector  :inline :offset-assert 112)
;    (bounds                   vector  :inline :offset-assert 128)
;    (radius                   meters          :offset-assert 140)
;    (color-mult               rgbaf   :inline :offset-assert 144)
;    (color-emissive           rgbaf   :inline :offset-assert 160)
;    (secondary-interp         float           :offset-assert 176)
;    (current-secondary-interp float           :offset-assert 180)
;    (shadow-mask              uint8           :offset-assert 184)
;    (level-index              uint8           :offset-assert 185)
;    (origin-joint-index       uint8           :offset-assert 186)
;    (shadow-joint-index       uint8           :offset-assert 187)
;    )
;   :method-count-assert 12
;   :size-assert         #xbc
;   :flag-assert         #xc000000bc
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

;; generic-vu1-h
(deftype pris-mtx (structure)
  ((data   float 32      :offset 0)
   (vector vector 8 :inline       :offset 0)
   (t-mtx  matrix  :inline :offset 0)
   (n-mtx  matrix3 :inline :offset 64)
   (scale  vector  :inline :offset 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; generic-vu1-h
(deftype generic-pris-mtx-save (structure)
  ((loc-mtx pris-mtx :inline :offset-assert 0)
   (par-mtx pris-mtx :inline :offset-assert 128)
   (dif-mtx pris-mtx :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; generic-vu1-h
(deftype generic-constants (structure)
  ((fog         vector :inline :offset-assert 0)
   (adgif       qword  :inline :offset-assert 16)
   (giftag      qword  :inline :offset-assert 32)
   (hvdf-offset vector :inline :offset-assert 48)
   (hmge-scale  vector :inline :offset-assert 64)
   (invh-scale  vector :inline :offset-assert 80)
   (guard       vector :inline :offset-assert 96)
   (adnop       qword  :inline :offset-assert 112)
   (flush       qword  :inline :offset-assert 128)
   (stores      qword  :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )


;; merc-h
(deftype ripple-merc-query (inline-array-class)
  ((start-vertex     int32            :offset-assert 16)
   (vertex-skip      int32            :offset-assert 20)
   (vertex-count     int32            :offset-assert 24)
   (current-loc      int32            :offset-assert 28)
   (data2             uint8 :dynamic :offset-assert 32) ;; renamed from data. suspect inline-array has some magic.
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; merc-h
(deftype merc-byte-header (structure)
  ((srcdest-off        uint8      :offset-assert 0)
   (rgba-off           uint8      :offset-assert 1)
   (lump-off           uint8      :offset-assert 2)
   (fp-off             uint8      :offset-assert 3)
   (mat1-cnt           uint8      :offset-assert 4)
   (mat2-cnt           uint8      :offset-assert 5)
   (mat3-cnt           uint8      :offset-assert 6)
   (samecopy-cnt       uint8      :offset-assert 7)
   (crosscopy-cnt      uint8      :offset-assert 8)
   (strip-len          uint8      :offset-assert 9)
   (mm-quadword-fp-off uint8      :offset-assert 10)
   (mm-quadword-size   uint8      :offset-assert 11)
   (perc-off           uint8      :offset-assert 12)
   (mat-slot           uint8 10 :offset-assert 13)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

;; merc-h
(deftype merc-fragment (structure)
  ((header merc-byte-header :inline :offset-assert 0)
   (rest   uint8          1       :offset-assert 23)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (dummy-9 () none 9)
    )
  )

;; merc-h
(deftype merc-vtx (structure)
  ((mat-0 uint8  :offset-assert 0)
   (mat-1 uint8  :offset-assert 1)
   (nrm-x uint8  :offset-assert 2)
   (pos-x uint8  :offset-assert 3)
   (dst-0 uint8  :offset-assert 4)
   (dst-1 uint8  :offset-assert 5)
   (nrm-y uint8  :offset-assert 6)
   (pos-y uint8  :offset-assert 7)
   (tex-s uint8  :offset-assert 8)
   (tex-t uint8  :offset-assert 9)
   (nrm-z uint8  :offset-assert 10)
   (pos-z uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; merc-h
(deftype merc-fp-header (structure)
  ((x-add            float  :offset-assert 0)
   (y-add            float  :offset-assert 4)
   (z-add            float  :offset-assert 8)
   (shader-cnt       uint8  :offset-assert 12)
   (kick-info-offset uint8  :offset-assert 13)
   (kick-info-step   uint8  :offset-assert 14)
   (hword-cnt        uint8  :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype merc-mat-dest (structure)
  ((matrix-number uint8  :offset-assert 0)
   (matrix-dest   uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; merc-h
(deftype merc-fragment-control (structure)
  ((unsigned-four-count uint8            :offset-assert 0)
   (lump-four-count     uint8            :offset-assert 1)
   (fp-qwc              uint8            :offset-assert 2)
   (mat-xfer-count      uint8            :offset-assert 3)
   (mat-dest-data       uint8 :dynamic :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; merc-h
(deftype merc-blend-data (structure) ;; was unknown!
  ((int8-data int8 :dynamic :offset-assert 0)
   )
  )

;; merc-h
(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count     uint8            :offset-assert 0)
   (nonzero-index-count uint8            :offset-assert 1)
   (bt-index            uint8 :dynamic :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; merc-h
(deftype mei-envmap-tint (structure)
  ((fade0 float   :offset-assert 0)
   (fade1 float   :offset-assert 4)
   (tint  uint32  :offset-assert 8)
   (dummy int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype mei-texture-scroll (structure)
  ((max-dist     float     :offset-assert 0)
   (st-int-scale uint8     :offset-assert 4)
   (time-factor  uint8     :offset-assert 5)
   (scroll-dir   uint8     :offset-assert 6)
   (cached-time  uint8     :offset-assert 7)
   (time-delta   uint8     :offset-assert 8)
   (dummy        uint8 7 :offset-assert 9)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype mei-ripple (structure)
  ((x-base    float  :offset-assert 0)
   (z-base    float  :offset-assert 4)
   (grid-size float  :offset-assert 8)
   (angle     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype merc-extra-info (structure)
  ((envmap-tint-offset    uint8      :offset-assert 0)
   (shader-offset         uint8      :offset-assert 1)
   (texture-scroll-offset uint8      :offset-assert 2)
   (ripple-offset         uint8      :offset-assert 3)
   (dummy                 uint8 12 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; merc-h
(deftype merc-effect (structure)
  ((frag-geo         merc-fragment          :offset-assert 0)
   (frag-ctrl        merc-fragment-control  :offset-assert 4)
   (blend-data       merc-blend-data        :offset-assert 8)
   (blend-ctrl       merc-blend-ctrl        :offset-assert 12)
   (dummy0           uint8                  :offset-assert 16)
   (effect-bits      uint8                  :offset-assert 17)
   (frag-count       uint16                 :offset-assert 18)
   (blend-frag-count uint16                 :offset-assert 20)
   (tri-count        uint16                 :offset-assert 22)
   (dvert-count      uint16                 :offset-assert 24)
   (dummy1           uint8                  :offset-assert 26)
   (envmap-usage     uint8                  :offset-assert 27)
   (extra-info       merc-extra-info        :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (dummy-9 () none 9)
    )
  )

;; merc-h
(deftype merc-eye-ctrl (structure)
  ((eye-slot      int8                 :offset-assert 0)
   (shader-offset int8                 :offset-assert 1)
   (shader-count  int8                 :offset-assert 2)
   ;(shader        UNKNOWN      3       :offset-assert 16)
   (iris-shader   adgif-shader :inline :offset-assert 16)
   (pupil-shader  adgif-shader :inline :offset-assert 96)
   (lid-shader    adgif-shader :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; merc-h
(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x int8    :offset-assert 0)
   (pupil-trans-y int8    :offset-assert 1)
   (blink         int8    :offset-assert 2)
   (iris-scale    int8    :offset 4)
   (pupil-scale   int8    :offset-assert 5)
   (lid-scale     int8    :offset-assert 6)
   (dword         uint64  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; merc-h
(deftype merc-eye-anim-block (structure)
  ((max-frame int16            :offset-assert 0)
   (data      uint8 :dynamic :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; merc-h
(deftype merc-ctrl-header (structure)
  ((xyz-scale              float            :offset-assert 0)
   (st-magic               uint32           :offset-assert 4)
   (st-out-a               uint32           :offset-assert 8)
   (st-out-b               uint32           :offset-assert 12)
   (st-vif-add             uint32           :offset-assert 16)
   (st-int-off             uint16           :offset-assert 20)
   (st-int-scale           uint16           :offset-assert 22)
   (effect-count           uint32           :offset-assert 24)
   (blend-target-count     uint32           :offset-assert 28)
   (fragment-count         uint16           :offset-assert 32)
   (tri-count              uint16           :offset-assert 34)
   (matrix-count           uint8            :offset-assert 36)
   (shader-count           uint8            :offset-assert 37)
   (transform-vertex-count uint16           :offset-assert 38)
   (dvert-count            uint16           :offset-assert 40)
   (one-mat-count          uint16           :offset-assert 42)
   (two-mat-count          uint16           :offset-assert 44)
   (two-mat-reuse-count    uint16           :offset-assert 46)
   (three-mat-count        uint16           :offset-assert 48)
   (three-mat-reuse-count  uint16           :offset-assert 50)
   (shader-upload-count    uint8            :offset-assert 52)
   (matrix-upload-count    uint8            :offset-assert 53)
   (same-copy-count        uint16           :offset-assert 54)
   (cross-copy-count       uint16           :offset-assert 56)
   (num-verts              uint16           :offset-assert 58)
   (longest-edge           float            :offset-assert 60)
   (eye-ctrl               merc-eye-ctrl    :offset-assert 64)
   (masks                  uint32       3  :offset-assert 68)
   (dummy-bytes            uint8       48 :offset 32)
   (envmap-tint            uint32           :offset 32)
   (query                  basic            :offset 36)
   (needs-clip             uint8            :offset 40)
   (use-isometric          uint8            :offset 41)
   (use-attached-shader    uint8            :offset 42)
   (display-triangles      uint8            :offset 43)
   (death-vertex-skip      uint16           :offset 44)
   (death-start-vertex     uint16           :offset 46)
   (death-effect           uint32           :offset 48)
   (use-translucent        uint8            :offset 52)
   (display-this-fragment  uint8            :offset 53)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; field xyz-scale is a float printed as hex?
  )

;; merc-h
(deftype merc-ctrl (art-element)
  ((num-joints int32                     :offset 20)
   (header     merc-ctrl-header :inline  :offset-assert 32)
   (effect     uint8          :dynamic :offset-assert 112)
   )
  :method-count-assert 13
  :size-assert         #x70
  :flag-assert         #xd00000070
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; merc-h
(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif qword   :inline :offset-assert 0)
   (ad-gif        qword   :inline :offset-assert 16)
   (hvdf-offset   vector  :inline :offset-assert 32)
   (perspective   uint128 4       :offset-assert 48)
   (fog           vector  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; merc-h
(deftype ripple-wave (structure)
  ((scale float  :offset-assert 0)
   (offs  float  :offset-assert 4)
   (xdiv  int16  :offset-assert 8)
   (zdiv  int16  :offset-assert 10)
   (speed float  :offset-assert 12)
   (xmul  float  :offset-assert 16)
   (zmul  float  :offset-assert 20)
   (delta float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; merc-h
(deftype ripple-wave-set (basic)
  ((count        int32     :offset-assert 4)
   (converted    basic     :offset-assert 8)
   (frame-save   uint32    :offset-assert 12)
   (normal-scale float     :offset-assert 16)
   (wave         ripple-wave 4 :inline :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

;; merc-h
(deftype ripple-control (basic)
  ((global-scale            float  :offset-assert 4)
   (last-frame-scale        float  :offset-assert 8)
   (close-fade-dist         float  :offset-assert 12)
   (far-fade-dist           float  :offset-assert 16)
   (faded-scale             float  :offset-assert 20)
   (individual-normal-scale float  :offset-assert 24)
   (waveform                basic  :offset-assert 28)
   (send-query              basic  :offset-assert 32)
   (query                   basic  :offset-assert 36)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; generic-merc-h
(deftype merc-matrix (structure)
  ((quad   uint128 8 :offset-assert 0)
   (vector vector 8 :inline :offset 0)
   (tag    uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; generic-merc-h
(deftype generic-merc-tag (dma-packet)
  ((next-ptr uint32   :offset 12)
   (size     uint32   :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-merc-h
(deftype generic-merc-ctrl (structure)
  ((tag    generic-merc-tag :inline :offset-assert 0)
   (lights vu-lights        :inline :offset-assert 16)
   (header merc-ctrl-header :inline :offset-assert 128)
   (effect merc-effect      :inline :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )

;; generic-merc-h
(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data uint128          11      :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x1a0
  :flag-assert         #x9000001a0
  )

; generic-merc-h
(deftype generic-merc-input (structure)
  ((geo-tag     generic-merc-tag           :inline :offset-assert 0)
   (geo-block   uint8                    1296    :offset-assert 16)
   (byte-header merc-byte-header           :inline :offset 16)
   (matrix      merc-matrix       9    :inline   :offset-assert 1312)
   (control     generic-merc-ctrl-with-sfx :inline :offset-assert 2464)
   (end-tag     generic-merc-tag           :inline :offset-assert 2880)
   (shader      adgif-shader               :inline :offset-assert 2896)
   )
  :method-count-assert 9
  :size-assert         #xba0
  :flag-assert         #x900000ba0
  )

; ;; generic-merc-h
; (deftype generic-merc-output (structure)
;   ((info             gsf-info   :inline :offset-assert 0)
;    (header           gsf-header :inline :offset-assert 16)
;    (index-kick-table UNKNOWN    80      :offset-assert 32)
;    (index-table      UNKNOWN    160     :offset-assert 32)
;    (inverse-table    UNKNOWN    256     :offset-assert 192)
;    (vertex-table     UNKNOWN    72      :offset-assert 448)
;    )
;   :method-count-assert 9
;   :size-assert         #xac0
;   :flag-assert         #x900000ac0
;   )

; ;; generic-merc-h
; (deftype generic-merc-dcache (structure)
;   ((output-a    generic-merc-output :inline :offset-assert 0)
;    (output-b    generic-merc-output :inline :offset-assert 2752)
;    (inv-table-1 UNKNOWN             544     :offset-assert 5504)
;    (inv-table-7 UNKNOWN             544     :offset-assert 6048)
;    (inv-safety  UNKNOWN             16      :offset-assert 6592)
;    (effect-data UNKNOWN             1584    :offset-assert 6608)
;    )
;   :method-count-assert 9
;   :size-assert         #x2000
;   :flag-assert         #x900002000
;   )

; ;; generic-merc-h
; (deftype gm-shadow (structure)
;   ((perspective                matrix              :inline :offset-assert 0)
;    (isometric                  matrix              :inline :offset-assert 64)
;    (inv-camera-rot             matrix              :inline :offset-assert 128)
;    (envmap-shader              adgif-shader        :inline :offset-assert 192)
;    (current-chain              uint32                      :offset-assert 272)
;    (next-chain                 uint32                      :offset-assert 276)
;    (buf-index                  uint32                      :offset-assert 280)
;    (fragment-count             uint32                      :offset-assert 284)
;    (write-limit                int32                       :offset-assert 288)
;    (indexed-input-base         generic-merc-input          :offset-assert 292)
;    (other-input-base           generic-merc-input          :offset-assert 296)
;    (indexed-output-base        generic-merc-output         :offset-assert 300)
;    (other-output-base          generic-merc-output         :offset-assert 304)
;    (p-input                    uint32                      :offset-assert 308)
;    (gsf-buf                    generic-merc-dcache         :offset-assert 312)
;    (p-fheader                  merc-fp-header              :offset-assert 316)
;    (mercneric-convert          basic                       :offset-assert 320)
;    (generic-prepare-dma-single basic                       :offset-assert 324)
;    (generic-prepare-dma-double basic                       :offset-assert 328)
;    (generic-light-proc         basic                       :offset-assert 332)
;    (generic-envmap-proc        basic                       :offset-assert 336)
;    (high-speed-reject          basic                       :offset-assert 340)
;    (hsr-xmult                  vector              :inline :offset-assert 352)
;    (hsr-ymult                  vector              :inline :offset-assert 368)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

; ;; generic-merc-h
; (deftype generic-merc-work (structure)
;   ((input-a generic-merc-input         :inline :offset-assert 0)
;    (input-b generic-merc-input         :inline :offset-assert 2976)
;    (ctrl    generic-merc-ctrl-with-sfx :inline :offset-assert 5952)
;    (shadow  gm-shadow                  :inline :offset-assert 6368)
;    (stack   UNKNOWN                    16      :offset-assert 6752)
;    )
;   :method-count-assert 9
;   :size-assert         #x1b60
;   :flag-assert         #x900001b60
;   )

; ;; generic-tie-h
; (deftype generic-tie-instance (structure)
;   ((matrix-tag  dma-packet :inline :offset-assert 0)
;    (matrix-data UNKNOWN    6       :offset-assert 16)
;    (index-tag   dma-packet :inline :offset-assert 112)
;    (indices     UNKNOWN    224     :offset-assert 128)
;    (end-tag     dma-packet :inline :offset-assert 352)
;    )
;   :method-count-assert 9
;   :size-assert         #x170
;   :flag-assert         #x900000170
;   )

; ;; generic-tie-h
; (deftype generic-tie-input (structure)
;   ((palette-tag dma-packet :inline :offset-assert 0)
;    (palette     UNKNOWN    128     :offset-assert 16)
;    (model-tag   dma-packet :inline :offset-assert 528)
;    (model       UNKNOWN    146     :offset-assert 544)
;    (matrix-tag  dma-packet :inline :offset-assert 2880)
;    (matrix-data UNKNOWN    6       :offset-assert 2896)
;    (index-tag   dma-packet :inline :offset-assert 2992)
;    (indices     UNKNOWN    224     :offset-assert 3008)
;    (end-tag     dma-packet :inline :offset-assert 3232)
;    )
;   :method-count-assert 9
;   :size-assert         #xcb0
;   :flag-assert         #x900000cb0
;   )

; ;; generic-tie-h
; (deftype generic-tie-run-control (structure)
;   ((skip-bp2    uint8  :offset-assert 0)
;    (skip-ips    uint8  :offset-assert 1)
;    (gifbuf-skip uint8  :offset-assert 2)
;    (strips      uint8  :offset-assert 3)
;    (target-bp1  uint8  :offset-assert 4)
;    (target-bp2  uint8  :offset-assert 5)
;    (target-ip1  uint8  :offset-assert 6)
;    (target-ip2  uint8  :offset-assert 7)
;    (target-bps  uint8  :offset-assert 8)
;    (target-ips  uint8  :offset-assert 9)
;    (is-generic  uint8  :offset-assert 10)
;    (reserved    uint8  :offset-assert 11)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; generic-tie-h
; (deftype generic-tie-base-point (structure)
;   ((data UNKNOWN 8 :offset-assert 0)
;    (quad uint128   :offset-assert 0)
;    (x    int16     :offset-assert 0)
;    (y    int16     :offset-assert 2)
;    (z    int16     :offset-assert 4)
;    (d0   int16     :offset-assert 6)
;    (vtx  uint64    :offset-assert 0)
;    (u    int16     :offset-assert 8)
;    (v    int16     :offset-assert 10)
;    (tex  uint32    :offset-assert 8)
;    (w    int16     :offset-assert 12)
;    (d1   int16     :offset-assert 14)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-tie-h
; (deftype generic-tie-bps (structure)
;   ((bp UNKNOWN 4 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; generic-tie-h
; (deftype generic-tie-interp-point (structure)
;   ((data   UNKNOWN 12 :offset-assert 0)
;    (quad   uint128    :offset-assert 0)
;    (x      int16      :offset-assert 0)
;    (y      int16      :offset-assert 2)
;    (z      int16      :offset-assert 4)
;    (d0     int16      :offset-assert 6)
;    (vtx0   uint64     :offset-assert 0)
;    (dx     int16      :offset-assert 8)
;    (dy     int16      :offset-assert 10)
;    (dz     int16      :offset-assert 12)
;    (unused int16      :offset-assert 14)
;    (vtx1   uint64     :offset-assert 8)
;    (u      int16      :offset-assert 16)
;    (v      int16      :offset-assert 18)
;    (tex    uint32     :offset-assert 16)
;    (w      int16      :offset-assert 20)
;    (d1     int16      :offset-assert 22)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; generic-tie-h
; (deftype generic-tie-ips (structure)
;   ((ip UNKNOWN 2 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; generic-tie-h
; (deftype generic-tie-header (structure)
;   ((effect              uint8              :offset-assert 0)
;    (interp-table-size   uint8              :offset-assert 1)
;    (num-bps             uint8              :offset-assert 2)
;    (num-ips             uint8              :offset-assert 3)
;    (tint-color          uint32             :offset-assert 4)
;    (index-table-offset  uint16             :offset-assert 8)
;    (kick-table-offset   uint16             :offset-assert 10)
;    (normal-table-offset uint16             :offset-assert 12)
;    (interp-table-offset uint16             :offset-assert 14)
;    (gsf-header          gsf-header :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; generic-tie-h
; (deftype generic-tie-matrix (structure)
;   ((matrix matrix :inline :offset-assert 0)
;    (morph  vector :inline :offset-assert 64)
;    (fog    qword  :inline :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

; ;; generic-tie-h
; (deftype generic-tie-normal (structure)
;   ((x     int8  :offset-assert 0)
;    (y     int8  :offset-assert 1)
;    (z     int8  :offset-assert 2)
;    (dummy int8  :offset-assert 3)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; generic-tie-h
; (deftype generic-tie-control (structure)
;   ((ptr-palette   uint32                   :offset-assert 0)
;    (ptr-shaders   uint32                   :offset-assert 4)
;    (ptr-runctrl   generic-tie-run-control  :offset-assert 8)
;    (ptr-verts     uint32                   :offset-assert 12)
;    (ptr-generic   generic-tie-header       :offset-assert 16)
;    (ptr-dps       uint32                   :offset-assert 20)
;    (ptr-kicks     uint32                   :offset-assert 24)
;    (ptr-normals   uint32                   :offset-assert 28)
;    (ptr-interp    uint32                   :offset-assert 32)
;    (ptr-mtxs      generic-tie-matrix       :offset-assert 36)
;    (ptr-cinds     uint32                   :offset-assert 40)
;    (next-instance uint32                   :offset-assert 44)
;    (next-model    uint32                   :offset-assert 48)
;    (next-is-model uint32                   :offset-assert 52)
;    (tie-type      uint32                   :offset-assert 56)
;    )
;   :method-count-assert 9
;   :size-assert         #x3c
;   :flag-assert         #x90000003c
;   )

; ;; generic-tie-h
; (deftype generic-tie-stats (structure)
;   ((num-bps       uint32  :offset-assert 0)
;    (num-ips       uint32  :offset-assert 4)
;    (num-dps       uint32  :offset-assert 8)
;    (num-shaders   uint32  :offset-assert 12)
;    (num-models    uint32  :offset-assert 16)
;    (num-instances uint32  :offset-assert 20)
;    (num-waits     uint32  :offset-assert 24)
;    (num-qwc       uint32  :offset-assert 28)
;    (max-qwc       uint32  :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x24
;   :flag-assert         #x900000024
;   )

; ;; generic-tie-h
; (deftype generic-tie-calls (structure)
;   ((generic-prepare-dma-double basic  :offset-assert 0)
;    (generic-envmap-dproc       basic  :offset-assert 4)
;    (generic-interp-dproc       basic  :offset-assert 8)
;    (generic-no-light-dproc     basic  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-tie-h
; (deftype generic-tie-shadow (structure)
;   ((out-buf      gsf-buffer                :offset-assert 0)
;    (cur-buf      uint32                    :offset-assert 4)
;    (tie-type     int32                     :offset-assert 8)
;    (ptr-inst     uint32                    :offset-assert 12)
;    (ptr-buf      uint32                    :offset-assert 16)
;    (inst-xor     int32                     :offset-assert 20)
;    (end-of-chain uint32                    :offset-assert 24)
;    (write-limit  uint32                    :offset-assert 28)
;    (calls        generic-tie-calls :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; generic-tie-h
; (deftype generic-tie-work (structure)
;   ((control     generic-tie-control  :inline :offset-assert 0)
;    (interp-job  generic-interp-job   :inline :offset-assert 60)
;    (shadow      generic-tie-shadow   :inline :offset-assert 76)
;    (input-a     generic-tie-input    :inline :offset-assert 128)
;    (input-b     generic-tie-input    :inline :offset-assert 3376)
;    (inst-buf    generic-tie-instance :inline :offset-assert 6624)
;    (palette-buf UNKNOWN              128     :offset-assert 6992)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d50
;   :flag-assert         #x900001d50
;   )

; ;; generic-work-h
; (deftype generic-input-buffer (structure)
;   ((data UNKNOWN           472     :offset-assert 0)
;    (merc generic-merc-work :inline :offset-assert 0)
;    (tie  generic-tie-work  :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d80
;   :flag-assert         #x900001d80
;   )

; ;; generic-work-h
; (deftype generic-debug (structure)
;   ((locks      UNKNOWN 4  :offset-assert 0)
;    (timer      UNKNOWN 32 :offset-assert 16)
;    (count      UNKNOWN 32 :offset-assert 144)
;    (vps        UNKNOWN 32 :offset-assert 272)
;    (buffer     int32      :offset-assert 400)
;    (start-addr int32      :offset-assert 404)
;    (lock       int32      :offset-assert 408)
;    )
;   :method-count-assert 9
;   :size-assert         #x19c
;   :flag-assert         #x90000019c
;   )

; ;; generic-work-h
; (deftype generic-vu1-header (structure)
;   ((matrix  matrix          :inline :offset-assert 0)
;    (strgif  generic-gif-tag :inline :offset-assert 64)
;    (adcmds  UNKNOWN         2       :offset-assert 80)
;    (adnop1  ad-cmd          :inline :offset-assert 80)
;    (adnop2  ad-cmd          :inline :offset-assert 96)
;    (dps     uint16                  :offset-assert 92)
;    (kickoff uint16                  :offset-assert 108)
;    (strips  uint16                  :offset-assert 76)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; generic-work-h
; (deftype generic-vu1-texbuf (structure)
;   ((header generic-vu1-header :inline  :offset-assert 0)
;    (shader UNKNOWN            :dynamic :offset-assert 112)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; generic-work-h
; (deftype generic-texbuf (structure)
;   ((tag    dma-packet         :inline  :offset-assert 0)
;    (header generic-vu1-header :inline  :offset-assert 16)
;    (shader UNKNOWN            :dynamic :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; generic-work-h
; (deftype generic-effect-work (structure)
;   ((consts   generic-consts  :inline :offset-assert 0)
;    (storage  generic-storage :inline :offset-assert 432)
;    (storage2 generic-storage :inline :offset-assert 688)
;    (lights   vu-lights       :inline :offset-assert 944)
;    )
;   :method-count-assert 9
;   :size-assert         #x420
;   :flag-assert         #x900000420
;   )

; ;; generic-work-h
; (deftype generic-effect-buffer (structure)
;   ((outbuf-0 UNKNOWN             3552    :offset-assert 0)
;    (work     generic-effect-work :inline :offset-assert 3552)
;    (outbuf-1 UNKNOWN             3552    :offset-assert 4608)
;    )
;   :method-count-assert 9
;   :size-assert         #x1fe0
;   :flag-assert         #x900001fe0
;   )

; ;; generic-work-h
; (deftype generic-work (structure)
;   ((saves   generic-saves         :inline :offset-assert 0)
;    (storage generic-storage       :inline :offset-assert 368)
;    (in-buf  generic-input-buffer  :inline :offset-assert 624)
;    (fx-buf  generic-effect-buffer :inline :offset-assert 8176)
;    )
;   :method-count-assert 9
;   :size-assert         #x3fd0
;   :flag-assert         #x900003fd0
;   )

; ;; shadow-cpu-h
(deftype shadow-settings (structure)
  ((center        vector :inline :offset-assert 0)
   (flags         int32          :offset 12)
   (shadow-dir    vector :inline :offset-assert 16)
   (dist-to-locus float          :offset 28)
   (bot-plane     plane  :inline :offset-assert 32)
   (top-plane     plane  :inline :offset-assert 48)
   (fade-dist     float          :offset-assert 64)
   (fade-start    float          :offset-assert 68)
   (dummy-2       int32          :offset-assert 72)
   (dummy-3       int32          :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; shadow-cpu-h
(deftype shadow-control (basic)
  ((settings shadow-settings :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x60
  :flag-assert         #x1000000060
  (:methods
    (new (symbol type float float float float float) _type_ 0)
    (clear-offset-bit (shadow-control) none 9)
    (set-offset-bit (shadow-control) none 10)
    (set-top-plane-offset (shadow-control float) none 11)
    (set-bottom-plane-offset (shadow-control float) none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; shadow-cpu-h
(deftype shadow-data (structure)
  ((texoffset           vector     :inline :offset-assert 0)
   (texscale            vector     :inline :offset-assert 16)
   (clrs                uint128    2       :offset-assert 32)
   (dma-unpack-template dma-packet :inline :offset-assert 64)
   (dma-cnt             uint64             :offset-assert 80)
   (vif-nop             uint32             :offset-assert 88)
   (vif-unpack-v4-8     uint32             :offset-assert 92)
   (pdc                 basic              :offset-assert 96)
   (dist                float              :offset-assert 100)
   (oddeven             uint8              :offset-assert 104)
   (waits               uint32             :offset-assert 108)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; shadow-cpu-h
(deftype shadow-work (structure)
  ((shadow-data shadow-data :inline :offset-assert 0)
   (inbuf       uint128     600     :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x25f0
  :flag-assert         #x9000025f0
  )

;; shadow-cpu-h
(deftype shadow-run (structure)
  ((first uint32  :offset-assert 0)
   (next  uint32  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; shadow-cpu-h
(deftype shadow-queue (structure)
  ((num-runs uint32     :offset-assert 0)
   (cur-run  uint32     :offset-assert 4)
   (run      shadow-run 15 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf8
  :flag-assert         #x9000000f8
  )

(define-extern shadow-queue-append (function shadow-queue uint))
;;(define-extern shadow-work object) ;; unknown type
;;(define-extern shadow-queue object) ;; unknown type
;;(define-extern *shadow-queue* object) ;; unknown type
;;(define-extern *shadow* object) ;; unknown type
;;(define-extern shadow-settings object) ;; unknown type
;;(define-extern *shadow-object* object) ;; unknown type
(define-extern shadow-queue-reset (function shadow-queue int))


;; shadow-cpu-h
(deftype shadow-vertex (structure)
  ((x      float  :offset-assert 0)
   (y      float  :offset-assert 4)
   (z      float  :offset-assert 8)
   (weight float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; shadow-cpu-h
(deftype shadow-matrix-ref (structure)
  ((joint-0 uint8  :offset-assert 0)
   (joint-1 uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; shadow-cpu-h
; (deftype shadow-edge (structure)
;   ((ind-0 uint16  :offset-assert 0)
;    (ind-1 uint16  :offset-assert 2)
;    (tri-0 uint16  :offset-assert 4)
;    (tri-1 uint16  :offset-assert 6)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

;; shadow-cpu-h
(deftype shadow-tri (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (ind-2 uint8  :offset-assert 2)
   (faces uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; shadow-cpu-h
(deftype shadow-edge (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (tri-0 uint8  :offset-assert 2)
   (tri-1 uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; shadow-cpu-h
(deftype shadow-header (structure)
  ((qwc-data         uint32  :offset-assert 0)
   (num-joints       uint32  :offset-assert 4)
   (num-verts        uint16  :offset-assert 8)
   (num-twos         uint16  :offset-assert 10)
   (num-single-tris  uint16  :offset-assert 12)
   (num-single-edges uint16  :offset-assert 14)
   (num-double-tris  uint16  :offset-assert 16)
   (num-double-edges uint16  :offset-assert 18)
   (ofs-verts        uint32  :offset-assert 20)
   (ofs-refs         uint32  :offset-assert 24)
   (ofs-single-tris  uint32  :offset-assert 28)
   (ofs-single-edges uint32  :offset-assert 32)
   (ofs-double-tris  uint32  :offset-assert 36)
   (ofs-double-edges uint32  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; shadow-cpu-h
(deftype shadow-geo (art-element)
  ((total-size uint32                 :offset-assert 32)
   (header     shadow-header :inline  :offset 32)
   (rest       uint64       :dynamic :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x50
  :flag-assert         #xd00000050
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; memcard-h
(deftype mc-file-info (structure)
  ((present               int32      :offset-assert 0)
   (blind-data            float 16 :offset-assert 4)
   (blind-data-int8       int8 64 :offset 4)
   (level-index           int32      :offset 4)
   (fuel-cell-count       float      :offset 8)
   (money-count           float      :offset 12)
   (buzzer-count          float      :offset 16)
   (completion-percentage float      :offset 20)
   (minute                uint8      :offset 24)
   (hour                  uint8      :offset 25)
   (week                  uint8      :offset 26)
   (day                   uint8      :offset 27)
   (month                 uint8      :offset 28)
   (year                  uint8      :offset 29)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

;; memcard-h
(deftype mc-slot-info (structure)
  ((handle       int32     :offset-assert 0)
   (known        int32     :offset-assert 4)
   (formatted    int32     :offset-assert 8)
   (inited       int32     :offset-assert 12)
   (last-file    int32     :offset-assert 16)
   (mem-required int32     :offset-assert 20)
   (mem-actual   int32     :offset-assert 24)
   (file         mc-file-info 4 :inline :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12c
  :flag-assert         #x90000012c
  )

(define-extern show-mc-info (function none))
(define-extern mc-sync (function int))

;; game-info-h
(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; game-info-h
(deftype level-buffer-state (structure)
  ((name          basic  :offset-assert 0)
   (display?      basic  :offset-assert 4)
   (force-vis?    basic  :offset-assert 8)
   (force-inside? basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; game-info-h
(deftype load-state (basic)
  ((want          level-buffer-state  2 :inline  :offset-assert 4)
   (vis-nick      basic       :offset-assert 36)
   (command-list  pair       :offset-assert 40)
   (object-name   basic 256 :offset-assert 44)
   (object-status basic 256 :offset-assert 1068)
   )
  :method-count-assert 21
  :size-assert         #x82c
  :flag-assert         #x150000082c
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    )
  )

(define-extern *load-state* load-state)

;; game-info-h
(deftype continue-point (basic)
  ((name          basic           :offset-assert 4)
   (level         basic           :offset-assert 8)
   (flags         uint32          :offset-assert 12)
   (trans         vector  :inline :offset-assert 16)
   (quat          vector  :inline :offset-assert 32)
   (camera-trans  vector  :inline :offset-assert 48)
   (camera-rot    float 9       :offset-assert 64)
   (load-commands pair           :offset-assert 100)
   (vis-nick      basic           :offset-assert 104)
   (lev0          basic           :offset-assert 108)
   (disp0         basic           :offset-assert 112)
   (lev1          basic           :offset-assert 116)
   (disp1         basic           :offset-assert 120)
   )
  :method-count-assert 10
  :size-assert         #x7c
  :flag-assert         #xa0000007c
  (:methods
    (dummy-9 () none 9)
    )
  )

;; game-info-h
(deftype game-info (basic)
  ((mode                  basic      :offset-assert 4)
   (save-name             basic      :offset-assert 8)
   (life                  float      :offset-assert 12)
   (life-max              float      :offset-assert 16)
   (money                 float      :offset-assert 20)
   (money-total           float      :offset-assert 24)
   (money-per-level       uint8 32 :offset-assert 28)
   (deaths-per-level      uint8 32 :offset-assert 60)
   (buzzer-total          float      :offset-assert 92)
   (fuel                  float      :offset-assert 96)
   (perm-list             basic      :offset-assert 100)
   (task-perm-list        basic      :offset-assert 104)
   (current-continue      basic      :offset-assert 108)
   (text-ids-seen         basic      :offset-assert 112)
   (level-opened          uint8 32 :offset-assert 116)
   (hint-control          basic      :offset-assert 148)
   (task-hint-control     basic      :offset-assert 152)
   (total-deaths          int32      :offset-assert 156)
   (continue-deaths       int32      :offset-assert 160)
   (fuel-cell-deaths      int32      :offset-assert 164)
   (game-start-time       uint64     :offset-assert 168)
   (continue-time         uint64     :offset-assert 176)
   (death-time            uint64     :offset-assert 184)
   (hit-time              uint64     :offset-assert 192)
   (fuel-cell-pickup-time uint64     :offset-assert 200)
   (fuel-cell-time        basic      :offset-assert 208)
   (enter-level-time      basic      :offset-assert 212)
   (in-level-time         basic      :offset-assert 216)
   (blackout-time         uint64     :offset-assert 224)
   (letterbox-time        uint64     :offset-assert 232)
   (hint-play-time        uint64     :offset-assert 240)
   (display-text-time     uint64     :offset-assert 248)
   (display-text-handle   uint64     :offset-assert 256)
   (death-movie-tick      int32      :offset-assert 264)
   (want-auto-save        basic      :offset-assert 268)
   (auto-save-proc        uint64     :offset-assert 272)
   (auto-save-status      uint32     :offset-assert 280)
   (auto-save-card        int32      :offset-assert 284)
   (auto-save-which       int32      :offset-assert 288)
   (pov-camera-handle     uint64     :offset-assert 296)
   (other-camera-handle   uint64     :offset-assert 304)
   (death-pos             basic      :offset-assert 312)
   (dummy                 basic      :offset-assert 316)
   (auto-save-count       int32      :offset-assert 320)
   )
  :method-count-assert 29
  :size-assert         #x144
  :flag-assert         #x1d00000144
  ;; field dummy is a basic loaded with a signed load
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

(define-extern *game-info* game-info)

;; wind-h
(deftype wind-vector (structure)
  ((wind-pos vector2w :inline :offset-assert 0)
   (wind-vel vector2w :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; wind-h
(deftype wind-work (basic)
  ((wind-array  vector  64 :inline      :offset-assert 16)
   (wind-normal vector  :inline :offset-assert 1040)
   (wind-temp   vector  :inline :offset-assert 1056)
   (wind-force  float 64      :offset-assert 1072)
   (wind-time   uint32          :offset-assert 1328)
   )
  :method-count-assert 9
  :size-assert         #x534
  :flag-assert         #x900000534
  )

; ;; prototype-h
; (deftype prototype-bucket (basic)
;   ((name          basic           :offset-assert 4)
;    (flags         uint32          :offset-assert 8)
;    (in-level      uint16          :offset-assert 12)
;    (utextures     uint16          :offset-assert 14)
;    (geometry      UNKNOWN 4       :offset-assert 16)
;    (dists         vector  :inline :offset-assert 32)
;    (rdists        vector  :inline :offset-assert 48)
;    (next          UNKNOWN 4       :offset-assert 64)
;    (count         UNKNOWN 4       :offset-assert 80)
;    (near-plane    meters          :offset-assert 32)
;    (near-stiff    meters          :offset-assert 36)
;    (mid-plane     meters          :offset-assert 40)
;    (far-plane     meters          :offset-assert 44)
;    (rlength-near  float           :offset-assert 48)
;    (rlength-stiff float           :offset-assert 52)
;    (rlength-mid   float           :offset-assert 56)
;    (stiffness     float           :offset-assert 60)
;    (next-clear    uint128         :offset-assert 64)
;    (count-clear   uint64          :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x58
;   :flag-assert         #x900000058
;   )

; ;; prototype-h
; (deftype prototype-bucket-shrub (prototype-bucket)
;   ((name          basic           :offset-assert 4)
;    (flags         uint32          :offset-assert 8)
;    (in-level      uint16          :offset-assert 12)
;    (utextures     uint16          :offset-assert 14)
;    (geometry      UNKNOWN 4       :offset-assert 16)
;    (dists         vector  :inline :offset-assert 32)
;    (rdists        vector  :inline :offset-assert 48)
;    (next          UNKNOWN 4       :offset-assert 64)
;    (count         UNKNOWN 4       :offset-assert 80)
;    (near-plane    meters          :offset-assert 32)
;    (near-stiff    meters          :offset-assert 36)
;    (mid-plane     meters          :offset-assert 40)
;    (far-plane     meters          :offset-assert 44)
;    (rlength-near  float           :offset-assert 48)
;    (rlength-stiff float           :offset-assert 52)
;    (rlength-mid   float           :offset-assert 56)
;    (stiffness     float           :offset-assert 60)
;    (next-clear    uint128         :offset-assert 64)
;    (count-clear   uint64          :offset-assert 80)
;    (mod-count     UNKNOWN 4       :offset-assert 88)
;    (last          UNKNOWN 4       :offset-assert 96)
;    (last-clear    uint128         :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; prototype-h
; (deftype prototype-inline-array-shrub (drawable)
;   ((id      int16           :offset-assert 4)
;    (bsphere vector  :inline :offset-assert 16)
;    (length  int16           :offset-assert 6)
;    (data    UNKNOWN 1       :offset-assert 36)
;    )
;   :method-count-assert 18
;   :size-assert         #x94
;   :flag-assert         #x1200000094
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

;; prototype-h
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub basic   :offset-assert 4)
   (wind-vectors                 uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; prototype-h
; (deftype prototype-bucket-tie (prototype-bucket)
;   ((name                basic                 :offset-assert 4)
;    (flags               uint32                :offset-assert 8)
;    (in-level            uint16                :offset-assert 12)
;    (utextures           uint16                :offset-assert 14)
;    (geometry            UNKNOWN      4        :offset-assert 16)
;    (dists               vector       :inline  :offset-assert 32)
;    (rdists              vector       :inline  :offset-assert 48)
;    (next                UNKNOWN      4        :offset-assert 64)
;    (count               UNKNOWN      4        :offset-assert 80)
;    (near-plane          meters                :offset-assert 32)
;    (near-stiff          meters                :offset-assert 36)
;    (mid-plane           meters                :offset-assert 40)
;    (far-plane           meters                :offset-assert 44)
;    (rlength-near        float                 :offset-assert 48)
;    (rlength-stiff       float                 :offset-assert 52)
;    (rlength-mid         float                 :offset-assert 56)
;    (stiffness           float                 :offset-assert 60)
;    (next-clear          uint128               :offset-assert 64)
;    (count-clear         uint64                :offset-assert 80)
;    (generic-count       UNKNOWN      4        :offset-assert 88)
;    (generic-next        UNKNOWN      4        :offset-assert 96)
;    (frag-count          UNKNOWN      4        :offset-assert 112)
;    (index-start         UNKNOWN      4        :offset-assert 116)
;    (base-qw             UNKNOWN      4        :offset-assert 120)
;    (envmap-rfade        float                 :offset-assert 128)
;    (envmap-fade-far     float                 :offset-assert 132)
;    (envmap-shader       adgif-shader          :offset-assert 136)
;    (collide-frag        basic                 :offset-assert 140)
;    (tie-colors          basic                 :offset-assert 144)
;    (data                UNKNOWN      :dynamic :offset-assert 148)
;    (color-index-qwc     UNKNOWN      :dynamic :offset-assert 148)
;    (generic-next-clear  uint128               :offset-assert 96)
;    (generic-count-clear uint128               :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x94
;   :flag-assert         #x900000094
;   )

;; prototype-h
(deftype prototype-array-tie (array)
  ()
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;; prototype-h
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie basic   :offset-assert 4)
   (wind-vectors        uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; prototype-h
(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (origin       matrix4h :inline :offset-assert 32)
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  (:methods
    (dummy-9 () none 9)
    (dummy-10 (_type_) int 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

; ;; joint-h
; (deftype joint-control-channel (structure)
;   ((parent           basic     :offset-assert 0)
;    (command          basic     :offset-assert 4)
;    (frame-interp     float     :offset-assert 8)
;    (frame-group      basic     :offset-assert 12)
;    (frame-num        float     :offset-assert 16)
;    (num-func         basic     :offset-assert 20)
;    (param            UNKNOWN 2 :offset-assert 24)
;    (group-sub-index  int16     :offset-assert 32)
;    (group-size       int16     :offset-assert 34)
;    (dist             meters    :offset-assert 36)
;    (eval-time        uint32    :offset-assert 40)
;    (inspector-amount float     :offset-assert 44)
;    )
;   :method-count-assert 10
;   :size-assert         #x30
;   :flag-assert         #xa00000030
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; joint-h
; (deftype joint-control (basic)
;   ((status                  uint16           :offset-assert 4)
;    (allocated-length        int16            :offset-assert 6)
;    (root-channel            uint32           :offset-assert 16)
;    (blend-index             int32            :offset-assert 20)
;    (active-channels         int32            :offset-assert 24)
;    (generate-frame-function basic            :offset-assert 28)
;    (prebind-function        basic            :offset-assert 32)
;    (postbind-function       basic            :offset-assert 36)
;    (effect                  basic            :offset-assert 40)
;    (channel                 UNKNOWN :dynamic :offset-assert 48)
;    (frame-group0            basic            :offset-assert 60)
;    (frame-num0              float            :offset-assert 64)
;    (frame-interp0           float            :offset-assert 56)
;    (frame-group1            basic            :offset-assert 108)
;    (frame-num1              float            :offset-assert 112)
;    (frame-interp1           float            :offset-assert 104)
;    (frame-group2            basic            :offset-assert 156)
;    (frame-num2              float            :offset-assert 160)
;    (frame-interp2           float            :offset-assert 152)
;    )
;   :method-count-assert 11
;   :size-assert         #xc0
;   :flag-assert         #xb000000c0
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; joint-h
; (deftype matrix-stack (structure)
;   ((top  matrix     :offset-assert 0)
;    (data UNKNOWN 24 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x610
;   :flag-assert         #x900000610
;   )

; ;; joint-h
; (deftype channel-upload-info (structure)
;   ((fixed     joint-anim-compressed-fixed  :offset-assert 0)
;    (fixed-qwc int32                        :offset-assert 4)
;    (frame     joint-anim-compressed-frame  :offset-assert 8)
;    (frame-qwc int32                        :offset-assert 12)
;    (amount    float                        :offset-assert 16)
;    (interp    float                        :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; joint-h
; (deftype joint-work (structure)
;   ((temp-mtx       matrix                      :inline :offset-assert 0)
;    (joint-stack    matrix-stack                :inline :offset-assert 64)
;    (fix-jmp-table  UNKNOWN                     16      :offset-assert 1616)
;    (frm-jmp-table  UNKNOWN                     16      :offset-assert 1680)
;    (pair-jmp-table UNKNOWN                     16      :offset-assert 1744)
;    (uploads        UNKNOWN                     24      :offset-assert 1808)
;    (num-uploads    int32                               :offset-assert 2384)
;    (mtx-acc        UNKNOWN                     2       :offset-assert 2400)
;    (tq-acc         UNKNOWN                     100     :offset-assert 2528)
;    (jacp-hdr       joint-anim-compressed-hdr   :inline :offset-assert 7328)
;    (fixed-data     joint-anim-compressed-fixed :inline :offset-assert 7392)
;    (frame-data     UNKNOWN                     2       :offset-assert 9600)
;    (flatten-array  UNKNOWN                     576     :offset-assert 2400)
;    (flattened      UNKNOWN                     24      :offset-assert 2400)
;    )
;   :method-count-assert 9
;   :size-assert         #x3640
;   :flag-assert         #x900003640
;   )

; ;; bones-h
; (deftype bone-buffer (structure)
;   ((joint  UNKNOWN 16 :offset-assert 0)
;    (bone   UNKNOWN 16 :offset-assert 1024)
;    (output UNKNOWN 16 :offset-assert 2560)
;    )
;   :method-count-assert 9
;   :size-assert         #x1200
;   :flag-assert         #x900001200
;   )

; ;; bones-h
; (deftype bone-layout (structure)
;   ((data   UNKNOWN 8 :offset-assert 0)
;    (joint  UNKNOWN 2 :offset-assert 0)
;    (bone   UNKNOWN 2 :offset-assert 8)
;    (output UNKNOWN 2 :offset-assert 16)
;    (cache  UNKNOWN 2 :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; bones-h
(deftype bone-regs (structure)
  ((joint-ptr uint32  :offset-assert 0)
   (bone-ptr  uint32  :offset-assert 4)
   (num-bones uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; bones-h
; (deftype bone-work (structure)
;   ((layout     bone-layout :inline :offset-assert 0)
;    (bounds     sphere      :inline :offset-assert 32)
;    (lights     vu-lights   :inline :offset-assert 48)
;    (distance   vector      :inline :offset-assert 160)
;    (next-tag   dma-packet  :inline :offset-assert 176)
;    (dma-buf    basic               :offset-assert 192)
;    (sink-group basic               :offset-assert 196)
;    (next-pris  dma-packet          :offset-assert 200)
;    (next-merc  dma-packet          :offset-assert 204)
;    (wait-count uint32              :offset-assert 208)
;    (in-count   uint32              :offset-assert 212)
;    (sp-size    uint32              :offset-assert 216)
;    (sp-bufnum  uint32              :offset-assert 220)
;    (regs       bone-regs   :inline :offset-assert 224)
;    )
;   :method-count-assert 9
;   :size-assert         #xec
;   :flag-assert         #x9000000ec
;   )

; ;; bones-h
; (deftype bone-debug (structure)
;   ((time-ctr uint32      :offset-assert 0)
;    (timing   UNKNOWN 360 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x5a4
;   :flag-assert         #x9000005a4
;   )

; ;; bones-h
; (deftype bone-memory (structure)
;   ((work     bone-work  :inline :offset-assert 0)
;    (buffer   UNKNOWN    2       :offset-assert 240)
;    (dma-list dma-packet :inline :offset-assert 240)
;    )
;   :method-count-assert 9
;   :size-assert         #x24f0
;   :flag-assert         #x9000024f0
;   )

;; bones-h
(deftype merc-globals (structure)
  ((first uint32  :offset-assert 0)
   (next  uint32  :offset-assert 4)
   (sink  basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; bones-h
; (deftype merc-global-array (structure)
;   ((count   uint32    :offset-assert 0)
;    (globals UNKNOWN 8 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

;; bones-h
(deftype shadow-dma-packet (structure)
  ((tag      generic-merc-tag :inline :offset-assert 0)
   (settings shadow-settings  :inline :offset-assert 16)
   (geo-ref  dma-packet       :inline :offset-assert 96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;; res-h

(deftype res-tag (uint128)
  ()
  :flag-assert #x900000010
  )

(deftype res-lump (basic)
  ((length           int32   :offset-assert 4)
   (allocated-length int32   :offset-assert 8)
   (data-base        pointer  :offset-assert 12)
   (data-top         pointer  :offset-assert 16)
   (data-size        int32   :offset-assert 20)
   (extra            basic   :offset-assert 24)
   (tag              uint32  :offset-assert 28)
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field extra is a basic loaded with a signed load
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    )
  )

; ;; res
; (deftype res-lump (basic)
;   ()
;   :method-count-assert 22
;   :size-assert         #x20
;   :flag-assert         #x1600000020
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

;; dynamics-h
(deftype dynamics (basic)
  ((name           basic          :offset-assert 4)
   (gravity-max    float          :offset-assert 8)  ;; meters
   (gravity-length float          :offset-assert 12) ;; meters
   (gravity        vector :inline :offset-assert 16)
   (gravity-normal vector :inline :offset-assert 32)
   (walk-distance  float          :offset-assert 48) ;; meters
   (run-distance   float          :offset-assert 52) ;; meters
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

;; surface-h
(deftype surface (basic)
  ((name              basic      :offset-assert 4)
   ;; data went here
   (turnv             float      :offset-assert 8)
   (turnvv            float      :offset-assert 12)
   (tiltv             float      :offset-assert 16)
   (tiltvv            float      :offset-assert 20)
   (transv-max        float      :offset-assert 24)
   (target-speed      float      :offset-assert 28)
   (seek0             float      :offset-assert 32)
   (seek90            float      :offset-assert 36)
   (seek180           float      :offset-assert 40)
   (fric              float      :offset-assert 44)
   (nonlin-fric-dist  float      :offset-assert 48)
   (slip-factor       float      :offset-assert 52)
   (slide-factor      float      :offset-assert 56)
   (slope-up-factor   float      :offset-assert 60)
   (slope-down-factor float      :offset-assert 64)
   (slope-slip-angle  float      :offset-assert 68)
   (impact-fric       float      :offset-assert 72)
   (bend-factor       float      :offset-assert 76)
   (bend-speed        float      :offset-assert 80)
   (alignv            float      :offset-assert 84)
   (slope-up-traction float      :offset-assert 88)
   (align-speed       float      :offset-assert 92)
   ;; hook went here
   (active-hook       basic      :offset 128)
   (touch-hook        basic      :offset-assert 132)
   (impact-hook       basic      :offset-assert 136)
   (mult-hook         (function surface surface surface int none)     :offset-assert 140)
   ;; dataw went here
   (mode              basic      :offset-assert 144)
   (flags             uint32     :offset-assert 148)

   (data              float 30 :offset 8)
   (hook              basic 4  :offset 128)
   (dataw             uint32 2  :offset 144)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

(define-extern surface-interp! (function surface surface surface float surface))

;;(define-extern standard object) ;; unknown type
(define-extern *edge-surface* surface) ;; unknown type
(define-extern *uppercut-jump-mods* surface) ;; unknown type
(define-extern *forward-pole-jump-mods* surface) ;; unknown type
(define-extern *flip-jump-mods* surface) ;; unknown type
(define-extern surface-clamp-speed (function surface surface surface int none))
(define-extern *flop-mods* surface) ;; unknown type
(define-extern surface type)
(define-extern *smack-jump-mods* surface) ;; unknown type
(define-extern *dive-mods* surface) ;; unknown type
(define-extern *swim-surface* surface) ;; unknown type
(define-extern calc-terminal2-vel (function float float float float float))
(define-extern *wade-surface* surface) ;; unknown type
(define-extern *jump-mods* surface) ;; unknown type
(define-extern *turn-around-mods* surface) ;; unknown type
(define-extern *jump-attack-mods* surface) ;; unknown type
(define-extern *grass-surface* surface) ;; unknown type
(define-extern *dive-bottom-mods* surface) ;; unknown type
(define-extern *tread-surface* surface) ;; unknown type
(define-extern surface-mult! (function surface surface surface surface))
(define-extern *forward-high-jump-mods* surface) ;; unknown type
(define-extern *double-jump-mods* surface) ;; unknown type
;;(define-extern edge-grab object) ;; unknown type
(define-extern *high-jump-mods* surface) ;; unknown type
(define-extern *ice-surface* surface) ;; unknown type
(define-extern *grab-mods* surface) ;; unknown type
(define-extern *run-attack-mods* surface) ;; unknown type
(define-extern *quicksand-surface* surface) ;; unknown type
(define-extern *walk-no-turn-mods* surface) ;; unknown type
(define-extern calc-terminal-vel (function float float float float))
(define-extern *duck-mods* surface) ;; unknown type
(define-extern *duck-attack-mods* surface) ;; unknown type
(define-extern *slope-surface* surface) ;; unknown type
(define-extern calc-terminal4-vel (function float float float float))
(define-extern *edge-grab-mods* surface) ;; unknown type
(define-extern *standard-ground-surface* surface) ;; unknown type
(define-extern *flop-land-mods* surface) ;; unknown type
(define-extern *wheel-mods* surface) ;; unknown type
(define-extern *swim-mods* surface) ;; unknown type

(define-extern *walk-mods* surface) ;; unknown type
(define-extern *attack-mods* surface) ;; unknown type
(define-extern *neutral-mods* surface) ;; unknown type
;;(define-extern grab object) ;; unknown type
(define-extern *wade-mods* surface) ;; unknown type
(define-extern *forward-jump-mods* surface) ;; unknown type
(define-extern *stone-surface* surface) ;; unknown type
(define-extern *launch-jump-mods* surface) ;; unknown type
(define-extern *empty-mods* surface) ;; unknown type
(define-extern *tar-surface* surface) ;; unknown type
(define-extern *wheel-flip-mods* surface) ;; unknown type
(define-extern *pole-mods* surface) ;; unknown type

;; pat-h
(deftype pat-surface (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern pat-event->string (function pat-surface string))
(define-extern pat-material->string (function pat-surface string))
;;(define-extern pat-surface object) ;; unknown type
;;(define-extern pat-mode-info object) ;; unknown type
(define-extern pat-mode->string (function pat-surface string))

;; pat-h
(deftype pat-mode-info (structure)
  ((name         basic   :offset-assert 0)
   (wall-angle   float   :offset-assert 4)
   (color        uint32  :offset-assert 8)
   (hilite-color uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; fact-h
(deftype fact-bank (basic)
  ((eco-level-max        float     :offset-assert 4)
   (eco-single-inc       float     :offset-assert 8)
   (eco-full-inc         float     :offset-assert 12)
   (eco-single-timeout   uint64  :offset-assert 16) ; usec
   (eco-full-timeout     uint64  :offset-assert 24) ; usec
   (dummy                uint64  :offset-assert 32) ; usec
   (health-max-default   float     :offset-assert 40)
   (health-single-inc    float     :offset-assert 44)
   (eco-pill-max-default float     :offset-assert 48)
   (health-small-inc     float     :offset-assert 52)
   (buzzer-max-default   float     :offset-assert 56)
   (buzzer-single-inc    float     :offset-assert 60)
   (suck-bounce-dist     float    :offset-assert 64) ; meters
   (suck-suck-dist       float    :offset-assert 68) ; meters
   (default-pill-inc     float     :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(define-extern pickup-type->string (function int string))

;; fact-h
(deftype fact-info (basic)
  ((process             basic   :offset-assert 4)
   (pickup-type         int32   :offset-assert 8)
   (pickup-amount       float   :offset-assert 12)
   (pickup-spawn-amount float   :offset-assert 16)
   (options             uint64  :offset-assert 24)
   (fade-time           uint64  :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; fact-h
(deftype fact-info-target (fact-info)
  ((eco-type              int32     :offset-assert 40)
   (eco-level             float     :offset-assert 44)
   (eco-pickup-time       uint64    :offset-assert 48)
   (eco-timeout           uint64  :offset-assert 56) ;; usec
   (health                float     :offset-assert 64)
   (health-max            float     :offset-assert 68)
   (buzzer                float     :offset-assert 72)
   (buzzer-max            float     :offset-assert 76)
   (eco-pill              float     :offset-assert 80)
   (eco-pill-max          float     :offset-assert 84)
   (health-pickup-time    uint64    :offset-assert 88)
   (eco-source            uint64    :offset-assert 96)
   (eco-source-time       uint64    :offset-assert 104)
   (money-pickup-time     uint64    :offset-assert 112)
   (buzzer-pickup-time    uint64    :offset-assert 120)
   (fuel-cell-pickup-time uint64    :offset-assert 128)
   (eco-pill-pickup-time  uint64    :offset-assert 136)
   )
  :method-count-assert 12
  :size-assert         #x90
  :flag-assert         #xc00000090
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; fact-h
(deftype fact-info-enemy (fact-info)
  ((speed               float   :offset-assert 40)
   (idle-distance       float  :offset-assert 44) ; meters
   (notice-top          float  :offset-assert 48) ; meters
   (notice-bottom       float  :offset-assert 52) ; meters
   (cam-horz            float  :offset-assert 56) ; meters
   (cam-vert            float  :offset-assert 60) ; meters
   (cam-notice-dist     float  :offset-assert 64) ; meters
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; aligner-h
(deftype align-control (basic)
  ((flags       uint32             :offset-assert 4)
   (process     basic              :offset-assert 8)
   (frame-group basic              :offset-assert 12)
   (frame-num   float              :offset-assert 16)
   (matrix      matrix     2  :inline     :offset-assert 32)
   (transform   transform    2 :inline      :offset-assert 160)
   (delta       transformq :inline :offset-assert 256)
   (last-speed  float             :offset-assert 304);; meters
   (align       transformq :inline :offset 160)
   )
  :method-count-assert 14
  :size-assert         #x134
  :flag-assert         #xe00000134
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

;; game-h
(deftype process-drawable (process)
  ((root        basic   :offset-assert 112)
   (node-list   basic   :offset-assert 116)
   (draw        basic   :offset-assert 120)
   (skel        basic   :offset-assert 124)
   (nav         basic   :offset-assert 128)
   (align       basic   :offset-assert 132)
   (path        basic   :offset-assert 136)
   (vol         basic   :offset-assert 140)
   (fact        basic   :offset-assert 144)
   (link        basic   :offset-assert 148)
   (part        basic   :offset-assert 152)
   (water       basic   :offset-assert 156)
   (sound       basic   :offset-assert 160)
   (state-flags uint32  :offset-assert 164)
   (state-time  uint64  :offset-assert 168)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  ;; inherited inspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    )
  )

; ;; game-h
; (deftype process-drawable-reserved (process-drawable)
;   ()
;   :method-count-assert 63
;   :size-assert         #xb0
;   :flag-assert         #x3f004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     )
;   )

;; game-h
(deftype attack-info (structure)
  ((trans        vector :inline :offset-assert 0)
   (vector       vector :inline :offset-assert 16)
   (intersection vector :inline :offset-assert 32)
   (attacker     uint64         :offset-assert 48) ;; handle
   (invinc-time  uint64         :offset-assert 56)
   (mask         uint32         :offset-assert 64)
   (mode         basic          :offset-assert 68)
   (shove-back   float         :offset-assert 72) ;; meters
   (shove-up     float         :offset-assert 76) ;; meters
   (speed        float         :offset-assert 80) ;; meters
   (dist         float         :offset-assert 84) ;; meters
   (control      float          :offset-assert 88)
   (angle        basic          :offset-assert 92)
   (rotate-to    float            :offset-assert 96) ;; deg
   (prev-state   basic          :offset-assert 100)
   )
  :method-count-assert 10
  :size-assert         #x68
  :flag-assert         #xa00000068
  ;; field handle is likely a value type
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; game-h
; (deftype ground-tween-info (structure)
;   ((chan  UNKNOWN 3 :offset-assert 0)
;    (blend UNKNOWN 3 :offset-assert 4)
;    (group UNKNOWN 5 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x24
;   :flag-assert         #x900000024
;   )

; ;; generic-obs-h
; (deftype manipy (process-drawable)
;   ((~Tnew-trans-hook       basic           :offset-assert 176)
;    (~Tcur-trans-hook       basic           :offset-assert 180)
;    (~Tcur-event-hook       basic           :offset-assert 184)
;    (~Tnew-joint-anim       basic           :offset-assert 188)
;    (~Tnew-joint-anim-blend uint64          :offset-assert 192)
;    (~Tanim-mode            basic           :offset-assert 200)
;    (~Tcur-grab-handle      uint64          :offset-assert 208)
;    (~Tcur-target-handle    uint64          :offset-assert 216)
;    (~Told-grab-pos         vector  :inline :offset-assert 224)
;    (~Tjoint                UNKNOWN 4       :offset-assert 240)
;    (~Tnew-post-hook        basic           :offset-assert 256)
;    (~Tcur-post-hook        basic           :offset-assert 260)
;    (~Tclone-copy-trans     basic           :offset-assert 264)
;    (~Tshadow-backup        basic           :offset-assert 268)
;    (~Tdraw?                basic           :offset-assert 272)
;    )
;   :method-count-assert 20
;   :size-assert         #x114
;   :flag-assert         #x1400b00114
;   ;; inherited inspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

;; generic-obs-h
(deftype part-spawner (process-drawable)
  ((~Tmode         uint32         :offset-assert 176)
   (~Tenable       basic          :offset-assert 180)
   (~Tradius       float         :offset-assert 184) ; meters
   (~Tworld-sphere sphere :inline :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15006000d0
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    )
  )

; ;; generic-obs-h
; (deftype part-tracker (process)
;   ()
;   :method-count-assert 14
;   :size-assert         #xf8
;   :flag-assert         #xe009000f8
;   ;; inherited inspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

;; generic-obs-h
(deftype camera-tracker (process)
  (
   ;(~Tname            basic   :offset-assert 4)
   (~Tgrab-target     uint64  :offset 120)
   (~Tgrab-event      basic   :offset-assert 128)
   (~Trelease-event   basic   :offset-assert 132)
   (~Told-global-mask uint32  :offset-assert 136)
   (~Told-self-mask   uint32  :offset-assert 140)
   (~Told-parent-mask uint32  :offset-assert 144)
   (~Tlook-at-target  uint64  :offset-assert 152)
   (~Tpov-target      uint64  :offset-assert 160)
   (~Twork-process    uint64  :offset-assert 168)
   (~Tanim-process    uint64  :offset-assert 176)
   (~Tstart-time      uint64  :offset-assert 184)
   (~Tcallback        basic   :offset-assert 192)
   (~Tuserdata        basic   :offset-assert 196)
   (~Tmessage         basic   :offset-assert 200)
   (~Tborder-value    basic   :offset-assert 204)
   (~Tmask-to-clear   uint32  :offset-assert 208)
   (~Tscript          basic   :offset-assert 212)
   (~Tscript-line     basic   :offset-assert 216)
   (~Tscript-func     basic   :offset-assert 220)
   )
  :heap-base #x70
  :method-count-assert 15
  :size-assert         #xe0
  :flag-assert         #xf007000e0
  ;; inherited inspect of processfield ~Tuserdata is a basic loaded with a signed load
  (:methods
    (dummy-14 () none 14)
    )
  )

;; generic-obs-h
(deftype touch-tracker (process-drawable)
  ((~Tduration     uint64  :offset-assert 176)
   (~Ttarget       uint64  :offset-assert 184)
   (~Tevent        basic   :offset-assert 192)
   (~Trun-function basic   :offset-assert 196)
   (~Tcallback     basic   :offset-assert 200)
   (~Tevent-mode   basic   :offset-assert 204)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14006000d0
  ;; inherited inspect of process-drawable
  )

;; generic-obs-h
(deftype swingpole (process)
  ((~Troot        basic          :offset-assert 112)
   (~Tdir         vector :inline :offset-assert 128)
   (~Trange       float         :offset-assert 144) ;; meters
   (~Tedge-length float         :offset-assert 148) ;; meters
   )
  :heap-base #x30
  :method-count-assert 14
  :size-assert         #x98
  :flag-assert         #xe00300098
  ;; inherited inspect of process
  )

;; generic-obs-h
(deftype gui-query (structure)
  ((x-position        int32  :offset-assert 0)
   (y-position        int32  :offset-assert 4)
   (message           basic  :offset-assert 8)
   (decision          basic  :offset-assert 12)
   (only-allow-cancel basic  :offset-assert 16)
   (no-msg            basic  :offset-assert 20)
   (message-space     int32  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; generic-obs-h
(deftype othercam (process)
  ((~Thand              uint64         :offset-assert 112)
   (~Told-global-mask   uint32         :offset-assert 120)
   (~Tmask-to-clear     uint32         :offset-assert 124)
   (~Tcam-joint-index   int32          :offset-assert 128)
   (~Told-pos           vector :inline :offset-assert 144)
   (~Told-mat-z         vector :inline :offset-assert 160)
   (~Thad-valid-frame   basic          :offset-assert 176)
   (~Tborder-value      basic          :offset-assert 180)
   (~Tdie?              basic          :offset-assert 184)
   (~Tsurvive-anim-end? basic          :offset-assert 188)
   (~Tspooling?         basic          :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 14
  :size-assert         #xc4
  :flag-assert         #xe006000c4
  ;; inherited inspect of process
  )

;; generic-obs-h
(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  (:methods
    (dummy-14 () none 14)
    )
  )

;; pov-camera-h
(deftype pov-camera (process-drawable)
  ((~Tflags               int32   :offset-assert 176)
   (~Tdebounce-start-time uint64  :offset-assert 184)
   (~Tnotify-handle       uint64  :offset-assert 192)
   (~Tanim-name           basic   :offset-assert 200)
   (~Tcommand-list        basic   :offset-assert 204)
   (~Tmask-to-clear       uint32  :offset-assert 208)
   (~Tmusic-volume-movie  float   :offset-assert 212)
   (~Tsfx-volume-movie    float   :offset-assert 216)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

;; sync-info-h
(deftype sync-info (structure)
  ((offset float   :offset-assert 0)
   (period uint32  :offset-assert 4)
   )
  :method-count-assert 18
  :size-assert         #x8
  :flag-assert         #x1200000008
  (:methods
    (dummy-9 (_type_ float) float 9)
    (dummy-10 (_type_) float 10)
    (dummy-11 (_type_) float 11)
    (dummy-12 (_type_ float) float 12)
    (dummy-13 (_type_) float 13)
    (dummy-14 (_type_ uint float float float) int 14) ;; 3 arg for parent 5 for child
    (dummy-15 (_type_) float 15) ;; wip
    (dummy-16 (_type_ float) float 16)
    (dummy-17 (_type_) float 17)
    )
  )

;; sync-info-h
(deftype sync-info-eased (sync-info)
  ((tlo    float   :offset-assert 8)
   (thi    float   :offset-assert 12)
   (ylo    float   :offset-assert 16)
   (m2     float   :offset-assert 20)
   (yend   float   :offset-assert 24)
   )
  :method-count-assert 18
  :size-assert         #x1c
  :flag-assert         #x120000001c
  (:methods
    ;; (dummy-9 () none 9)
    ;; (dummy-10 () none 10)
    ;; (dummy-11 () none 11)
    (dummy-12 (_type_ float) float 12)
    (dummy-13 (_type_) float 13)
    (dummy-14 (_type_ uint float float float) int 14)
    (dummy-15 (_type_) float 15) ;; wip
    ;; (dummy-16 () none 16)
    ;; (dummy-17 () none 17)
    )
  )

;; sync-info-h
(deftype sync-info-paused (sync-info)
  ((pause-after-out float   :offset-assert 8)
   (pause-after-in  float   :offset-assert 12)
   )
  :method-count-assert 18
  :size-assert         #x10
  :flag-assert         #x1200000010
  (:methods
    (dummy-9 (_type_ float) float 9)
    ;; (dummy-10 () none 10)
    (dummy-11 (_type_) float 11)
    (dummy-12 (_type_ float) float 12)
    (dummy-13 (_type_) float 13)
    (dummy-14 (_type_ uint float float float) int 14)
    (dummy-15 (_type_) float 15) ;; wip
    ;; (dummy-16 () none 16)
    ;; (dummy-17 () none 17)
    )
  )

;; sync-info-h
(deftype delayed-rand-float (structure)
  ((min-time   int32   :offset-assert 0)
   (max-time   int32   :offset-assert 4)
   (max-val    float   :offset-assert 8)
   (timer      int32   :offset-assert 12)
   (start-time uint64  :offset-assert 16)
   (value      float   :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (dummy-9 (_type_ int int float) float 9)
    (dummy-10 (_type_ ) float 10)
    )
  )

;; sync-info-h
(deftype oscillating-float (structure)
  ((value   float  :offset-assert 0)
   (target  float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (max-vel float  :offset-assert 12)
   (damping float  :offset-assert 16)
   (accel   float  :offset-assert 20)
   )
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (dummy-9 (_type_ float float float float) float 9)
    (dummy-10 (_type_ float) float 10)
    )
  )

;; sync-info-h
(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert 0)
   (max-value  float                     :offset-assert 24)
   (min-value  float                     :offset-assert 28)
   (elasticity float                     :offset-assert 32)
   (state      int32                     :offset-assert 36)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (dummy-9 (_type_ float float float float float float float) float 9)
    (dummy-10 (_type_ float) float 10)
    (dummy-11 (_type_) symbol 11) ;; bool
    (dummy-12 (_type_) symbol 12) ;; bool
    )
  )

;; sync-info-h
(deftype delayed-rand-vector (structure)
  ((min-time   int32          :offset-assert 0)
   (max-time   int32          :offset-assert 4)
   (xz-max     float          :offset-assert 8)
   (y-max      float          :offset-assert 12)
   (timer      int32          :offset-assert 16)
   (start-time uint64         :offset-assert 24)
   (value      vector :inline :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (dummy-9 (_type_ int int float float) vector 9)
    (dummy-10 (_type_) vector 10)
    (dummy-11 (_type_) vector 11)
    (dummy-12 (_type_) vector 12)
    )
  )

;; sync-info-h
(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert 0)
   (target  vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (max-vel float          :offset-assert 48)
   (damping float          :offset-assert 52)
   (accel   float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (dummy-9 (_type_ vector float float float) vector 9)
    (dummy-10 (_type_ vector) vector 10)
    )
  )

;; smush-control-h
(deftype smush-control (structure)
  ((start-time  uint64  :offset-assert 0)
   (period      float   :offset-assert 8)
   (duration    float   :offset-assert 12)
   (amp         float   :offset-assert 16)
   (damp-amp    float   :offset-assert 20)
   (damp-period float   :offset-assert 24)
   (ticks       float   :offset-assert 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (set-zero! (_type_) _type_ 9)
    (update! (_type_) float 10)
    (get-no-update (_type_) float 11)
    (activate! (_type_ float int int float float float) _type_ 12)
    (nonzero-amplitude? (_type_) symbol 13)
    (die-on-next-update! (_type_) _type_ 14)
    )
  )

  ;; trajectory-h
  (deftype trajectory (structure)
    ((initial-position vector :inline :offset-assert 0)
     (initial-velocity vector :inline :offset-assert 16)
     (time             float          :offset-assert 32)
     (gravity          float          :offset-assert 36) ;; meters
     )
    :method-count-assert 16
    :size-assert         #x28
    :flag-assert         #x1000000028
    (:methods
      (dummy-9 () none 9)
      (dummy-10 () none 10)
      (dummy-11 () none 11)
      (dummy-12 () none 12)
      (dummy-13 () none 13)
      (dummy-14 () none 14)
      (dummy-15 () none 15)
      )
    )


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; DEBUG-H             ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
(deftype pos-history (structure)
  ((points     uint32  :offset-assert 0)
   (num-points int32   :offset-assert 4)
   (h-first    int32   :offset-assert 8)
   (h-last     int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype debug-vertex (structure)
  ((trans  vector4w :inline :offset-assert 0)
   (normal vector3h :inline :offset-assert 16)
   (st     vector2h :inline :offset-assert 22)
   (color  uint32           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype debug-vertex-stats (basic)
  ((length    int32                    :offset-assert 4)
   (pos-count int32                    :offset-assert 8)
   (vertex    debug-vertex 600 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x4b10
  :flag-assert         #x900004b10
  ;; inspect method is overriden in debug.gc
  )

;; joint-mod-h
(deftype joint-mod (basic)
  ((mode            uint32             :offset-assert 4)
   (process         basic              :offset-assert 8)
   (joint           cspace             :offset-assert 12)
   (target          vector     :inline :offset-assert 16)
   (twist           vector     :inline :offset-assert 32)
   (twist-max       vector     :inline :offset-assert 48)
   (trans           vector     :inline :offset-assert 64)
   (quat            quaternion :inline :offset-assert 80)
   (scale           vector     :inline :offset-assert 96)
   (notice-time     uint64             :offset-assert 112)
   (flex-blend      float              :offset-assert 120)
   (blend           float              :offset-assert 124)
   (max-dist        float             :offset-assert 128) ;; meters
   (ignore-angle    float                :offset-assert 132) ;; deg
   (up              uint8              :offset-assert 136)
   (nose            uint8              :offset-assert 137)
   (ear             uint8              :offset-assert 138)
   (shutting-down?  basic              :offset-assert 140)
   (parented-scale? basic              :offset 128)
   )
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000000090
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; joint-mod-h
(deftype try-to-look-at-info (basic)
  ((who  uint64  :offset-assert 8)
   (horz float   :offset-assert 16)
   (vert float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; joint-mod-h
(deftype joint-mod-wheel (basic)
  ((last-position vector :inline :offset-assert 16)
   (angle         float          :offset-assert 32)
   (process       basic          :offset-assert 36)
   (wheel-radius  float          :offset-assert 40)
   (wheel-axis    int8           :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x2d
  :flag-assert         #x90000002d
  )

;; joint-mod-h
(deftype joint-mod-set-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (set-rotation    basic              :offset-assert 64)
   (set-scale       basic              :offset-assert 68)
   (set-translation basic              :offset-assert 72)
   (enable          basic              :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; joint-mod-h
(deftype joint-mod-set-world (basic)
  ((transform  transformq :inline :offset-assert 16)
   (node-index int32              :offset-assert 64)
   (enable     basic              :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; joint-mod-h
(deftype joint-mod-blend-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (node-index      int32              :offset-assert 112)
   (blend           float              :offset-assert 116)
   (enable          basic              :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

;; joint-mod-h
(deftype joint-mod-spinner (basic)
  ((spin-axis vector :inline :offset-assert 16)
   (angle     float          :offset-assert 32)
   (spin-rate float          :offset-assert 36)
   (enable    basic          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; collide-mesh-h
(deftype collide-tri-result (structure)
  ((vertex    vector 3 :inline :offset-assert 0)
   (intersect vector  :inline  :offset-assert 48)
   (normal    vector  :inline  :offset-assert 64)
   (pat       uint32           :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

; ;; collide-mesh-h
(deftype collide-mesh-tri (structure)
  ((vertex-index uint8   3 :offset-assert 0)
   (unused       uint8     :offset-assert 3)
   (pat          uint32    :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-mesh-h
(deftype collide-mesh (basic)
  ((joint-id    int32     :offset-assert 4)
   (num-tris    uint32    :offset-assert 8)
   (num-verts   uint32    :offset-assert 12)
   (vertex-data uint32    :offset-assert 16)
   ;; todo - this could be wrong
   (tris        collide-mesh-tri 1 :inline :offset 32)
   )
  :method-count-assert 16
  :size-assert         #x28
  :flag-assert         #x1000000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; collide-mesh-h
(deftype collide-mesh-cache (basic)
  ((used-size uint32        :offset-assert 4)
   (max-size  uint32        :offset-assert 8)
   (id        uint64        :offset-assert 16)
   (pad uint8 8) ;; added
   (data      uint8 40960 :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #xa020
  :flag-assert         #xc0000a020
  (:methods
    (dummy-9 () none 9)
    (is-id? (_type_ int) symbol 10)
    (next-id! (_type_) uint 11)
    )
  )

;; collide-mesh-h
(deftype collide-mesh-cache-tri (structure)
  ((vertex vector   3     :inline :offset-assert 0)
   (normal vector         :inline :offset-assert 48)
   (bbox4w bounding-box4w :inline :offset-assert 64)
   (pat    uint32                 :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; collide-shape-h
(deftype collide-sticky-rider (structure)
  ((rider-handle    handle         :offset-assert 0)
   (sticky-prim     basic          :offset-assert 8)
   (prim-ry         float          :offset-assert 12)
   (rider-local-pos vector :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (set-rider! (_type_ handle) symbol 9)
    )
  )

;; collide-shape-h
(deftype collide-sticky-rider-group (basic)
  ((num-riders       int32     :offset-assert 4)
   (allocated-riders int32     :offset-assert 8)
   (rider            collide-sticky-rider 1 :inline :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (new (symbol type int) _type_ 0)
    (dummy-9 () none 9)
    (reset! (_type_) int 10)
    )
  )

;; collide-shape-h
(deftype pull-rider-info (structure)
  ((rider          collide-sticky-rider         :offset-assert 0)
   (rider-cshape   basic                        :offset-assert 4)
   (rider-delta-ry float                        :offset-assert 8)
   (rider-dest     vector               :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; collide-shape-h
(deftype collide-shape-intersect (basic)
  ((move-vec       vector             :inline :offset-assert 16)
   (best-u         float                      :offset-assert 32)
   (best-tri       collide-tri-result :inline :offset-assert 48)
   (best-from-prim basic                      :offset-assert 132)
   (best-to-prim   basic                      :offset-assert 136)
   )
  :method-count-assert 10
  :size-assert         #x8c
  :flag-assert         #xa0000008c
  (:methods
    (dummy-9 () none 9)
    )
  )

;; collide-shape-h
(deftype collide-overlap-result (structure)
  ((best-dist      float                      :offset-assert 0)
   (best-from-prim basic                      :offset-assert 4)
   (best-to-prim   basic                      :offset-assert 8)
   (best-from-tri  collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x64
  :flag-assert         #xa00000064
  (:methods
    (reset! (_type_) none 9)
    )
  )

;; collide-shape-h
(deftype overlaps-others-params (structure)
  ((options uint32  :offset-assert 0)
   (tlist   basic   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-shape-h
(deftype collide-prim-core (structure)
  ((world-sphere vector  :inline :offset-assert 0)
   (collide-as   uint64          :offset-assert 16)
   (action       uint32          :offset-assert 24)
   (offense      int8            :offset-assert 28)
   (prim-type    int8            :offset-assert 29)
   (extra        uint8 2       :offset-assert 30)
   (quad         uint128 2       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; collide-shape-h
(deftype collide-shape-prim (basic)
  ((cshape          basic                     :offset-assert 4)
   (prim-id         uint32                    :offset-assert 8)
   (transform-index int8                      :offset-assert 12)
   (prim-core       collide-prim-core :inline :offset-assert 16)
   (local-sphere    vector            :inline :offset-assert 48)
   (collide-with    uint64                    :offset-assert 64)
   (world-sphere    vector            :inline :offset 16)
   (collide-as      uint64                    :offset 32)
   (action          uint32                    :offset 40)
   (offense         int8                      :offset 44)
   (prim-type       int8                      :offset 45)
   (radius          float                     :offset 60) ;; meters
   )
  :method-count-assert 28
  :size-assert         #x48
  :flag-assert         #x1c00000048
  (:methods
    (new (symbol type basic uint int) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    )
  )

;; collide-shape-h
(deftype collide-shape-prim-sphere (collide-shape-prim)
  ((pat             uint32                    :offset-assert 72)
   )
  :method-count-assert 28
  :size-assert         #x4c
  :flag-assert         #x1c0000004c
  (:methods
    (new (symbol type basic uint) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    )
  )

;; collide-shape-h
(deftype collide-shape-prim-mesh (collide-shape-prim)
  ((mesh            basic                     :offset-assert 72)
   (mesh-id         int32                     :offset-assert 76)
   (mesh-cache-id   uint64                    :offset-assert 80)
   (mesh-cache-tris uint32                    :offset-assert 88)
   )
  :method-count-assert 29
  :size-assert         #x5c
  :flag-assert         #x1d0000005c
  (:methods
    (new (symbol type basic uint uint) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

;; collide-shape-h
(deftype collide-shape-prim-group (collide-shape-prim)
  ((num-prims       int32                     :offset-assert 72)
   (allocated-prims int32                     :offset-assert 76)
   (prim            uint32           1       :offset-assert 80)
   )
  :method-count-assert 30
  :size-assert         #x54
  :flag-assert         #x1e00000054
  (:methods
    (new (symbol type basic uint int) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

;; collide-shape-h
(deftype collide-shape (trsqv)
  ((process               basic              :offset-assert 140)
   (max-iteration-count   uint8              :offset-assert 144)
   (nav-flags             uint8              :offset-assert 145)
   (pad-byte              uint8      2       :offset-assert 146)
   (pat-ignore-mask       uint32             :offset-assert 148)
   (event-self            basic              :offset-assert 152)
   (event-other           basic              :offset-assert 156)
   (root-prim             basic              :offset-assert 160)
   (riders                basic              :offset-assert 164)
   (backup-collide-as     uint64             :offset-assert 168)
   (backup-collide-with   uint64             :offset-assert 176)
   )
  :method-count-assert 56
  :size-assert         #xb8
  :flag-assert         #x38000000b8
  (:methods
    (new (symbol type process int) _type_)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    )
  )

;; collide-shape-h
(deftype collide-shape-moving (collide-shape)
  ((rider-time            uint64             :offset-assert 184)
   (rider-last-move       vector     :inline :offset-assert 192)
   (trans-old             vector    3 :inline      :offset-assert 208)
   (poly-pat              uint32             :offset-assert 256)
   (cur-pat               uint32             :offset-assert 260)
   (ground-pat            uint32             :offset-assert 264)
   (status                uint64             :offset-assert 272)
   (old-status            uint64             :offset-assert 280)
   (prev-status           uint64             :offset-assert 288)
   (reaction-flag         uint32             :offset-assert 296)
   (reaction              basic              :offset-assert 300)
   (no-reaction           basic              :offset-assert 304)
   (local-normal          vector     :inline :offset-assert 320)
   (surface-normal        vector     :inline :offset-assert 336)
   (poly-normal           vector     :inline :offset-assert 352)
   (ground-poly-normal    vector     :inline :offset-assert 368)
   (ground-touch-point    vector     :inline :offset-assert 384)
   (shadow-pos            vector     :inline :offset-assert 400)
   (ground-impact-vel     float              :offset-assert 416) ;; meters
   (surface-angle         float              :offset-assert 420)
   (poly-angle            float              :offset-assert 424)
   (touch-angle           float              :offset-assert 428)
   (coverage              float              :offset-assert 432)
   (dynam                 basic              :offset-assert 436)
   (surf                  basic              :offset-assert 440)
   )
  :method-count-assert 65
  :size-assert         #x1bc
  :flag-assert         #x41000001bc
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    (dummy-56 () none 56)
    (dummy-57 () none 57)
    (dummy-58 () none 58)
    (dummy-59 () none 59)
    (dummy-60 () none 60)
    (dummy-61 () none 61)
    (dummy-62 () none 62)
    (dummy-63 () none 63)
    (dummy-64 () none 64)
    )
  )

;; collide-target-h
(deftype collide-history (structure)
  ((intersect      vector :inline :offset-assert 0)
   (trans          vector :inline :offset-assert 16)
   (transv         vector :inline :offset-assert 32)
   (transv-out     vector :inline :offset-assert 48)
   (local-normal   vector :inline :offset-assert 64)
   (surface-normal vector :inline :offset-assert 80)
   (time           uint64         :offset-assert 96)
   (status         uint64         :offset-assert 104)
   (pat            uint32         :offset-assert 112)
   (reaction-flag  uint32         :offset-assert 116)
   )
  :method-count-assert 10
  :size-assert         #x78
  :flag-assert         #xa00000078
  (:methods
    (dummy-9 () none 9)
    )
  )

;; collide-touch-h
(deftype touching-prim (structure)
  ((cprim    basic                      :offset-assert 0)
   (has-tri? basic                      :offset-assert 4)
   (tri      collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )

;; collide-touch-h
(deftype touching-prims-entry (structure)
  ((next       touching-prims-entry         :offset-assert 0)
   (prev       touching-prims-entry         :offset-assert 4)
   (allocated? basic                        :offset-assert 8)
   (u          float                        :offset-assert 12)
   (prim1      touching-prim        :inline :offset-assert 16)
   (prim2      touching-prim        :inline :offset-assert 128)
   )
  :method-count-assert 13
  :size-assert         #xe4
  :flag-assert         #xd000000e4
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; collide-touch-h
(deftype touching-prims-entry-pool (structure)
  ((head  touching-prims-entry    :offset-assert 0)
   (nodes touching-prims-entry 64 :inline :offset-assert 16)
   )
  :method-count-assert 13
  :size-assert         #x3c10
  :flag-assert         #xd00003c10
  (:methods
    (new (symbol type) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (init-list! (_type_) none 11)
    (dummy-12 () none 12)
    )
  )

;; collide-touch-h
(deftype touching-shapes-entry (structure)
  ((cshape1   basic                 :offset-assert 0)
   (cshape2   basic                 :offset-assert 4)
   (resolve-u int8                  :offset-assert 8)
   (head      touching-prims-entry  :offset-assert 12)
   )
  :allow-misaligned
  :method-count-assert 18
  :size-assert         #x10
  :flag-assert         #x1200000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (get-head (_type_) touching-prims-entry 16)
    (unknown1 (_type_ (pointer uint32)) uint 17)
    )
  )

;; collide-touch-h
(deftype touching-list (structure)
  ((num-touching-shapes int32      :offset-assert 0)
   (resolve-u           int8       :offset-assert 4)
   (touching-shapes     touching-shapes-entry 32 :inline :offset-assert 8)
   )
  :method-count-assert 15
  :size-assert         #x208
  :flag-assert         #xf00000208
  (:methods
    (new (symbol type) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    )
  )

;; collide-edge-grab-h
(deftype edge-grab-info (structure)
  ((world-vertex             vector 6 :inline      :offset-assert 0)
   (local-vertex             vector 6 :inline      :offset-assert 96)
   (actor-cshape-prim-offset int32           :offset-assert 192)
   (actor-handle             uint64          :offset-assert 200)
   (hanging-matrix           matrix  :inline :offset-assert 208)
   (edge-vertex              vector 2 :inline       :offset 0)
   (center-hold              vector  :inline :offset 32)
   (tri-vertex               vector 3 :inline     :offset 48)
   (left-hand-hold           vector  :inline :offset-assert 272)
   (right-hand-hold          vector  :inline :offset-assert 288)
   (center-hold-old          vector  :inline :offset-assert 304)
   (edge-tri-pat             uint32          :offset-assert 320)
   )
  :method-count-assert 11
  :size-assert         #x144
  :flag-assert         #xb00000144
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; collide-edge-grab-h
(declare-type collide-cache-tri structure)
(deftype collide-edge-tri (structure)
  ((ctri   collide-cache-tri         :offset-assert 0)
   (normal vector            :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; collide-edge-grab-h
(deftype collide-edge-edge (structure)
  ((ignore        basic                    :offset-assert 0)
   (etri          collide-edge-tri         :offset-assert 4)
   (vertex-ptr    vector         2       :offset-assert 8)
   (outward       vector           :inline :offset-assert 16)
   (edge-vec-norm vector           :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-edge-grab-h
(deftype collide-edge-hold-item (structure)
  ((next       collide-edge-hold-item         :offset-assert 0)
   (rating     float                          :offset-assert 4)
   (split      int8                           :offset-assert 8)
   (edge       collide-edge-edge              :offset-assert 12)
   (center-pt  vector                 :inline :offset-assert 16)
   (outward-pt vector                 :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-edge-grab-h
(deftype collide-edge-hold-list (structure)
  ((num-allocs   uint32                    :offset-assert 0)
   (num-attempts uint32                    :offset-assert 4)
   (head         collide-edge-hold-item    :offset-assert 8)
   (items        collide-edge-hold-item  32 :inline :offset-assert 16)
   (attempts     qword   32 :inline :offset-assert 1552)
   )
  :method-count-assert 11
  :size-assert         #x810
  :flag-assert         #xb00000810
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; collide-edge-grab-h
(deftype collide-edge-work (structure)
  ((ccache                       basic                          :offset-assert 0)
   (cshape                       basic                          :offset-assert 4)
   (num-verts                    uint32                         :offset-assert 8)
   (num-edges                    uint32                         :offset-assert 12)
   (num-tris                     uint32                         :offset-assert 16)
   (cache-fill-box               bounding-box           :inline :offset-assert 32)
   (within-reach-box             bounding-box           :inline :offset-assert 64)
   (within-reach-box4w           bounding-box4w         :inline :offset-assert 96)
   (search-pt                    vector                 :inline :offset-assert 128)
   (search-dir-vec               vector                 :inline :offset-assert 144)
   (max-dist-sqrd-to-outward-pt  float                          :offset-assert 160)
   (max-dir-cosa-delta           float                          :offset-assert 164)
   (split-dists                  float                2       :offset-assert 168)
   (outward-offset               vector                 :inline :offset-assert 176)
   (local-cache-fill-box         bounding-box           :inline :offset-assert 192)
   (local-within-reach-box       bounding-box           :inline :offset-assert 224)
   (local-player-spheres         sphere   12   :inline   :offset-assert 256)
   (world-player-spheres         sphere                12  :inline    :offset-assert 448)
   (local-player-hanging-spheres sphere                6   :inline    :offset 256)
   (world-player-hanging-spheres sphere                6    :inline   :offset 448)
   (local-player-leap-up-spheres sphere                6    :inline   :offset 352)
   (world-player-leap-up-spheres sphere                6    :inline   :offset 544)
   (verts                        vector      64 :inline     :offset-assert 640)
   (edges                        collide-edge-edge     96  :inline    :offset-assert 1664)
   (tris                         collide-edge-tri    48  :inline    :offset-assert 6272)
   (hold-list                    collide-edge-hold-list :inline :offset-assert 7808)
   )
  :method-count-assert 20
  :size-assert         #x2690
  :flag-assert         #x1400002690
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    )
  )

; ;; effect-control-h
; (deftype effect-control (basic)
;   ((process          basic   :offset-assert 4)
;    (flags            uint32  :offset-assert 8)
;    (last-frame-group basic   :offset-assert 12)
;    (last-frame-num   float   :offset-assert 16)
;    (channel-offset   int32   :offset-assert 20)
;    (res              basic   :offset-assert 24)
;    (name             uint32  :offset-assert 28)
;    (param            uint32  :offset-assert 32)
;    )
;   :method-count-assert 15
;   :size-assert         #x24
;   :flag-assert         #xf00000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; collide-frag-h
; (deftype collide-frag-vertex (vector)
;   ((data UNKNOWN 4 :offset-assert 0)
;    (x    float     :offset-assert 0)
;    (y    float     :offset-assert 4)
;    (z    float     :offset-assert 8)
;    (w    float     :offset-assert 12)
;    (quad uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; collide-frag-h
; (deftype collide-frag-mesh (basic)
;   ((packed-data     uint32         :offset-assert 4)
;    (pat-array       uint32         :offset-assert 8)
;    (strip-data-len  uint16         :offset-assert 12)
;    (poly-count      uint16         :offset-assert 14)
;    (base-trans      vector :inline :offset-assert 16)
;    (vertex-count    uint8          :offset-assert 28)
;    (vertex-data-qwc uint8          :offset-assert 29)
;    (total-qwc       uint8          :offset-assert 30)
;    (unused          uint8          :offset-assert 31)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; collide-frag-h
; (deftype collide-fragment (drawable)
;   ((id      int16          :offset-assert 4)
;    (bsphere vector :inline :offset-assert 16)
;    (mesh    basic          :offset-assert 8)
;    )
;   :method-count-assert 18
;   :size-assert         #x20
;   :flag-assert         #x1200000020
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; collide-frag-h
; (deftype drawable-inline-array-collide-fragment (drawable-inline-array)
;   ((id      int16           :offset-assert 4)
;    (bsphere vector  :inline :offset-assert 16)
;    (length  int16           :offset-assert 6)
;    (data    UNKNOWN 1       :offset-assert 36)
;    )
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

;; projectiles-h
(deftype projectile (process-drawable)
  ((~Tbase-trans      vector  :inline :offset-assert 176)
   (~Ttarget          vector  :inline :offset-assert 192)
   (~Ttarget-base     vector  :inline :offset-assert 208)
   (~Tparent-base     vector  :inline :offset-assert 224)
   (~Tparent-quat     vector  :inline :offset-assert 240)
   (~Tbase-vector     vector  :inline :offset-assert 256)
   (~Ttimeout         uint64          :offset-assert 272)
   (~Toptions         uint64          :offset-assert 280)
   (~Tlast-target     uint64          :offset-assert 288)
   (~Tnotify-handle   uint64          :offset-assert 296)
   (~Tmax-speed       float           :offset-assert 304)
   (~Tmax-turn        float           :offset-assert 308)
   (~Told-dist        float 16      :offset-assert 312)
   (~Told-dist-count  int32           :offset-assert 376)
   (~Thits            int32           :offset-assert 380)
   (~Tmax-hits        int32           :offset-assert 384)
   (~Ttween           float           :offset-assert 388)
   (~Tattack-mode     basic           :offset-assert 392)
   (~Tupdate-velocity basic           :offset-assert 396)
   (~Tcounter         int32           :offset-assert 400)
   (~Ttarget-count    int32           :offset-assert 404)
   (~Tsound-id        uint32          :offset-assert 408)
   )
  :heap-base #x130
  :method-count-assert 29
  :size-assert         #x19c
  :flag-assert         #x1d0130019c
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

;; projectiles-h
(deftype projectile-yellow (projectile)
  ((~Tmode  int32  :offset-assert 412)
   (~Tangle float  :offset-assert 416)
   )
  :heap-base #x140
  :method-count-assert 29
  :size-assert         #x1a4
  :flag-assert         #x1d014001a4
  ;; inherited inspect of projectile
  )

; ;; projectiles-h
; (deftype projectile-blue (projectile)
;   ((~Tmode      int32  :offset-assert 412)
;    (~Tjoint-num int32  :offset-assert 416)
;    )
;   :method-count-assert 29
;   :size-assert         #x1a4
;   :flag-assert         #x1d014001a4
;   ;; inherited inspect of projectile
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

;; target-h
(deftype target (process-drawable)
  ((control             basic               :offset 112)
   (skel2               basic               :offset-assert 176)
   (racer               basic               :offset-assert 180)
   (game                basic               :offset-assert 184)
   (neck                basic               :offset-assert 188)
   (state-hook-time     uint64              :offset-assert 192)
   (state-hook          basic               :offset-assert 200)
   (cam-user-mode       basic               :offset-assert 204)
   (sidekick            uint32              :offset-assert 208)
   (manipy              uint32              :offset-assert 212)
   (attack-info         attack-info :inline :offset-assert 224)
   (attack-info-rec     attack-info :inline :offset-assert 336)
   (anim-seed           uint64              :offset-assert 440)
   (alt-cam-pos         vector      :inline :offset-assert 448)
   (snowball            basic               :offset-assert 464)
   (tube                basic               :offset-assert 468)
   (flut                basic               :offset-assert 472)
   (current-level       basic               :offset-assert 476)
   (saved-pos           transformq  :inline :offset-assert 480)
   (saved-owner         uint64              :offset-assert 528)
   (alt-neck-pos        vector      :inline :offset-assert 544)
   (fp-hud              uint64              :offset-assert 560)
   (no-load-wait        uint64              :offset-assert 568)
   (no-look-around-wait uint64              :offset-assert 576)
   )
  :heap-base #x1e0
  :method-count-assert 21
  :size-assert         #x248
  :flag-assert         #x1501e00248
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    )
  )

(define-extern *target* target)

;; target-h
(deftype sidekick (process-drawable)
  ((~Tcontrol          basic   :offset 112)
   (~Tstate-time       uint64  :offset 168)
   (~Tstate-flags      uint32  :offset 164)
   (~Tanim-seed        uint64  :offset 192)
   (~Tshadow-in-movie? basic   :offset-assert 200)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xcc
  :flag-assert         #x14006000cc
  ;; inherited inspect of process-drawable
  )

;; depth-cue-h
(deftype depth-cue-data (structure)
  ((data      vector :inline :offset-assert 0)
   (sharpness float          :offset 0)
   (alpha     float          :offset 4)
   (distance  float          :offset 8)
   (w         float          :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; depth-cue-h
(deftype depth-cue-work (structure)
  ((texture-strip-tmpl dma-gif-packet :inline :offset-assert 0)
   (temp-strip-tmpl    dma-gif-packet :inline :offset-assert 32)
   (stencil-tmpl       dma-gif-packet :inline :offset-assert 64)
   (clear-color        vector4w       :inline :offset-assert 96)
   (set-color          vector4w       :inline :offset-assert 112)
   (draw-color         vector4w       :inline :offset-assert 128)
   (depth              depth-cue-data         :offset-assert 144)
   (front              depth-cue-data         :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

;; stats-h
(deftype tr-stat (structure)
  ((groups    uint16  :offset-assert 0)
   (fragments uint16  :offset-assert 2)
   (tris      uint32  :offset-assert 4)
   (dverts    uint32  :offset-assert 8)
   (instances uint16  :offset-assert 12)
   (pad       uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; stats-h
(deftype merc-global-stats (structure)
  ((merc      tr-stat :inline :offset-assert 0)
   (mercneric tr-stat :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; stats-h
(deftype perf-stat (structure)
  ((frame-number   uint32  :offset-assert 0)
   (count          uint32  :offset-assert 4)
   (cycles         uint32  :offset-assert 8)
   (instructions   uint32  :offset-assert 12)
   (icache         uint32  :offset-assert 16)
   (dcache         uint32  :offset-assert 20)
   (select         uint32  :offset-assert 24)
   (ctrl           uint32  :offset-assert 28)
   (accum0         uint32  :offset-assert 32)
   (accum1         uint32  :offset-assert 36)
   (to-vu0-waits   uint32  :offset-assert 40)
   (to-spr-waits   uint32  :offset-assert 44)
   (from-spr-waits uint32  :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x34
  :flag-assert         #xe00000034
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

;; stats-h
(deftype perf-stat-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; bsp-h
(deftype bsp-node (structure)
  ((front       int32          :offset-assert 0)
   (back        int32          :offset-assert 4)
   (front-flags uint32         :offset-assert 8)
   (back-flags  uint32         :offset-assert 12)
   (plane       vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; bsp-h
(deftype game-level (basic)
  ((master-bsp basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; bsp-h
(deftype view-frustum (structure)
  ((hither-top-left     vector :inline :offset-assert 0)
   (hither-top-right    vector :inline :offset-assert 16)
   (hither-bottom-left  vector :inline :offset-assert 32)
   (hither-bottom-right vector :inline :offset-assert 48)
   (yon-top-left        vector :inline :offset-assert 64)
   (yon-top-right       vector :inline :offset-assert 80)
   (yon-bottom-left     vector :inline :offset-assert 96)
   (yon-bottom-right    vector :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; bsp-h
; (deftype bsp-header (drawable)
;   ((all-visible-list pointer :offset-assert 32)
;    (visible-list-length int32 :offset-assert 36)
;    (drawable-trees basic :offset-assert 40)
;    (pat uint32 :offset-assert 44)
;    (pat-length int32 :offset-asert 48)
;    )
;   :method-count-assert 20
;   :size-assert         #x190
;   :flag-assert         #x1400000190
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 (_type_) int 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

;; bsp-h
(deftype cl-stat (structure)
  ((fragments uint32  :offset-assert 0)
   (tris      uint32  :offset-assert 4)
   (output    uint32  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; bsp-h
; (deftype collide-stats (structure)
;   ((other             cl-stat   :inline :offset-assert 0)
;    (total             cl-stat   :inline :offset-assert 12)
;    (nodes             uint32            :offset-assert 24)
;    (calls             uint32            :offset-assert 28)
;    (total-target      stopwatch :inline :offset-assert 36)
;    (target-cache-fill stopwatch :inline :offset-assert 68)
;    (target-ray-poly   stopwatch :inline :offset-assert 100)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

;; collide-cache-h
(deftype collide-using-spheres-params (structure)
  ((spheres      uint32  :offset-assert 0)
   (num-spheres  uint32  :offset-assert 4)
   (collide-with uint64  :offset-assert 8)
   (proc         basic   :offset-assert 16)
   (ignore-pat   uint32  :offset-assert 20)
   (solid-only   basic   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; collide-cache-h
(deftype collide-puss-sphere (structure)
  ((bsphere sphere         :inline :offset-assert 0)
   (bbox4w  bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-cache-h
(deftype collide-puss-work (structure)
  ((closest-pt     vector         :inline :offset-assert 0)
   (tri-normal     vector         :inline :offset-assert 16)
   (tri-bbox4w     bounding-box4w :inline :offset-assert 32)
   (spheres-bbox4w bounding-box4w :inline :offset-assert 64)
   (spheres        collide-puss-sphere 64 :inline    :offset-assert 96)
   )
  :method-count-assert 11
  :size-assert         #xc60
  :flag-assert         #xb00000c60
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; collide-cache-h
(deftype collide-puyp-work (structure)
  ((best-u     float                      :offset-assert 0)
   (ignore-pat uint32                     :offset-assert 4)
   (tri-out    collide-tri-result         :offset-assert 8)
   (start-pos  vector             :inline :offset-assert 16)
   (move-dist  vector             :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-cache-h
(deftype collide-cache-tri (structure)
  ((vertex     vector 3 :inline  :offset-assert 0)
   ;(extra-quad UNKNOWN 16 :offset-assert 48)
   (pat        uint32     :offset-assert 48)
   (prim-index uint16     :offset-assert 52)
   (user16     uint16     :offset-assert 54)
   (user32     uint32 2  :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; collide-cache-h
(deftype collide-cache-prim (structure)
  ((prim-core    collide-prim-core :inline :offset-assert 0)
   ;;(extra-quad   UNKNOWN           16      :offset-assert 32)
   (ccache       basic                     :offset-assert 32)
   (prim         basic                     :offset-assert 36)
   (first-tri    uint16                    :offset-assert 40)
   (num-tris     uint16                    :offset-assert 42)
   (unused       uint8           4       :offset-assert 44)
   (world-sphere vector            :inline :offset 0)
   (collide-as   uint64                    :offset 16)
   (action       uint32                    :offset 24)
   (offense      int8                      :offset 28)
   (prim-type    int8                      :offset 29)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; collide-cache-h
(deftype collide-cache (basic)
  ((num-tris      int32                  :offset-assert 4)
   (num-prims     int32                  :offset-assert 8)
   (ignore-mask   uint32                 :offset-assert 12)
   (proc          basic                  :offset-assert 16)
   (collide-box   bounding-box   :inline :offset-assert 32)
   (collide-box4w bounding-box4w :inline :offset-assert 64)
   (collide-with  uint64                 :offset-assert 96)
   (prims         collide-cache-prim    100 :inline    :offset-assert 112)
   (tris          collide-cache-tri  461 :inline    :offset-assert 4912)
   )
  :method-count-assert 33
  :size-assert         #x8670
  :flag-assert         #x2100008670
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    )
  )

;; collide-cache-h
(deftype collide-list-item (structure)
  ((mesh basic  :offset-assert 0)
   (inst basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-cache-h
(deftype collide-list (structure)
  ((num-items int32       :offset-assert 0)
   (items     collide-list-item 256 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x1010
  :flag-assert         #x900001010
  )

;; collide-cache-h
(deftype collide-work (structure)
  ((collide-sphere-neg-r sphere         :inline :offset-assert 0)
   (collide-box4w        bounding-box4w :inline :offset-assert 16)
   (inv-mat              matrix         :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; shrubbery-h
(deftype billboard (drawable)
  ((flat    adgif-shader :inline :offset-assert 32)
   )
  :method-count-assert 18
  :size-assert         #x70
  :flag-assert         #x1200000070
  (:methods
    (dummy-9 () none 9)
    (dummy-10 (_type_) int 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

; ;; shrubbery-h
; (deftype shrub-view-data (structure)
;   ((data           UNKNOWN 3       :offset-assert 0)
;    (texture-giftag qword   :inline :offset-assert 0)
;    (consts         vector  :inline :offset-assert 16)
;    (fog-clamp      vector  :inline :offset-assert 32)
;    (tex-start-ptr  int32           :offset-assert 16)
;    (gifbufsum      float           :offset-assert 16)
;    (mtx-buf-ptr    int32           :offset-assert 20)
;    (exp23          float           :offset-assert 20)
;    (fog-0          float           :offset-assert 24)
;    (fog-1          float           :offset-assert 28)
;    (fog-min        float           :offset-assert 32)
;    (fog-max        float           :offset-assert 36)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; shrubbery-h
(deftype shrubbery (drawable)
  ((textures uint32         :offset 4)
   (header   qword          :offset 8)
   (obj-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   (obj      uint32         :offset 16)
   (vtx      uint32         :offset 20)
   (col      uint32         :offset 24)
   (stq      uint32         :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 (_type_) int 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype instance-shrubbery (instance)
  ((flat-normal  vector   :inline :offset-assert 64)
   (flat-hwidth  float            :offset 76)
   (color        uint32           :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x50
  :flag-assert         #x1200000050
  (:methods
    (dummy-9 () none 9)
    (dummy-10 (_type_) int 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype generic-shrub-fragment (drawable)
  ((textures uint32         :offset 4)
   (vtx-cnt  uint32         :offset 8)
   (cnt-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   (cnt      uint32         :offset 16)
   (vtx      uint32         :offset 20)
   (col      uint32         :offset 24)
   (stq      uint32         :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 (_type_) int 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype shrubbery-matrix (structure)
  ((mat   matrix :inline :offset-assert 0)
   (color qword  :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; shrubbery-h
; (deftype shrub-near-packet (structure)
;   ((matrix-tmpl dma-packet :inline :offset-assert 0)
;    (header-tmpl dma-packet :inline :offset-assert 16)
;    (stq-tmpl    dma-packet :inline :offset-assert 32)
;    (color-tmpl  dma-packet :inline :offset-assert 48)
;    (vertex-tmpl dma-packet :inline :offset-assert 64)
;    (mscal-tmpl  dma-packet :inline :offset-assert 80)
;    (init-tmpl   dma-packet :inline :offset-assert 96)
;    (init-data   UNKNOWN    8       :offset-assert 112)
;    )
;   :method-count-assert 9
;   :size-assert         #x90
;   :flag-assert         #x900000090
;   )

; ;; shrubbery-h
; (deftype instance-shrub-work (structure)
;   ((dummy                     UNKNOWN        3       :offset-assert 0)
;    (chaina                    UNKNOWN        8       :offset-assert 48)
;    (chainb                    UNKNOWN        8       :offset-assert 176)
;    (colors                    UNKNOWN        1024    :offset-assert 304)
;    (matrix-tmpl               UNKNOWN        20      :offset-assert 4400)
;    (count-tmpl                UNKNOWN        20      :offset-assert 4720)
;    (mscalf-tmpl               dma-packet     :inline :offset-assert 5040)
;    (mscalf-ret-tmpl           dma-packet     :inline :offset-assert 5056)
;    (adgif-tmpl                dma-gif-packet :inline :offset-assert 5072)
;    (billboard-tmpl            dma-gif-packet :inline :offset-assert 5104)
;    (billboard-const           vector         :inline :offset-assert 5136)
;    (shrub-near-packets        UNKNOWN        6       :offset-assert 5152)
;    (dma-ref                   dma-packet     :inline :offset-assert 6016)
;    (dma-end                   dma-packet     :inline :offset-assert 6032)
;    (wind-const                vector         :inline :offset-assert 6048)
;    (constants                 vector         :inline :offset-assert 6064)
;    (color-constant            vector4w       :inline :offset-assert 6080)
;    (hmge-d                    vector         :inline :offset-assert 6096)
;    (hvdf-offset               vector         :inline :offset-assert 6112)
;    (wind-force                vector         :inline :offset-assert 6128)
;    (color                     vector         :inline :offset-assert 6144)
;    (bb-color                  vector         :inline :offset-assert 6160)
;    (min-dist                  vector         :inline :offset-assert 6176)
;    (temp-vec                  vector         :inline :offset-assert 6192)
;    (guard-plane               UNKNOWN        4       :offset-assert 6208)
;    (plane                     UNKNOWN        4       :offset-assert 6272)
;    (last                      UNKNOWN        4       :offset-assert 6336)
;    (next                      UNKNOWN        4       :offset-assert 6352)
;    (count                     UNKNOWN        4       :offset-assert 6368)
;    (mod-count                 UNKNOWN        4       :offset-assert 6376)
;    (wind-vectors              uint32                 :offset-assert 6384)
;    (instance-ptr              uint32                 :offset-assert 6388)
;    (chain-ptr                 uint32                 :offset-assert 6392)
;    (chain-ptr-next            uint32                 :offset-assert 6396)
;    (stack-ptr                 uint32                 :offset-assert 6400)
;    (bucket-ptr                uint32                 :offset-assert 6404)
;    (src-ptr                   uint32                 :offset-assert 6408)
;    (to-spr                    uint32                 :offset-assert 6412)
;    (from-spr                  uint32                 :offset-assert 6416)
;    (shrub-count               uint32                 :offset-assert 6420)
;    (stack-ptr                 uint32                 :offset-assert 6400)
;    (node                      UNKNOWN        6       :offset-assert 6428)
;    (length                    UNKNOWN        6       :offset-assert 6452)
;    (prototypes                uint32                 :offset-assert 6476)
;    (bucket-ptr                uint32                 :offset-assert 6404)
;    (start-bank                UNKNOWN        20      :offset-assert 6484)
;    (buffer-index              uint32                 :offset-assert 6504)
;    (current-spr               uint32                 :offset-assert 6508)
;    (current-mem               uint32                 :offset-assert 6512)
;    (current-shrub-near-packet uint32                 :offset-assert 6516)
;    (to-spr                    uint32                 :offset-assert 6412)
;    (dma-buffer                basic                  :offset-assert 6524)
;    (near-last                 uint32                 :offset-assert 6528)
;    (near-next                 uint32                 :offset-assert 6532)
;    (near-count                uint32                 :offset-assert 6536)
;    (last-shrubs               uint32                 :offset-assert 6540)
;    (chains                    uint32                 :offset-assert 6544)
;    (flags                     uint32                 :offset-assert 6548)
;    (paused                    basic                  :offset-assert 6552)
;    (node-count                uint32                 :offset-assert 6556)
;    (inst-count                uint32                 :offset-assert 6560)
;    (wait-from-spr             uint32                 :offset-assert 6564)
;    (wait-to-spr               uint32                 :offset-assert 6568)
;    )
;   :method-count-assert 9
;   :size-assert         #x19ac
;   :flag-assert         #x9000019ac
;   )

; ;; shrubbery-h
; (deftype instance-shrub-dma (structure)
;   ((instancea UNKNOWN 325 :offset-assert 0)
;    (instanceb UNKNOWN 325 :offset-assert 5200)
;    (outa      UNKNOWN 128 :offset-assert 10400)
;    (outb      UNKNOWN 128 :offset-assert 12448)
;    )
;   :method-count-assert 9
;   :size-assert         #x38a0
;   :flag-assert         #x9000038a0
;   )

; ;; tie-h
; (deftype tie-fragment (drawable)
;   ((id            int16          :offset-assert 4)
;    (bsphere       vector :inline :offset-assert 16)
;    (gif-ref       uint32         :offset-assert 4)
;    (point-ref     uint32         :offset-assert 8)
;    (color-index   uint16         :offset-assert 12)
;    (base-colors   uint8          :offset-assert 14)
;    (tex-count     uint16         :offset-assert 32)
;    (gif-count     uint16         :offset-assert 34)
;    (vertex-count  uint16         :offset-assert 36)
;    (color-count   uint16         :offset-assert 38)
;    (num-tris      uint16         :offset-assert 40)
;    (num-dverts    uint16         :offset-assert 42)
;    (dp-ref        uint32         :offset-assert 44)
;    (dp-qwc        uint32         :offset-assert 48)
;    (generic-ref   uint32         :offset-assert 52)
;    (generic-count uint32         :offset-assert 56)
;    (debug-lines   basic          :offset-assert 60)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype instance-tie (instance)
;   ((id            int16            :offset-assert 4)
;    (bsphere       vector   :inline :offset-assert 16)
;    (bucket-index  uint16           :offset-assert 6)
;    (origin        matrix4h :inline :offset-assert 32)
;    (wind-index    uint16           :offset-assert 62)
;    (color-indices uint32           :offset-assert 8)
;    (bucket-ptr    basic            :offset-assert 12)
;    (max-scale     uint16           :offset-assert 38)
;    (flags         uint16           :offset-assert 46)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype drawable-tree-instance-tie (drawable-tree)
;   ((id         int16           :offset-assert 4)
;    (bsphere    vector  :inline :offset-assert 16)
;    (length     int16           :offset-assert 6)
;    (data       UNKNOWN 1       :offset-assert 32)
;    (prototypes basic           :offset-assert 8)
;    )
;   :method-count-assert 18
;   :size-assert         #x24
;   :flag-assert         #x1200000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype tie-matrix (structure)
;   ((mat   matrix :inline :offset-assert 0)
;    (morph qword  :inline :offset-assert 64)
;    (fog   qword  :inline :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

; ;; tie-h
; (deftype instance-tie-work (structure)
;   ((wind-const                  vector     :inline :offset-assert 0)
;    (hmge-d                      vector     :inline :offset-assert 16)
;    (hvdf-offset                 vector     :inline :offset-assert 32)
;    (wind-force                  vector     :inline :offset-assert 48)
;    (constant                    vector     :inline :offset-assert 64)
;    (far-morph                   vector     :inline :offset-assert 80)
;    (dist-test                   vector     :inline :offset-assert 96)
;    (min-dist                    vector     :inline :offset-assert 112)
;    (guard-plane                 UNKNOWN    4       :offset-assert 128)
;    (upload-color-0              dma-packet :inline :offset-assert 192)
;    (upload-color-1              dma-packet :inline :offset-assert 208)
;    (upload-color-2              dma-packet :inline :offset-assert 224)
;    (upload-color-ret            dma-packet :inline :offset-assert 240)
;    (upload-color-temp           dma-packet :inline :offset-assert 256)
;    (generic-color-0             dma-packet :inline :offset-assert 272)
;    (generic-color-1             dma-packet :inline :offset-assert 288)
;    (generic-color-end           dma-packet :inline :offset-assert 304)
;    (tie-near-perspective-matrix matrix     :inline :offset-assert 320)
;    (wind-vectors                uint32             :offset-assert 384)
;    (test-id                     uint32             :offset-assert 388)
;    (test-id2                    uint32             :offset-assert 392)
;    (dma-buffer                  basic              :offset-assert 396)
;    (to-spr                      uint32             :offset-assert 400)
;    (from-spr                    uint32             :offset-assert 404)
;    (wind-work                   uint32             :offset-assert 408)
;    (cur-vis-bits                uint32             :offset-assert 412)
;    (end-vis-bits                uint32             :offset-assert 416)
;    (first-generic-prototype     uint32             :offset-assert 420)
;    (refl-fade-fac               float              :offset-assert 424)
;    (refl-fade-end               float              :offset-assert 428)
;    (flags                       uint32             :offset-assert 432)
;    (paused                      basic              :offset-assert 436)
;    (wait-from-spr               uint32             :offset-assert 440)
;    (wait-to-spr                 uint32             :offset-assert 444)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c0
;   :flag-assert         #x9000001c0
;   )

; ;; tie-h
; (deftype instance-tie-dma (structure)
;   ((banka UNKNOWN           32  :offset-assert 4)
;    (bankb UNKNOWN           32  :offset-assert 2052)
;    (outa  UNKNOWN           256 :offset-assert 4096)
;    (outb  UNKNOWN           256 :offset-assert 8192)
;    (work  instance-tie-work     :offset-assert 12288)
;    )
;   :method-count-assert 9
;   :size-assert         #x3000
;   :flag-assert         #x900003000
;   )

; ;; tie-h
; (deftype prototype-tie-work (structure)
;   ((upload-palette-0      dma-packet :inline :offset-assert 0)
;    (upload-palette-1      dma-packet :inline :offset-assert 16)
;    (upload-model-0        dma-packet :inline :offset-assert 32)
;    (upload-model-1        dma-packet :inline :offset-assert 48)
;    (upload-model-2        dma-packet :inline :offset-assert 64)
;    (upload-model-3        dma-packet :inline :offset-assert 80)
;    (upload-model-near-0   dma-packet :inline :offset-assert 96)
;    (upload-model-near-1   dma-packet :inline :offset-assert 112)
;    (upload-model-near-2   dma-packet :inline :offset-assert 128)
;    (upload-model-near-3   dma-packet :inline :offset-assert 144)
;    (upload-model-near-4   dma-packet :inline :offset-assert 160)
;    (generic-envmap-shader dma-packet :inline :offset-assert 176)
;    (generic-palette       dma-packet :inline :offset-assert 192)
;    (generic-model-0       dma-packet :inline :offset-assert 208)
;    (generic-model-1       dma-packet :inline :offset-assert 224)
;    (generic-model-2       dma-packet :inline :offset-assert 240)
;    (generic-model-next    dma-packet :inline :offset-assert 256)
;    (clamp                 uint64             :offset-assert 272)
;    (prototype-array       basic              :offset-assert 280)
;    (generic-wait-from-spr uint32             :offset-assert 284)
;    (generic-wait-to-spr   uint32             :offset-assert 288)
;    (wait-from-spr         uint32             :offset-assert 292)
;    (wait-to-spr           uint32             :offset-assert 296)
;    (near-wait-from-spr    uint32             :offset-assert 300)
;    (near-wait-to-spr      uint32             :offset-assert 304)
;    )
;   :method-count-assert 9
;   :size-assert         #x134
;   :flag-assert         #x900000134
;   )

; ;; tie-h
; (deftype prototype-tie-dma (structure)
;   ((colora          UNKNOWN 256 :offset-assert 0)
;    (colorb          UNKNOWN 256 :offset-assert 1024)
;    (outa            UNKNOWN 256 :offset-assert 2048)
;    (outb            UNKNOWN 256 :offset-assert 6144)
;    (length          uint32      :offset-assert 10240)
;    (dma-buffer      basic       :offset-assert 10244)
;    (this-frag-count uint32      :offset-assert 10248)
;    (next            UNKNOWN 4   :offset-assert 10256)
;    (geometry        UNKNOWN 4   :offset-assert 10272)
;    (frag-count      UNKNOWN 4   :offset-assert 10288)
;    )
;   :method-count-assert 9
;   :size-assert         #x2834
;   :flag-assert         #x900002834
;   )

; ;; tfrag-h
; (deftype tfragment-stats (structure)
;   ((num-tris   UNKNOWN 4 :offset-assert 0)
;    (num-dverts UNKNOWN 4 :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; tfrag-h
; (deftype tfragment-debug-data (structure)
;   ((stats       tfragment-stats :inline :offset-assert 0)
;    (debug-lines basic                   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; tfrag-h
; (deftype generic-tfragment (structure)
;   ((dummy int32  :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; tfrag-h
; (deftype tfragment (drawable)
;   ((id                int16                        :offset-assert 4)
;    (bsphere           vector               :inline :offset-assert 16)
;    (color-index       uint16                       :offset-assert 6)
;    (debug-data        tfragment-debug-data         :offset-assert 8)
;    (color-indices     uint32                       :offset-assert 12)
;    (colors            uint32                       :offset-assert 12)
;    (dma-chain         UNKNOWN              3       :offset-assert 32)
;    (dma-common        uint32                       :offset-assert 32)
;    (dma-level-0       uint32                       :offset-assert 32)
;    (dma-base          uint32                       :offset-assert 36)
;    (dma-level-1       uint32                       :offset-assert 40)
;    (dma-qwc           UNKNOWN              4       :offset-assert 44)
;    (shader            uint32                       :offset-assert 48)
;    (num-shaders       uint8                        :offset-assert 52)
;    (num-base-colors   uint8                        :offset-assert 53)
;    (num-level0-colors uint8                        :offset-assert 54)
;    (num-level1-colors uint8                        :offset-assert 55)
;    (color-offset      uint8                        :offset-assert 56)
;    (color-count       uint8                        :offset-assert 57)
;    (pad0              uint8                        :offset-assert 58)
;    (pad1              uint8                        :offset-assert 59)
;    (generic           generic-tfragment            :offset-assert 60)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tfrag-h
; (deftype tfrag-dists (structure)
;   ((data   UNKNOWN 16 :offset-assert 0)
;    (vector UNKNOWN 4  :offset-assert 0)
;    (k0s    UNKNOWN 2  :offset-assert 0)
;    (k1s    UNKNOWN 2  :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; tfrag-h
; (deftype tfrag-data (structure)
;   ((data        UNKNOWN     56      :offset-assert 0)
;    (vector      UNKNOWN     14      :offset-assert 0)
;    (fog         vector      :inline :offset-assert 0)
;    (val         vector      :inline :offset-assert 16)
;    (strgif      qword       :inline :offset-assert 32)
;    (fangif      qword       :inline :offset-assert 48)
;    (adgif       qword       :inline :offset-assert 64)
;    (hvdf-offset vector      :inline :offset-assert 80)
;    (hmge-scale  vector      :inline :offset-assert 96)
;    (invh-scale  vector      :inline :offset-assert 112)
;    (ambient     vector      :inline :offset-assert 128)
;    (guard       vector      :inline :offset-assert 144)
;    (dists       tfrag-dists :inline :offset-assert 160)
;    (k0s         UNKNOWN     2       :offset-assert 160)
;    (k1s         UNKNOWN     2       :offset-assert 192)
;    )
;   :method-count-assert 9
;   :size-assert         #xe0
;   :flag-assert         #x9000000e0
;   )

;; tfrag-h
(deftype tfrag-control (structure)
  ((num-base-points           uint32  :offset-assert 0)
   (num-shared-base-points    uint32  :offset-assert 4)
   (num-level0-points         uint32  :offset-assert 8)
   (num-shared-level0-points  uint32  :offset-assert 12)
   (num-level1-points         uint32  :offset-assert 16)
   (num-shared-level1-points  uint32  :offset-assert 20)
   (ptr-vtxdata               uint32  :offset-assert 24)
   (ptr-base-points           uint32  :offset-assert 28)
   (ptr-shared-base-points    uint32  :offset-assert 32)
   (ptr-level0-points         uint32  :offset-assert 36)
   (ptr-shared-level0-points  uint32  :offset-assert 40)
   (ptr-level1-points         uint32  :offset-assert 44)
   (ptr-shared-level1-points  uint32  :offset-assert 48)
   (ptr-draw-points           uint32  :offset-assert 52)
   (ptr-interpolated-0        uint32  :offset-assert 56)
   (ptr-shared-interpolated-0 uint32  :offset-assert 60)
   (ptr-interpolated1         uint32  :offset-assert 64)
   (ptr-shared-interpolated1  uint32  :offset-assert 68)
   (ptr-strip-data            uint32  :offset-assert 72)
   (ptr-texture-data          uint32  :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; tfrag-h
(deftype tfrag-stats (structure)
  ((from         int32  :offset-assert 0)
   (to           int32  :offset-assert 4)
   (cnt          int32  :offset-assert 8)
   (tris         int32  :offset-assert 12)
   (tfaces       int32  :offset-assert 16)
   (tfrags       int32  :offset-assert 20)
   (dtris        int32  :offset-assert 24)
   (base-verts   int32  :offset-assert 28)
   (level0-verts int32  :offset-assert 32)
   (level1-verts int32  :offset-assert 36)
   (dma-cnt      int32  :offset-assert 40)
   (dma-dta      int32  :offset-assert 44)
   (dma-tex      int32  :offset-assert 48)
   (strips       int32  :offset-assert 52)
   (drawpoints   int32  :offset-assert 56)
   (vif          int32  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

; ;; tfrag-h
; (deftype tfrag-packet (structure)
;   ((tag UNKNOWN 2 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; tfrag-h
(deftype tfrag-work (structure)
  ((base-tmpl             dma-packet :inline :offset-assert 0)
   (level-0-tmpl          dma-packet :inline :offset-assert 16)
   (common-tmpl           dma-packet :inline :offset-assert 32)
   (level-1-tmpl          dma-packet :inline :offset-assert 48)
   (color-tmpl            dma-packet :inline :offset-assert 64)
   (frag-dists            vector     :inline :offset-assert 80)
   (max-dist              vector     :inline :offset-assert 96)
   (min-dist              vector     :inline :offset-assert 112)
   (color-ptr             vector4w   :inline :offset-assert 128)
   (tr-stat-tfrag         tr-stat            :offset-assert 144)
   (tr-stat-tfrag-near    tr-stat            :offset-assert 148)
   (vu1-enable-tfrag      int32              :offset-assert 152)
   (vu1-enable-tfrag-near int32              :offset-assert 156)
   (cur-vis-bits          uint32             :offset-assert 160)
   (end-vis-bits          uint32             :offset-assert 164)
   (src-ptr               uint32             :offset-assert 168)
   (last-call             uint32             :offset-assert 172)
   (dma-buffer            basic              :offset-assert 176)
   (test-id               uint32             :offset-assert 180)
   (wait-from-spr         uint32             :offset-assert 184)
   (wait-to-spr           uint32             :offset-assert 188)
   (near-wait-from-spr    uint32             :offset-assert 192)
   (near-wait-to-spr      uint32             :offset-assert 196)
   )
  :method-count-assert 9
  :size-assert         #xc8
  :flag-assert         #x9000000c8
  )

; ;; tfrag-h
; (deftype tfrag-dma (structure)
;   ((banka  UNKNOWN 16   :offset-assert 4)
;    (bankb  UNKNOWN 16   :offset-assert 1028)
;    (outa   UNKNOWN 128  :offset-assert 2048)
;    (outb   UNKNOWN 128  :offset-assert 4096)
;    (colors UNKNOWN 2048 :offset-assert 6144)
;    )
;   :method-count-assert 9
;   :size-assert         #x37fc
;   :flag-assert         #x9000037fc
;   )

; ;; background-h
; (deftype background-work (basic)
;   ((tfrag-tree-count              int32     :offset-assert 4)
;    (tfrag-trees                   UNKNOWN 8 :offset-assert 8)
;    (tfrag-levels                  UNKNOWN 8 :offset-assert 40)
;    (trans-tfrag-tree-count        int32     :offset-assert 72)
;    (trans-tfrag-trees             UNKNOWN 8 :offset-assert 76)
;    (trans-tfrag-levels            UNKNOWN 8 :offset-assert 108)
;    (dirt-tfrag-tree-count         int32     :offset-assert 140)
;    (dirt-tfrag-trees              UNKNOWN 8 :offset-assert 144)
;    (dirt-tfrag-levels             UNKNOWN 8 :offset-assert 176)
;    (ice-tfrag-tree-count          int32     :offset-assert 208)
;    (ice-tfrag-trees               UNKNOWN 8 :offset-assert 212)
;    (ice-tfrag-levels              UNKNOWN 8 :offset-assert 244)
;    (lowres-tfrag-tree-count       int32     :offset-assert 276)
;    (lowres-tfrag-trees            UNKNOWN 8 :offset-assert 280)
;    (lowres-tfrag-levels           UNKNOWN 8 :offset-assert 312)
;    (lowres-trans-tfrag-tree-count int32     :offset-assert 344)
;    (lowres-trans-tfrag-trees      UNKNOWN 8 :offset-assert 348)
;    (lowres-trans-tfrag-levels     UNKNOWN 8 :offset-assert 380)
;    (shrub-tree-count              int32     :offset-assert 412)
;    (shrub-trees                   UNKNOWN 8 :offset-assert 416)
;    (shrub-levels                  UNKNOWN 8 :offset-assert 448)
;    (tie-tree-count                int32     :offset-assert 480)
;    (tie-trees                     UNKNOWN 8 :offset-assert 484)
;    (tie-levels                    UNKNOWN 8 :offset-assert 516)
;    (tie-generic                   UNKNOWN 8 :offset-assert 548)
;    (wait-to-vu0                   uint32    :offset-assert 580)
;    )
;   :method-count-assert 9
;   :size-assert         #x248
;   :flag-assert         #x900000248
;   )

; ;; subdivide-h
; (deftype subdivide-settings (basic)
;   ((dist   UNKNOWN 5 :offset-assert 4)
;    (meters UNKNOWN 5 :offset-assert 24)
;    (close  UNKNOWN 4 :offset-assert 44)
;    (far    UNKNOWN 4 :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c
;   :flag-assert         #x90000004c
;   )

; ;; subdivide-h
; (deftype subdivide-dists (structure)
;   ((data   UNKNOWN 32 :offset-assert 0)
;    (vector UNKNOWN 8  :offset-assert 0)
;    (k0s    UNKNOWN 4  :offset-assert 0)
;    (k1s    UNKNOWN 4  :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; subdivide-h
; (deftype gs-packed-rgba (structure)
;   ((data  UNKNOWN 4 :offset-assert 0)
;    (red   int32     :offset-assert 0)
;    (green int32     :offset-assert 4)
;    (blue  int32     :offset-assert 8)
;    (alpha int32     :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-xyzw (structure)
;   ((data UNKNOWN 4 :offset-assert 0)
;    (x    int32     :offset-assert 0)
;    (y    int32     :offset-assert 4)
;    (z    int32     :offset-assert 8)
;    (w    int32     :offset-assert 12)
;    (quad uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-stq (structure)
;   ((data  UNKNOWN 4 :offset-assert 0)
;    (tex-s float     :offset-assert 0)
;    (tex-t float     :offset-assert 4)
;    (tex-q float     :offset-assert 8)
;    (quad  uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-gt (structure)
;   ((stq  gs-packed-stq  :inline :offset-assert 0)
;    (rgba gs-packed-rgba :inline :offset-assert 16)
;    (xyzw gs-packed-xyzw :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; subdivide-h
; (deftype gs-packed-gt4 (structure)
;   ((data UNKNOWN 4 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #xc0
;   :flag-assert         #x9000000c0
;   )

;; subdivide-h
(deftype terrain-bsp (structure)
  ((lev-index int32  :offset-assert 0)
   (mood      basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; subdivide-h
(deftype terrain-stats (structure)
  ((pris             tr-stat :inline :offset-assert 0)
   (tie-generic      tr-stat :inline :offset-assert 16)
   (tie              tr-stat :inline :offset-assert 32)
   (tie-near         tr-stat :inline :offset-assert 48)
   (shrub-near       tr-stat :inline :offset-assert 64)
   (shrub            tr-stat :inline :offset-assert 80)
   (tfrag-near       tr-stat :inline :offset-assert 96)
   (tfrag            tr-stat :inline :offset-assert 112)
   (billboard        tr-stat :inline :offset-assert 128)
   (trans-tfrag      tr-stat :inline :offset-assert 144)
   (trans-tfrag-near tr-stat :inline :offset-assert 160)
   (trans-pris       tr-stat :inline :offset-assert 176)
   (trans-shrub      tr-stat :inline :offset-assert 192)
   (ocean-mid        tr-stat :inline :offset-assert 208)
   (ocean-near       tr-stat :inline :offset-assert 224)
   (total            tr-stat :inline :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

; ;; subdivide-h
; (deftype dma-area (structure)
;   ((draw-node-dma      draw-node-dma      :inline :offset-assert 0)
;    (tfrag-dma          tfrag-dma          :inline :offset-assert 0)
;    (instance-shrub-dma instance-shrub-dma :inline :offset-assert 0)
;    (instance-tie-dma   instance-tie-dma   :inline :offset-assert 0)
;    (prototype-tie-dma  prototype-tie-dma  :inline :offset-assert 0)
;    (time-of-day-dma    time-of-day-dma    :inline :offset-assert 0)
;    (decomp-work        decomp-work        :inline :offset-assert 0)
;    (ocean-vertex       UNKNOWN            4       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x38a0
;   :flag-assert         #x9000038a0
;   )

; ;; subdivide-h
; (deftype background-area (structure)
;   ((dma-area dma-area :inline :offset-assert 0)
;    (vis-list UNKNOWN  2048    :offset-assert 14496)
;    )
;   :method-count-assert 9
;   :size-assert         #x40a0
;   :flag-assert         #x9000040a0
;   )

; ;; subdivide-h
; (deftype foreground-area (structure)
;   ((joint-work   joint-work   :inline :offset-assert 0)
;    (generic-work generic-work :inline :offset-assert 0)
;    (bone-mem     bone-memory  :inline :offset-assert 0)
;    (shadow-work  shadow-work  :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x3fd0
;   :flag-assert         #x900003fd0
;   )

; ;; subdivide-h
; (deftype ambient-area (structure)
;   ((ambient-list ambient-list :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x2004
;   :flag-assert         #x900002004
;   )

; ;; subdivide-h
; (deftype work-area (structure)
;   ((background background-area :inline :offset-assert 0)
;    (foreground foreground-area :inline :offset-assert 0)
;    (ambient    ambient-area    :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x40a0
;   :flag-assert         #x9000040a0
;   )

; ;; subdivide-h
; (deftype terrain-context (structure)
;   ((bsp  terrain-bsp :inline :offset-assert 0)
;    (work work-area   :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x40b0
;   :flag-assert         #x9000040b0
;   )

;; entity-h
(deftype entity-perm (structure)
  ((user-object object 2 :offset-assert 0)
   (user-uint64 uint64    :offset 0)
   (user-float  float 2 :offset 0)
   (user-int32  int32 2 :offset 0)
   (user-uint32 uint32 2 :offset 0)
   (user-int16  int16 4 :offset 0)
   (user-uint16 uint16 4 :offset 0)
   (user-int8   int8 8 :offset 0)
   (user-uint8  uint8 8 :offset 0)
   (status      uint16    :offset-assert 8)
   (dummy       uint8 1 :offset-assert 10)
   (task        uint8     :offset-assert 11)
   (aid         uint32    :offset-assert 12)
   (quad        uint128   :offset 0)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;; entity-h
(deftype entity-links (structure)
  ((prev-link entity-links         :offset-assert 0)
   (next-link entity-links         :offset-assert 4)
   (entity    basic                :offset-assert 8)
   (process   basic                :offset-assert 12)
   (level     basic                :offset-assert 16)
   (vis-id    int32                :offset-assert 20)
   (trans     vector       :inline :offset-assert 32)
   (perm      entity-perm  :inline :offset-assert 48)
   (status    uint16               :offset 56) ;; overlays
   (aid       uint32               :offset 60)
   (task      uint8                :offset 59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; entity-h
; (deftype entity-perm-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-links-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-ambient-data (structure)
;   ((user-object UNKNOWN 3  :offset-assert 0)
;    (function    basic      :offset-assert 12)
;    (quad        uint128    :offset-assert 0)
;    (user-uint64 UNKNOWN 1  :offset-assert 0)
;    (user-float  UNKNOWN 3  :offset-assert 0)
;    (user-int32  UNKNOWN 3  :offset-assert 0)
;    (user-uint32 UNKNOWN 3  :offset-assert 0)
;    (user-int16  UNKNOWN 6  :offset-assert 0)
;    (user-uint16 UNKNOWN 6  :offset-assert 0)
;    (user-int8   UNKNOWN 12 :offset-assert 0)
;    (user-uint8  UNKNOWN 12 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-ambient-data-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

;; entity-h
(deftype entity-info (basic)
  ((ptype     basic  :offset-assert 4)
   (package   basic  :offset-assert 8)
   (art-group basic  :offset-assert 12)
   (pool      basic  :offset-assert 16)
   (heap-size int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; entity-h
(deftype actor-bank (basic)
  ((pause-dist float  :offset-assert 4)
   (birth-dist float  :offset-assert 8)
   (birth-max  int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; sprite-h
; (deftype sprite-vec-data-2d (structure)
;   ((x-y-z-sx    vector   :inline :offset-assert 0)
;    (flag-rot-sy vector   :inline :offset-assert 16)
;    (r-g-b-a     vector   :inline :offset-assert 32)
;    (x           float            :offset-assert 0)
;    (y           float            :offset-assert 4)
;    (z           float            :offset-assert 8)
;    (sx          float            :offset-assert 12)
;    (sy          float            :offset-assert 28)
;    (rot         float            :offset-assert 24)
;    (flag        int32            :offset-assert 16)
;    (matrix      int32            :offset-assert 20)
;    (warp-turns  int32            :offset-assert 16)
;    (r           float            :offset-assert 32)
;    (g           float            :offset-assert 36)
;    (b           float            :offset-assert 40)
;    (a           float            :offset-assert 44)
;    (trans       vector3s :inline :offset-assert 0)
;    (color       rgbaf    :inline :offset-assert 32)
;    (data        UNKNOWN  1       :offset-assert 0)
;    (data64      UNKNOWN  6       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; sprite-h
; (deftype sprite-array-2d (basic)
;   ((num-sprites UNKNOWN 2 :offset-assert 4)
;    (num-valid   UNKNOWN 2 :offset-assert 12)
;    (vec-data    uint32    :offset-assert 20)
;    (adgif-data  uint32    :offset-assert 24)
;    (pad         UNKNOWN 4 :offset-assert 32)
;    (data        UNKNOWN 1 :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; sprite-h
; (deftype sprite-vec-data-3d (structure)
;   ((x-y-z-sx    vector   :inline :offset-assert 0)
;    (qx-qy-qz-sy vector   :inline :offset-assert 16)
;    (r-g-b-a     vector   :inline :offset-assert 32)
;    (x           float            :offset-assert 0)
;    (y           float            :offset-assert 4)
;    (z           float            :offset-assert 8)
;    (sx          float            :offset-assert 12)
;    (sy          float            :offset-assert 28)
;    (qx          float            :offset-assert 16)
;    (qy          float            :offset-assert 20)
;    (qz          float            :offset-assert 24)
;    (r           float            :offset-assert 32)
;    (g           float            :offset-assert 36)
;    (b           float            :offset-assert 40)
;    (a           float            :offset-assert 44)
;    (trans       vector3s :inline :offset-assert 0)
;    (rot         vector3s :inline :offset-assert 16)
;    (color       rgbaf    :inline :offset-assert 32)
;    (data        UNKNOWN  1       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; sprite-h
; (deftype sprite-array-3d (basic)
;   ((num-sprites UNKNOWN 2 :offset-assert 4)
;    (num-valid   UNKNOWN 2 :offset-assert 12)
;    (vec-data    uint32    :offset-assert 20)
;    (adgif-data  uint32    :offset-assert 24)
;    (data        UNKNOWN 1 :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; shadow-h
(deftype fake-shadow (structure)
  ((px    float  :offset-assert 0)
   (py    float  :offset-assert 4)
   (pz    float  :offset-assert 8)
   (scale float  :offset-assert 12)
   (qx    float  :offset-assert 16)
   (qy    float  :offset-assert 20)
   (qz    float  :offset-assert 24)
   (flags int32  :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; shadow-h
(deftype fake-shadow-buffer (basic)
  ((num-shadows int32      :offset-assert 4)
   (data fake-shadow 32 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x408
  :flag-assert         #x900000408
  )

;; eye-h
(deftype eye (structure)
  ((data        uint128 2 :offset-assert 0)
   (x           float     :offset 0)
   (y           float     :offset 4)
   (lid         float     :offset 8)
   (iris-scale  float     :offset 16)
   (pupil-scale float     :offset 20)
   (lid-scale   float     :offset 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; eye-h
(deftype eye-control (structure)
  ((process     uint64         :offset-assert 0)
   (random-time uint16         :offset-assert 8)
   (level       uint16         :offset-assert 10)
   (blink       float          :offset-assert 12)
   (shaders     uint32         :offset-assert 16)
   (left        eye    :inline :offset-assert 32)
   (right       eye    :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; eye-h
(deftype eye-control-array (basic)
  ((data eye-control 11 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x430
  :flag-assert         #x900000430
  )

; ;; eye-h
; (deftype eye-work (structure)
;   ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
;    (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
;    (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
;    (blink-table  UNKNOWN        10      :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x88
;   :flag-assert         #x900000088
;   )

;; sparticle-launcher-h
(deftype sp-field-init-spec (structure)
  ((field          uint16  :offset-assert 0)
   (flags          uint16  :offset-assert 2)
   (initial-valuef float   :offset-assert 4)
   (random-rangef  float   :offset-assert 8)
   (random-multf   float   :offset-assert 12)
   (initial-value  int32   :offset 4)
   (random-range   int32   :offset 8)
   (random-mult    int32   :offset 12)
   (func           basic   :offset 4)
   (tex            uint32  :offset 4)
   (pntr           uint32  :offset 4)
   (sym            basic   :offset 4)
   (sound          basic   :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sparticle-launcher-h
(deftype sparticle-launcher (basic)
  ((birthaccum float   :offset-assert 4)
   (soundaccum float   :offset-assert 8)
   (init-specs uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sparticle-launcher-h
(deftype sparticle-group-item (structure)
  ((launcher   uint32  :offset-assert 0)
   (fade-after float  :offset-assert 4) ;; meters
   (falloff-to float  :offset-assert 8) ;; meters
   (flags      uint16  :offset-assert 12)
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     uint16  :offset-assert 18)
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

; ;; sparticle-launcher-h
; (deftype sparticle-launch-state (structure)
;   ((group-item sparticle-group-item  :offset-assert 0)
;    (flags      uint16                :offset-assert 4)
;    (randomize  uint16                :offset-assert 6)
;    (origin     vector                :offset-assert 8)
;    (sprite3d   sprite-vec-data-3d    :offset-assert 12)
;    (sprite     basic                 :offset-assert 16)
;    (offset     uint32                :offset-assert 20)
;    (accum      float                 :offset-assert 24)
;    (spawn-time uint32                :offset-assert 28)
;    (swarm      basic                 :offset-assert 20)
;    (seed       uint32                :offset-assert 24)
;    (time       uint32                :offset-assert 28)
;    (spec       basic                 :offset-assert 16)
;    (id         uint32                :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; sparticle-launcher-h
(deftype sparticle-launch-group (basic)
  ((length          int16          :offset-assert 4)
   (duration        uint16         :offset-assert 6)
   (linger-duration uint16         :offset-assert 8)
   (flags           uint16         :offset-assert 10)
   (name            basic          :offset-assert 12)
   (launcher        uint32         :offset-assert 16)
   (bounds          sphere :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; sparticle-launcher-h
; (deftype sparticle-launch-control (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (group            basic            :offset-assert 16)
;    (proc             basic            :offset-assert 20)
;    (local-clock      int32            :offset-assert 24)
;    (fade             float            :offset-assert 28)
;    (matrix           int32            :offset-assert 32)
;    (last-spawn-frame int32            :offset-assert 36)
;    (last-spawn-time  int32            :offset-assert 40)
;    (center           vector  :inline  :offset-assert 48)
;    (data             UNKNOWN :dynamic :offset-assert 64)
;    )
;   :method-count-assert 14
;   :size-assert         #x40
;   :flag-assert         #xe00000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; sparticle-h
; (deftype sparticle-cpuinfo (structure)
;   ((sprite        sprite-vec-data-2d             :offset-assert 0)
;    (adgif         adgif-shader                   :offset-assert 4)
;    (radius        float                          :offset-assert 8)
;    (omega         float                          :offset-assert 12)
;    (vel-sxvel     vector                 :inline :offset-assert 16)
;    (rot-syvel     vector                 :inline :offset-assert 32)
;    (fade          rgbaf                  :inline :offset-assert 48)
;    (acc           vector                 :inline :offset-assert 64)
;    (rotvel3d      quaternion             :inline :offset-assert 80)
;    (vel           vector3s               :inline :offset-assert 16)
;    (accel         vector3s               :inline :offset-assert 64)
;    (scalevelx     float                          :offset-assert 28)
;    (scalevely     float                          :offset-assert 44)
;    (friction      float                          :offset-assert 96)
;    (timer         int32                          :offset-assert 100)
;    (flags         uint32                         :offset-assert 104)
;    (user-int32    int32                          :offset-assert 108)
;    (user-uint32   uint32                         :offset-assert 108)
;    (user-float    float                          :offset-assert 108)
;    (user-pntr     uint32                         :offset-assert 108)
;    (user-sprite   sprite-vec-data-2d             :offset-assert 108)
;    (func          basic                          :offset-assert 112)
;    (next-time     uint32                         :offset-assert 116)
;    (next-launcher basic                          :offset-assert 120)
;    (cache-alpha   float                          :offset-assert 124)
;    (valid         basic                          :offset-assert 128)
;    (key           basic                          :offset-assert 132)
;    (binding       sparticle-launch-state         :offset-assert 136)
;    (data          UNKNOWN                1       :offset-assert 12)
;    (dataf         UNKNOWN                1       :offset-assert 12)
;    (datac         UNKNOWN                1       :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x8c
;   :flag-assert         #x90000008c
;   ;; field key is a basic loaded with a signed load
;   )

; ;; sparticle-h
; (deftype sparticle-launchinfo (structure)
;   ((launchrot  vector  :inline :offset-assert 0)
;    (conerot    vector  :inline :offset-assert 16)
;    (coneradius float           :offset-assert 32)
;    (rotate-y   float           :offset-assert 36)
;    (data       UNKNOWN 1       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x28
;   :flag-assert         #x900000028
;   )

; ;; sparticle-h
; (deftype sparticle-system (basic)
;   ((blocks          UNKNOWN 2 :offset-assert 4)
;    (length          UNKNOWN 2 :offset-assert 12)
;    (num-alloc       UNKNOWN 2 :offset-assert 20)
;    (is-3d           basic     :offset-assert 28)
;    (flags           uint32    :offset-assert 32)
;    (alloc-table     uint32    :offset-assert 36)
;    (cpuinfo-table   uint32    :offset-assert 40)
;    (vecdata-table   uint32    :offset-assert 44)
;    (adgifdata-table uint32    :offset-assert 48)
;    )
;   :method-count-assert 9
;   :size-assert         #x34
;   :flag-assert         #x900000034
;   )

;; actor-link-h
(deftype actor-link-info (basic)
  ((process basic  :offset-assert 4)
   (next    basic  :offset-assert 8)
   (prev    basic  :offset-assert 12)
   )
  :method-count-assert 26
  :size-assert         #x10
  :flag-assert         #x1a00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    )
  )

; ;; camera-h
; (deftype camera-bank (basic)
;   ((collide-move-rad        float   :offset-assert 4)
;    (joypad                  uint32  :offset-assert 8)
;    (min-detectable-velocity float   :offset-assert 12)
;    (attack-timeout          uint64  :offset-assert 16)
;    (default-string-max-y    meters  :offset-assert 24)
;    (default-string-min-y    meters  :offset-assert 28)
;    (default-string-max-z    meters  :offset-assert 32)
;    (default-string-min-z    meters  :offset-assert 36)
;    (default-string-push-z   meters  :offset-assert 40)
;    (default-tilt-adjust     deg     :offset-assert 44)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; camera-h
(deftype cam-index (structure)
  ((flags uint32    :offset-assert 0)
   (vec   uint128 2 :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; camera-h
(deftype tracking-point (structure)
  ((position    vector :inline :offset-assert 0)
   (direction   vector :inline :offset-assert 16)
   (tp-length   float          :offset-assert 32)
   (next        int32          :offset-assert 36)
   (incarnation int32          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; camera-h
(deftype tracking-spline-sampler (structure)
  ((cur-pt     int32  :offset-assert 0)
   (partial-pt float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; camera-h
(deftype tracking-spline (structure)
  ((point tracking-point 32 :inline     :offset-assert 0)
   (summed-len         float           :offset-assert 1536)
   (free-point         int32           :offset-assert 1540)
   (used-point         int32           :offset-assert 1544)
   (partial-point      float           :offset-assert 1548)
   (end-point          int32           :offset-assert 1552)
   (next-to-last-point int32           :offset-assert 1556)
   (max-move           float           :offset-assert 1560)
   (sample-len         float           :offset-assert 1564)
   (used-count         int32           :offset-assert 1568)
   (old-position       vector  :inline :offset-assert 1584)
   (debug-old-position vector  :inline :offset-assert 1600)
   (debug-out-position vector  :inline :offset-assert 1616)
   (debug-last-point   int32           :offset-assert 1632)
   )
  :method-count-assert 24
  :size-assert         #x664
  :flag-assert         #x1800000664
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    )
  )

;; camera-h
(deftype cam-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x18
  :flag-assert         #xd00000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; camera-h
(deftype cam-vector-seeker (structure)
  ((target      vector :inline :offset-assert 0)
   (value       vector :inline :offset-assert 16)
   (vel         vector :inline :offset-assert 32)
   (accel       float          :offset-assert 48)
   (max-vel     float          :offset-assert 52)
   (max-partial float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; camera-h
(deftype cam-rotation-tracker (structure)
  ((inv-mat                 matrix           :inline :offset-assert 0)
   (no-follow               basic                    :offset-assert 64)
   (follow-pt               vector           :inline :offset-assert 80)
   (follow-off              vector           :inline :offset-assert 96)
   (follow-blend            float                    :offset-assert 112)
   (tilt-adjust             cam-float-seeker :inline :offset-assert 116)
   (use-point-of-interest   basic                    :offset-assert 140)
   (point-of-interest       vector           :inline :offset-assert 144)
   (point-of-interest-blend cam-float-seeker :inline :offset-assert 160)
   (underwater-blend        cam-float-seeker :inline :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

;; camera-h
(deftype camera-combiner (process)
  ((~Ttrans             vector               :inline :offset-assert 112)
   (~Tinv-camera-rot    matrix               :inline :offset-assert 128)
   (~Tfov               float                        :offset-assert 192)
   (~Tinterp-val        float                        :offset-assert 196)
   (~Tinterp-step       float                        :offset-assert 200)
   (~Tdist-from-src     float                        :offset-assert 204)
   (~Tdist-from-dest    float                        :offset-assert 208)
   (~Tflip-control-axis vector               :inline :offset-assert 224)
   (~Tvelocity          vector               :inline :offset-assert 240)
   (~Ttracking-status   uint64                       :offset-assert 256)
   (~Ttracking-options  int32                        :offset-assert 264)
   (~Ttracking          cam-rotation-tracker :inline :offset-assert 272)
   )
  :heap-base #x170
  :method-count-assert 14
  :size-assert         #x1e0
  :flag-assert         #xe017001e0
  ;; inherited inspect of process
  )

;; camera-h
(deftype camera-slave (process)
  ((~Ttrans                         vector               :inline :offset-assert 112)
   (~Tfov                           float                        :offset-assert 128)
   (~Tfov0                          float                        :offset-assert 132)
   (~Tfov1                          float                        :offset-assert 136)
   (~Tfov-index                     cam-index            :inline :offset-assert 144)
   (~Ttracking                      cam-rotation-tracker :inline :offset-assert 192)
   (~Tview-off-param                float                        :offset-assert 400)
   (~Tview-off                      vector               :inline :offset-assert 416)
   (~Tmin-z-override                float                        :offset-assert 432)
   (~Tview-flat                     vector               :inline :offset-assert 448)
   (~Tstring-vel-dir                uint32                       :offset-assert 464)
   (~Tstring-trans                  vector               :inline :offset-assert 480)
   (~Tposition-spline               tracking-spline      :inline :offset-assert 496)
   (~Tpivot-pt                      vector               :inline :offset-assert 2144)
   (~Tpivot-rad                     float                        :offset-assert 2160)
   (~Tcircular-follow               vector               :inline :offset-assert 2176)
   (~Tmax-angle-offset              float                        :offset-assert 2192)
   (~Tmax-angle-curr                float                        :offset-assert 2196)
   (~Toptions                       uint32                       :offset-assert 2200)
   (~Tcam-entity                    basic                        :offset-assert 2204)
   (~Tvelocity                      vector               :inline :offset-assert 2208)
   (~Tdesired-pos                   vector               :inline :offset-assert 2224)
   (~Ttime-dist-too-far             uint32                       :offset-assert 2240)
   (~Tlos-state                     uint32                       :offset-assert 2244)
   (~Tgood-point                    vector               :inline :offset-assert 2256)
   (~Tlos-tgt-spline-pt             int32                        :offset-assert 2272)
   (~Tlos-tgt-spline-pt-incarnation int32                        :offset-assert 2276)
   (~Tlos-last-pos                  vector               :inline :offset-assert 2288)
   (~Tintro-curve                   curve                :inline :offset-assert 2304)
   (~Tintro-offset                  vector               :inline :offset-assert 2336)
   (~Tintro-t                       float                        :offset-assert 2352)
   (~Tintro-t-step                  float                        :offset-assert 2356)
   (~Toutro-exit-value              float                        :offset-assert 2360)
   (~Tspline-exists                 basic                        :offset-assert 2364)
   (~Tspline-curve                  curve                :inline :offset-assert 2368)
   (~Tspline-offset                 vector               :inline :offset-assert 2400)
   (~Tindex                         cam-index            :inline :offset-assert 2416)
   (~Tsaved-pt                      vector               :inline :offset-assert 2464)
   (~Tspline-tt                     float                        :offset-assert 2480)
   (~Tspline-follow-dist            float                        :offset-assert 2484)
   (~Tchange-event-from             uint32                       :offset-assert 2488)
   (~Tenter-has-run                 basic                        :offset-assert 2492)
   (~Tblend-from-type               uint64                       :offset-assert 2496)
   (~Tblend-to-type                 uint64                       :offset-assert 2504)
   (~Thave-phony-joystick           basic                        :offset-assert 2512)
   (~Tphony-joystick-x              float                        :offset-assert 2516)
   (~Tphony-joystick-y              float                        :offset-assert 2520)
   (~Tstring-min-val                vector               :inline :offset-assert 2528)
   (~Tstring-max-val                vector               :inline :offset-assert 2544)
   (~Tstring-val-locked             basic                        :offset-assert 2560)
   )
  :heap-base #x9a0
  :method-count-assert 14
  :size-assert         #xa04
  :flag-assert         #xe09a00a04
  ;; inherited inspect of process
  )

;; camera-h
(deftype camera-master (process)
  ((~Tmaster-options      uint32                    :offset-assert 112)
   (~Tnum-slaves          int32                     :offset-assert 116)
   (~Tslave               basic           2       :offset-assert 120)
   (~Tslave-options       uint32                    :offset-assert 128)
   (~Tview-off-param-save float                     :offset-assert 132)
   (~Tchanger             uint32                    :offset-assert 136)
   (~Tcam-entity          basic                     :offset-assert 140)
   (~TstringMinLength     float                     :offset-assert 144)
   (~TstringMaxLength     float                     :offset-assert 148)
   (~TstringMinHeight     float                     :offset-assert 152)
   (~TstringMaxHeight     float                     :offset-assert 156)
   (~Tstring-min          cam-vector-seeker :inline :offset-assert 160)
   (~Tstring-max          cam-vector-seeker :inline :offset-assert 224)
   (~Tstring-push-z       float                     :offset-assert 284)
   (~TstringCliffHeight   float                     :offset-assert 288)
   (~Tno-intro            uint32                    :offset-assert 292)
   (~Tforce-blend         uint32                    :offset-assert 296)
   (~Tforce-blend-time    uint32                    :offset-assert 300)
   (~Tlocal-down          vector            :inline :offset-assert 304)
   (~Tdrawable-target     uint64                    :offset-assert 320)
   (~Twhich-bone          int32                     :offset-assert 328)
   (~Tpov-handle          uint64                    :offset-assert 336)
   (~Tpov-bone            int32                     :offset-assert 344)
   (~Tbeing-attacked      basic                     :offset-assert 348)
   (~Tattack-start        uint64                    :offset-assert 352)
   (~Ton-ground           basic                     :offset-assert 360)
   (~Tunder-water         int32                     :offset-assert 364)
   (~Ton-pole             basic                     :offset-assert 368)
   (~Ttgt-rot-mat         matrix            :inline :offset-assert 384)
   (~Ttgt-face-mat        matrix            :inline :offset-assert 448)
   (~Ttpos-old            vector            :inline :offset-assert 512)
   (~Ttpos-curr           vector            :inline :offset-assert 528)
   (~Ttarget-height       float                     :offset-assert 544)
   (~Ttpos-old-adj        vector            :inline :offset-assert 560)
   (~Ttpos-curr-adj       vector            :inline :offset-assert 576)
   (~Ttpos-tgt            vector            :inline :offset-assert 592)
   (~Tupspeed             float                     :offset-assert 608)
   (~Tpitch-off           vector            :inline :offset-assert 624)
   (~Tfoot-offset         float                     :offset-assert 640)
   (~Thead-offset         float                     :offset-assert 644)
   (~Ttarget-spline       tracking-spline   :inline :offset-assert 656)
   (~Tease-from           vector            :inline :offset-assert 2304)
   (~Tease-t              float                     :offset-assert 2320)
   (~Tease-step           float                     :offset-assert 2324)
   (~Tease-to             vector            :inline :offset-assert 2336)
   (~Toutro-curve         curve             :inline :offset-assert 2352)
   (~Toutro-t             float                     :offset-assert 2372)
   (~Toutro-t-step        float                     :offset-assert 2376)
   (~Toutro-exit-value    float                     :offset-assert 2380)
   (~Twater-drip-time     uint64                    :offset-assert 2384)
   (~Twater-drip          basic                     :offset-assert 2392)
   (~Twater-drip-mult     float                     :offset-assert 2396)
   (~Twater-drip-speed    float                     :offset-assert 2400)
   )
  :heap-base #x900
  :method-count-assert 14
  :size-assert         #x964
  :flag-assert         #xe09000964
  ;; inherited inspect of process
  )


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ASSERT-H            ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
(deftype __assert-info-private-struct (structure)
  ((filename   string  :offset-assert 0)
   (line-num   uint16  :offset-assert 4)
   (column-num uint16  :offset-assert 6)
   )
  :method-count-assert 11
  :size-assert         #x8
  :flag-assert         #xb00000008
  (:methods
    (set-private-assert-info (_type_ string uint16 uint16) int 9)
    (print-private-assert-info (_type_) int 10)
    )
  )

(define-extern *__private-assert-info* __assert-info-private-struct)


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ASSERT              ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
(define-extern *run-time-assert-enable* symbol)
(define-extern __assert (function symbol string int))
(define-extern __assert-min-max-range-float (function float float float string string string int))
(define-extern __assert-min-max-range-int (function int int int string string string int))
(define-extern __assert-zero-lim-range-int (function int int string string int))

;; hud-h
(deftype hud-icon (basic)
  ((icon    uint32  :offset-assert 4)
   (icon-y  int32   :offset-assert 8)
   (icon-x  int32   :offset-assert 12)
   (icon-z  int32   :offset-assert 16)
   (scale-x float   :offset-assert 20)
   (scale-y float   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; hud-h
(deftype hud-particle (basic)
  ((part     basic          :offset-assert 4)
   (init-pos vector :inline :offset-assert 16)
   (pos      vector :inline :offset-assert 32)
   (prev-pos vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; hud-h
(deftype hud (process)
  ((~Tvalue                  int32     :offset-assert 112)
   (~Tvalue2                 int32     :offset-assert 116)
   (~Ttarget-value           int32     :offset-assert 120)
   (~Tlast-increment-time    uint64    :offset-assert 128)
   (~Tlast-target-equal-time uint64    :offset-assert 136)
   (~Toffset                 int32     :offset-assert 144)
   (~Ty-offset               int32     :offset-assert 148)
   (~Tnext-y-offset          int32     :offset-assert 152)
   (~Tx-sgn                  int32     :offset-assert 156)
   (~Ty-sgn                  int32     :offset-assert 160)
   (~Ttext-x                 int32     :offset-assert 164)
   (~Ttext-y                 int32     :offset-assert 168)
   (~Tfriend                 int32     :offset-assert 172)
   (~Tfirst-init             basic     :offset-assert 176)
   (~Tincrement-on-event     basic     :offset-assert 180)
   (~Tskip-particle          int32     :offset-assert 184)
   (~Tdisable                basic     :offset-assert 188)
   (~Tforce-on-screen        basic     :offset-assert 192)
   (~Tdeactivate-when-hidden basic     :offset-assert 196)
   (~Ttrigger-time           uint64    :offset-assert 200)
   (~Tlast-hide-time         uint64    :offset-assert 208)
   (~Tnb-of-icons            int32     :offset-assert 216)
   (~Ticons                  hud-icon 6 :offset-assert 220)
   (~Tmax-nb-of-particles    int32     :offset-assert 244)
   (~Tnb-of-particles        int32     :offset-assert 248)
   (~Tparticles              hud-particle 7 :offset-assert 252)
   )
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  ;; inherited inspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    )
  )

;; hud-h
(deftype hud-parts (structure)
  (
   ;(data       UNKNOWN 9 :offset-assert 0)
   (pickups    uint32    :offset-assert 0)
   (money      uint32    :offset-assert 4)
   (fuel-cell  uint32    :offset-assert 8)
   (health     uint32    :offset-assert 12)
   (buzzers    uint32    :offset-assert 16)
   (power      uint32    :offset-assert 20)
   (bike-speed uint32    :offset-assert 24)
   (bike-heat  uint32    :offset-assert 28)
   (money-all  uint32    :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; progress-h
(deftype count-info (structure)
  ((money-count  int32  :offset-assert 0)
   (buzzer-count int32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; progress-h
(deftype game-count-info (basic)
  ((length int32            :offset-assert 4)
   (data   count-info :inline :dynamic :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; progress-h
; (deftype task-info-data (basic)
;   ((task-id                  uint8     :offset-assert 4)
;    (task-name                UNKNOWN 4 :offset-assert 8)
;    (text-index-when-resolved int32     :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; progress-h
; (deftype level-tasks-info (basic)
;   ((level-name-id     uint32    :offset-assert 4)
;    (text-group-index  int32     :offset-assert 8)
;    (nb-of-tasks       int32     :offset-assert 12)
;    (buzzer-task-index int32     :offset-assert 16)
;    (task-info         UNKNOWN 8 :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x34
;   :flag-assert         #x900000034
;   )

;; progress-h
(deftype game-option (basic)
  ((option-type     uint64  :offset-assert 8)
   (name            uint32  :offset-assert 16)
   (scale           basic   :offset-assert 20)
   (param1          float   :offset-assert 24)
   (param2          float   :offset-assert 28)
   (param3          int32   :offset-assert 32)
   (value-to-modify uint32  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; progress-h
(deftype progress (process)
  ((~Tcurrent-debug-string         int32           :offset-assert 112)
   (~Tcurrent-debug-language       int32           :offset-assert 116)
   (~Tcurrent-debug-group          int32           :offset-assert 120)
   (~Tin-out-position              int32           :offset-assert 124)
   (~Tdisplay-state                uint64          :offset-assert 128)
   (~Tnext-display-state           uint64          :offset-assert 136)
   (~Toption-index                 int32           :offset-assert 144)
   (~Tselected-option              basic           :offset-assert 148)
   (~Tcompletion-percentage        float           :offset-assert 152)
   (~Tready-to-run                 basic           :offset-assert 156)
   (~Tdisplay-level-index          int32           :offset-assert 160)
   (~Tnext-level-index             int32           :offset-assert 164)
   (~Ttask-index                   int32           :offset-assert 168)
   (~Tin-transition                basic           :offset-assert 172)
   (~Tlast-in-transition           basic           :offset-assert 176)
   (~Tforce-transition             basic           :offset-assert 180)
   (~Tstat-transition              basic           :offset-assert 184)
   (~Tlevel-transition             int32           :offset-assert 188)
   (~Tlanguage-selection           uint64          :offset-assert 192)
   (~Tlanguage-direction           basic           :offset-assert 200)
   (~Tlanguage-transition          basic           :offset-assert 204)
   (~Tlanguage-x-offset            int32           :offset-assert 208)
   (~Tsides-x-scale                float           :offset-assert 212)
   (~Tsides-y-scale                float           :offset-assert 216)
   (~Tleft-x-offset                int32           :offset-assert 220)
   (~Tright-x-offset               int32           :offset-assert 224)
   (~Tbutton-scale                 float           :offset-assert 228)
   (~Tslot-scale                   float           :offset-assert 232)
   (~Tleft-side-x-scale            float           :offset-assert 236)
   (~Tleft-side-y-scale            float           :offset-assert 240)
   (~Tright-side-x-scale           float           :offset-assert 244)
   (~Tright-side-y-scale           float           :offset-assert 248)
   (~Tsmall-orb-y-offset           int32           :offset-assert 252)
   (~Tbig-orb-y-offset             int32           :offset-assert 256)
   (~Ttransition-offset            int32           :offset-assert 260)
   (~Ttransition-offset-invert     int32           :offset-assert 264)
   (~Ttransition-percentage        float           :offset-assert 268)
   (~Ttransition-percentage-invert float           :offset-assert 272)
   (~Ttransition-speed             float           :offset-assert 276)
   (~Ttotal-nb-of-power-cells      int32           :offset-assert 280)
   (~Ttotal-nb-of-orbs             int32           :offset-assert 284)
   (~Ttotal-nb-of-buzzers          int32           :offset-assert 288)
   (~Tcard-info                    mc-slot-info    :offset-assert 292)
   (~Tlast-option-index-change     uint64          :offset-assert 296)
   (~Tvideo-mode-timeout           uint64          :offset-assert 304)
   (pad uint8 :offset 731)
   ; (~Tdisplay-state-stack          UNKNOWN      5  :offset-assert 312)
   ; (~Toption-index-stack           UNKNOWN      5  :offset-assert 352)
   ; (~Tdisplay-state-pos            int32           :offset-assert 372)
   ; (~Tnb-of-icons                  int32           :offset-assert 376)
   ; (~Ticons                        UNKNOWN      6  :offset-assert 380)
   ; (~Tmax-nb-of-particles          int32           :offset-assert 404)
   ; (~Tnb-of-particles              int32           :offset-assert 408)
   ; (~Tparticles                    UNKNOWN      40 :offset-assert 412)
   ; (~Tparticle-state               UNKNOWN      40 :offset-assert 572)
   )
  :method-count-assert 59
  :size-assert         #x2dc
  :flag-assert         #x3b000002dc
  ;; inherited inspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    (dummy-56 () none 56)
    (dummy-57 () none 57)
    (dummy-58 () none 58)
    )
  )

;; rpc-h
(deftype rpc-buffer (basic)
  ((elt-size  uint32           :offset-assert 4)
   (elt-count uint32           :offset-assert 8)
   (elt-used  uint32           :offset-assert 12)
   (busy      basic            :offset-assert 16)
   (base      pointer          :offset-assert 20)
   (data      uint8   :dynamic :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
    (new (symbol type uint uint) rpc-buffer 0)
    )
  )

;; rpc-h
(deftype rpc-buffer-pair (basic)
  ((buffer           rpc-buffer 2 :offset-assert 4)
   (current          rpc-buffer   :offset-assert 12)
   (last-recv-buffer pointer      :offset-assert 16)
   (rpc-port         int32     :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (new (symbol type uint uint int) rpc-buffer-pair 0)
    (call (rpc-buffer-pair uint pointer uint) int 9)
    (add-element (rpc-buffer-pair) pointer 10)
    (decrement-elt-used (rpc-buffer-pair) int 11)
    (sync (rpc-buffer-pair symbol) int 12)
    (check-busy (rpc-buffer-pair) symbol 13)
    (pop-last-received (rpc-buffer-pair) pointer 14)
    )
  )

; ;; path-h
; (deftype path-control (basic)
;   ((flags      uint32         :offset-assert 4)
;    (name       basic          :offset-assert 8)
;    (process    basic          :offset-assert 12)
;    (curve      curve  :inline :offset-assert 16)
;    (num-cverts int32          :offset-assert 20)
;    (cverts     uint32         :offset-assert 16)
;    )
;   :method-count-assert 21
;   :size-assert         #x24
;   :flag-assert         #x1500000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; path-h
; (deftype curve-control (path-control)
;   ((flags      uint32         :offset-assert 4)
;    (name       basic          :offset-assert 8)
;    (process    basic          :offset-assert 12)
;    (curve      curve  :inline :offset-assert 16)
;    (num-cverts int32          :offset-assert 20)
;    (cverts     uint32         :offset-assert 16)
;    )
;   :method-count-assert 21
;   :size-assert         #x24
;   :flag-assert         #x1500000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

;; navigate-h
(deftype nav-poly (structure)
  ((id       uint8     :offset-assert 0)
   (vertex   uint8 3 :offset-assert 1)
   (adj-poly uint8 3 :offset-assert 4)
   (pat      uint8     :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; navigate-h
(deftype nav-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; navigate-h
(deftype nav-sphere (structure)
  ((trans sphere :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; navigate-h
(deftype nav-ray (structure)
  ((current-pos  vector   :inline :offset-assert 0)
   (dir          vector   :inline :offset-assert 16)
   (dest-pos     vector   :inline :offset-assert 32)
   (current-poly nav-poly         :offset-assert 48)
   (next-poly    nav-poly         :offset-assert 52)
   (len          float           :offset-assert 56) ;; meters
   (last-edge    int8             :offset-assert 60)
   (terminated   basic            :offset-assert 64)
   (reached-dest basic            :offset-assert 68)
   (hit-boundary basic            :offset-assert 72)
   (hit-gap      basic            :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; navigate-h
; (deftype nav-route-portal (structure)
;   ((next-poly  nav-poly   :offset-assert 0)
;    (vertex     UNKNOWN  2 :offset-assert 4)
;    (edge-index int8       :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #xd
;   :flag-assert         #x90000000d
;   )

;; navigate-h
(deftype clip-travel-vector-to-mesh-return-info (structure)
  ((found-boundary  basic            :offset-assert 0)
   (intersection    vector   :inline :offset-assert 16)
   (boundary-normal vector   :inline :offset-assert 32)
   (prev-normal     vector   :inline :offset-assert 48)
   (next-normal     vector   :inline :offset-assert 64)
   (poly            nav-poly         :offset-assert 80)
   (gap-poly        nav-poly         :offset-assert 84)
   (edge            int32            :offset-assert 88)
   (vert-prev       vector   :inline :offset-assert 96)
   (vert-0          vector   :inline :offset-assert 112)
   (vert-1          vector   :inline :offset-assert 128)
   (vert-next       vector   :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

; ;; navigate-h
; (deftype nav-node (structure)
;   ((center-x      float           :offset-assert 0)
;    (center-y      float           :offset-assert 4)
;    (center-z      float           :offset-assert 8)
;    (type          uint16          :offset-assert 12)
;    (parent-offset uint16          :offset-assert 14)
;    (center        vector  :inline :offset-assert 0)
;    (radius-x      float           :offset-assert 16)
;    (radius-y      float           :offset-assert 20)
;    (radius-z      float           :offset-assert 24)
;    (left-offset   uint16          :offset-assert 28)
;    (right-offset  uint16          :offset-assert 30)
;    (num-tris      uint32          :offset-assert 28)
;    (radius        vector  :inline :offset-assert 16)
;    (scale-x       float           :offset-assert 32)
;    (first-tris    UNKNOWN 4       :offset-assert 36)
;    (scale-z       float           :offset-assert 40)
;    (last-tris     UNKNOWN 4       :offset-assert 44)
;    (scale         vector  :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; navigate-h
(deftype nav-lookup-elem (structure)
  ((vec         vector :inline :offset-assert 0)
   (y-thresh    float          :offset 12)
   (time        uint32         :offset-assert 16)
   (node-offset uint32         :offset-assert 20)
   (lookup-type uint8          :offset-assert 24)
   (poly-ind    uint8          :offset-assert 25)
   (dummy0      uint16         :offset-assert 26)
   (dummy       uint32         :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; navigate-h
; (deftype nav-mesh (basic)
;   ((user-list           basic           :offset-assert 4)
;    (poly-lookup-history UNKNOWN 2       :offset-assert 8)
;    (debug-time          uint8           :offset-assert 10)
;    (static-sphere-count uint8           :offset-assert 11)
;    (static-sphere       uint32          :offset-assert 12)
;    (bounds              sphere  :inline :offset-assert 16)
;    (origin              vector  :inline :offset-assert 32)
;    (cache               UNKNOWN 4       :offset-assert 48)
;    (node-count          int32           :offset-assert 176)
;    (nodes               uint32          :offset-assert 180)
;    (vertex-count        int32           :offset-assert 184)
;    (vertex              uint32          :offset-assert 188)
;    (poly-count          int32           :offset-assert 192)
;    (poly                uint32          :offset-assert 196)
;    (route               uint32          :offset-assert 200)
;    )
;   :method-count-assert 30
;   :size-assert         #xcc
;   :flag-assert         #x1e000000cc
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

;; navigate-h
(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert 0)
   (intersect vector :inline :offset-assert 16)
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; navigate-h
(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert 0)
   (poly nav-poly         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; navigate-h
; (deftype nav-control (basic)
;   ((flags               uint32            :offset-assert 4)
;    (process             basic             :offset-assert 8)
;    (shape               basic             :offset-assert 12)
;    (mesh                basic             :offset-assert 16)
;    (gap-event           basic             :offset-assert 20)
;    (block-event         basic             :offset-assert 24)
;    (current-poly        nav-poly          :offset-assert 28)
;    (next-poly           nav-poly          :offset-assert 32)
;    (target-poly         nav-poly          :offset-assert 36)
;    (portal              UNKNOWN  2        :offset-assert 40)
;    (nearest-y-threshold meters            :offset-assert 48)
;    (event-temp          vector   :inline  :offset-assert 64)
;    (old-travel          vector   :inline  :offset-assert 80)
;    (blocked-travel      vector   :inline  :offset-assert 96)
;    (prev-pos            vector   :inline  :offset-assert 112)
;    (extra-nav-sphere    vector   :inline  :offset-assert 128)
;    (travel              vector   :inline  :offset-assert 144)
;    (target-pos          vector   :inline  :offset-assert 160)
;    (destination-pos     vector   :inline  :offset-assert 176)
;    (block-time          uint64            :offset-assert 192)
;    (block-count         float             :offset-assert 200)
;    (user-poly           nav-poly          :offset-assert 204)
;    (nav-cull-radius     float             :offset-assert 208)
;    (num-spheres         int16             :offset-assert 212)
;    (max-spheres         int16             :offset-assert 214)
;    (sphere              UNKNOWN  :dynamic :offset-assert 224)
;    )
;   :method-count-assert 36
;   :size-assert         #xe0
;   :flag-assert         #x24000000e0
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     )
;   )

;; load-dgo
(deftype load-dgo-msg (structure)
  ((rsvd    uint16   :offset-assert 0)
   (result  uint16   :offset-assert 2)
   (b1      uint32   :offset-assert 4)
   (b2      uint32   :offset-assert 8)
   (bt      uint32   :offset-assert 12)
   ;(name    uint128  :offset-assert 16)
   (name uint8 16 :offset-assert 16)
   (address uint32   :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; load-dgo
(deftype load-chunk-msg (structure)
  ((rsvd     uint16     :offset-assert 0)
   (result   uint16     :offset-assert 2)
   (address  pointer    :offset-assert 4)
   (section  uint32     :offset-assert 8)
   (maxlen   uint32     :offset-assert 12)
   (id       uint32     :offset 4)
   (basename uint8 48 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; load-dgo
(deftype dgo-header (structure)
  ((length   uint32     :offset-assert 0)
   (rootname uint8 60 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

; ;; ramdisk
; (deftype ramdisk-rpc-fill (structure)
;   ((rsvd1    int32     :offset-assert 0)
;    (ee-id    int32     :offset-assert 4)
;    (rsvd2    UNKNOWN 2 :offset-assert 8)
;    (filename uint128   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; ramdisk
(deftype ramdisk-rpc-load (structure)
  ((rsvd   int32   :offset-assert 0)
   (ee-id  int32   :offset-assert 4)
   (offset uint32  :offset-assert 8)
   (length uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; ramdisk
(deftype ramdisk-rpc-load-to-ee (structure)
  ((rsvd     int32    :offset-assert 0)
   (addr     int32    :offset-assert 4)
   (offset   int32    :offset-assert 8)
   (length   int32    :offset-assert 12)
   (filename uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; gsound
; (deftype sound-iop-info (basic)
;   ((frame       uint32     :offset-assert 16)
;    (strpos      int32      :offset-assert 20)
;    (str-id      uint32     :offset-assert 24)
;    (str-id-sign int32      :offset-assert 24)
;    (freemem     uint32     :offset-assert 28)
;    (chinfo      UNKNOWN 48 :offset-assert 32)
;    (freemem2    uint32     :offset-assert 80)
;    (nocd        uint32     :offset-assert 84)
;    (dirtycd     uint32     :offset-assert 88)
;    (diskspeed   UNKNOWN 2  :offset-assert 92)
;    (lastspeed   uint32     :offset-assert 100)
;    (dupseg      int32      :offset-assert 104)
;    (times       UNKNOWN 41 :offset-assert 108)
;    (times-seq   uint32     :offset-assert 272)
;    )
;   :method-count-assert 9
;   :size-assert         #x114
;   :flag-assert         #x900000114
;   )

; ;; gsound
; (deftype flava-table-row (structure)
;   ((music basic      :offset-assert 0)
;    (flava UNKNOWN 50 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x36
;   :flag-assert         #x900000036
;   )

; ;; gsound
; (deftype flava-table (basic)
;   ((row   UNKNOWN 20 :offset-assert 4)
;    (count int32      :offset-assert 1284)
;    )
;   :method-count-assert 9
;   :size-assert         #x508
;   :flag-assert         #x900000508
;   )

;; joint
; (deftype joint-anim-matrix (joint-anim)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; joint
; (deftype joint-anim-transformq (joint-anim)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

; ;; joint
; (deftype art-joint-anim (art-element)
;   ()
;   :method-count-assert 13
;   :size-assert         #x30
;   :flag-assert         #xd00000030
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; joint
; (deftype art-group (art)
;   ()
;   :method-count-assert 15
;   :size-assert         #x20
;   :flag-assert         #xf00000020
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; cylinder
; (deftype cylinder-verts (structure)
;   ((vert UNKNOWN 24 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

; ;; cylinder
; (deftype cylinder-flat-verts (structure)
;   ((vert UNKNOWN 10 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #xa0
;   :flag-assert         #x9000000a0
;   )

; ;; sprite
; (deftype sprite-header (structure)
;   ((header      UNKNOWN 1 :offset-assert 0)
;    (num-sprites int32     :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; sprite
; (deftype sprite-hvdf-data (structure)
;   ((data UNKNOWN 76 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c0
;   :flag-assert         #x9000004c0
;   )

; ;; sprite
; (deftype sprite-hvdf-control (structure)
;   ((alloc UNKNOWN 76 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c
;   :flag-assert         #x90000004c
;   )

; ;; sprite
; (deftype sprite-aux-list (basic)
;   ((num-entries int32     :offset-assert 4)
;    (entry       int32     :offset-assert 8)
;    (data        UNKNOWN 1 :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; sprite
; (deftype sprite-aux-list (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

; ;; sprite
; (deftype sprite-frame-data (structure)
;   ((data               UNKNOWN      41      :offset-assert 0)
;    (cdata              UNKNOWN      16      :offset-assert 0)
;    (fdata              UNKNOWN      25      :offset-assert 256)
;    (xy-array           UNKNOWN      8       :offset-assert 0)
;    (st-array           UNKNOWN      4       :offset-assert 128)
;    (xyz-array          UNKNOWN      4       :offset-assert 192)
;    (hmge-scale         vector       :inline :offset-assert 256)
;    (consts             vector       :inline :offset-assert 272)
;    (pfog0              float                :offset-assert 272)
;    (deg-to-rad         float                :offset-assert 276)
;    (min-scale          float                :offset-assert 280)
;    (inv-area           float                :offset-assert 284)
;    (adgif-giftag       qword        :inline :offset-assert 288)
;    (sprite-2d-giftag   qword        :inline :offset-assert 304)
;    (sprite-2d-giftag-2 qword        :inline :offset-assert 320)
;    (sincos-01          vector       :inline :offset-assert 336)
;    (sincos-23          vector       :inline :offset-assert 352)
;    (sincos-45          vector       :inline :offset-assert 368)
;    (sincos-67          vector       :inline :offset-assert 384)
;    (sincos-89          vector       :inline :offset-assert 400)
;    (basis-x            vector       :inline :offset-assert 416)
;    (basis-y            vector       :inline :offset-assert 432)
;    (sprite-3d-giftag   qword        :inline :offset-assert 448)
;    (screen-shader      adgif-shader :inline :offset-assert 464)
;    (clipped-giftag     qword        :inline :offset-assert 544)
;    (inv-hmge-scale     vector       :inline :offset-assert 560)
;    (stq-offset         vector       :inline :offset-assert 576)
;    (stq-scale          vector       :inline :offset-assert 592)
;    (rgba-plain         qword        :inline :offset-assert 608)
;    (warp-giftag        qword        :inline :offset-assert 624)
;    (fog-clamp          vector       :inline :offset-assert 640)
;    (fog-min            float                :offset-assert 640)
;    (fog-max            float                :offset-assert 644)
;    (max-scale          float                :offset-assert 648)
;    )
;   :method-count-assert 9
;   :size-assert         #x290
;   :flag-assert         #x900000290
;   )

; ;; sprite-distort
; (deftype sprite-distorter-sine-tables (basic)
;   ((aspx   float           :offset-assert 4)
;    (aspy   float           :offset-assert 8)
;    (entry  UNKNOWN 128     :offset-assert 16)
;    (ientry UNKNOWN 9       :offset-assert 2064)
;    (giftag qword   :inline :offset-assert 2208)
;    (color  qword   :inline :offset-assert 2224)
;    )
;   :method-count-assert 9
;   :size-assert         #x8c0
;   :flag-assert         #x9000008c0
;   )

; ;; debug-sphere
; (deftype debug-sphere-table (basic)
;   ((point UNKNOWN 300 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x12d0
;   :flag-assert         #x9000012d0
;   )

;; debug
(deftype debug-line (structure)
  ((flags  int32          :offset-assert 0)
   (bucket int32          :offset-assert 4)
   (v1     vector :inline :offset-assert 16)
   (v2     vector :inline :offset-assert 32)
   (color  uint32         :offset-assert 48)
   (mode   basic          :offset-assert 52)
   (color2 uint32         :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

;; debug
(deftype debug-text-3d (structure)
  ((flags  int32            :offset-assert 0)
   (bucket int32            :offset-assert 4)
   (pos    vector   :inline :offset-assert 16)
   (color  uint64           :offset-assert 32)
   (offset vector2h :inline :offset-assert 40)
   (str    basic            :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; debug
(deftype debug-tracking-thang (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; merc-blend-shape
(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert 0)
   (vtx-count uint32                   :offset-assert 16)
   (overlap   uint32                   :offset-assert 20)
   (lump-dest uint32                   :offset-assert 24)
   (lump-qwc  uint32                   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; merc-blend-shape
; (deftype blerc-block (structure)
;   ((output UNKNOWN            848     :offset-assert 0)
;    (header blerc-block-header :inline :offset-assert 848)
;    )
;   :method-count-assert 9
;   :size-assert         #x370
;   :flag-assert         #x900000370
;   )

; ;; merc-blend-shape
; (deftype blerc-dcache (structure)
;   ((repl-mult UNKNOWN 40 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x280
;   :flag-assert         #x900000280
;   )

;; merc-blend-shape
(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert 0)
   (next             uint32  :offset-assert 4)
   (min-val          int16   :offset-assert 8)
   (max-val          int16   :offset-assert 10)
   (fragment-count   int32   :offset-assert 12)
   (vtx-count        int32   :offset-assert 16)
   (target-vtx-count int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

; ;; merc-blend-shape
; (deftype blerc-context (structure)
;   ((block-a blerc-block :inline :offset-assert 0)
;    (dummy   UNKNOWN     7312    :offset-assert 880)
;    (block-b blerc-block :inline :offset-assert 8192)
;    )
;   :method-count-assert 9
;   :size-assert         #x2370
;   :flag-assert         #x900002370
;   )

; ;; merc
; (deftype merc-fragment-control (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;;  too many basic blocks
;   )

; ;; merc
; (deftype merc-ctrl (art-element)
;   ()
;   :method-count-assert 13
;   :size-assert         #x70
;   :flag-assert         #xd00000070
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; ripple
; (deftype ripple-request (structure)
;   ((waveform basic        :offset-assert 0)
;    (effect   merc-effect  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; ripple
; (deftype ripple-globals (structure)
;   ((count    int32      :offset-assert 0)
;    (requests UNKNOWN 16 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

; ;; bones
; (deftype bone-calculation (structure)
;   ((flags               uint16            :offset-assert 0)
;    (num-bones           uint16            :offset-assert 2)
;    (matrix-area         uint32            :offset-assert 4)
;    (joints              uint32            :offset-assert 8)
;    (bones               uint32            :offset-assert 12)
;    (ripple-scale        float             :offset-assert 16)
;    (ripple-y-scale      float             :offset-assert 20)
;    (ripple-normal-scale float             :offset-assert 24)
;    (ripple-area         uint32            :offset-assert 28)
;    (next                bone-calculation  :offset-assert 32)
;    (dummy-1             uint32            :offset-assert 36)
;    (dummy-2             uint32            :offset-assert 40)
;    (dummy-3             uint32            :offset-assert 44)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; bones
; (deftype bone-calculation-list (structure)
;   ((first bone-calculation  :offset-assert 0)
;    (next  bone-calculation  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; bones
; (deftype texscroll-globals (structure)
;   ((requests int32      :offset-assert 0)
;    (effects  UNKNOWN 32 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

;; bones
(deftype merc-effect-bucket-info (structure)
  ((color-fade    uint32  :offset-assert 0)
   (use-mercneric uint8   :offset-assert 4)
   (ignore-alpha  uint8   :offset-assert 5)
   (pad0          uint8   :offset-assert 6)
   (pad1          uint8   :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; bones
; (deftype merc-bucket-info (structure)
;   ((light                       vu-lights :inline :offset-assert 0)
;    (needs-clip                  int32             :offset-assert 112)
;    (need-mercprime-if-merc      int32             :offset-assert 116)
;    (must-use-mercneric-for-clip int32             :offset-assert 120)
;    (effect                      UNKNOWN   16      :offset-assert 124)
;    )
;   :method-count-assert 9
;   :size-assert         #xfc
;   :flag-assert         #x9000000fc
;   )

;; generic-merc
(deftype invinitdata (structure)
  ((count     uint8   :offset-assert 0)
   (init-data uint8   :offset-assert 1)
   (init-addr uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

; ;; generic-tie
; (deftype gsf-vertex (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   ;; bad type dec string: [~8x] gsf-vertex~%
;   )

;; shadow-cpu
(deftype shadow-stats (structure)
  ((num-single-tris  uint32  :offset-assert 0)
   (num-double-tris  uint32  :offset-assert 4)
   (num-single-edges uint32  :offset-assert 8)
   (num-double-edges uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; shadow-cpu
(deftype shadow-dcache (structure)
  ((vtx-table              uint32                :offset-assert 0)
   (single-edge-table      uint32                :offset-assert 4)
   (double-edge-table      uint32                :offset-assert 8)
   (double-tri-table       uint32                :offset-assert 12)
   (dcache-top             uint32                :offset-assert 16)
   (num-facing-single-tris uint32                :offset-assert 20)
   (num-single-edges       uint32                :offset-assert 24)
   (num-double-edges       uint32                :offset-assert 28)
   (single-tri-list        uint32                :offset-assert 32)
   (single-edge-list       uint32                :offset-assert 36)
   (double-edge-list       uint32                :offset-assert 40)
   (ptr-dual-verts         uint32                :offset-assert 44)
   (stats                  shadow-stats :inline  :offset-assert 48)
   (center                 vector       :inline  :offset-assert 64)
   (plane                  vector       :inline  :offset-assert 80)
   (top-plane              vector       :inline  :offset-assert 96)
   (near-plane             vector       :inline  :offset-assert 112)
   (light-dir              vector       :inline  :offset-assert 128)
   (vtx-min                vector       :inline  :offset-assert 144)
   (data                   uint8      :dynamic :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

; ;; shadow-vu1
; (deftype shadow-vu1-constants (structure)
;   ((hmgescale vector     :inline :offset-assert 0)
;    (invhscale vector     :inline :offset-assert 16)
;    (texoffset vector     :inline :offset-assert 32)
;    (texscale  vector     :inline :offset-assert 48)
;    (hvdfoff   vector     :inline :offset-assert 64)
;    (fog       vector     :inline :offset-assert 80)
;    (clrs      UNKNOWN    2       :offset-assert 96)
;    (adgif     gs-gif-tag :inline :offset-assert 128)
;    (texflush  ad-cmd     :inline :offset-assert 144)
;    (flush     ad-cmd     :inline :offset-assert 160)
;    (trigif    gs-gif-tag :inline :offset-assert 176)
;    (quadgif   gs-gif-tag :inline :offset-assert 192)
;    )
;   :method-count-assert 9
;   :size-assert         #xd0
;   :flag-assert         #x9000000d0
;   )

; ;; shadow-vu1
; (deftype shadow-vu1-gifbuf-template (structure)
;   ((adgif   gs-gif-tag :inline :offset-assert 0)
;    (ad      ad-cmd     :inline :offset-assert 16)
;    (flush   ad-cmd     :inline :offset-assert 32)
;    (trigif  gs-gif-tag :inline :offset-assert 48)
;    (quadgif gs-gif-tag :inline :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x50
;   :flag-assert         #x900000050
;   )

;; decomp
(deftype huf-dictionary-node (structure)
  ((zero uint16  :offset-assert 0)
   (one  uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

; ;; draw-node
; (deftype drawable-inline-array-node (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; shrubbery
; (deftype prototype-shrubbery (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tfrag
; (deftype drawable-inline-array-tfrag (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype drawable-inline-array-instance-tie (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype prototype-tie (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype tie-consts (structure)
;   ((data      UNKNOWN 24      :offset-assert 0)
;    (vector    UNKNOWN 6       :offset-assert 0)
;    (quads     UNKNOWN 6       :offset-assert 0)
;    (adgif     qword   :inline :offset-assert 0)
;    (strgif    qword   :inline :offset-assert 16)
;    (extra     qword   :inline :offset-assert 32)
;    (gifbufs   qword   :inline :offset-assert 48)
;    (clrbufs   qword   :inline :offset-assert 64)
;    (misc      qword   :inline :offset-assert 80)
;    (atestgif  qword   :inline :offset-assert 96)
;    (atest     UNKNOWN 2       :offset-assert 112)
;    (atest-tra ad-cmd  :inline :offset-assert 112)
;    (atest-def ad-cmd  :inline :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x90
;   :flag-assert         #x900000090
;   )

; ;; tie-near
; (deftype tie-near-consts (structure)
;   ((extra     qword   :inline :offset-assert 0)
;    (gifbufs   qword   :inline :offset-assert 16)
;    (clrbufs   qword   :inline :offset-assert 32)
;    (adgif     qword   :inline :offset-assert 48)
;    (strgif    qword   :inline :offset-assert 64)
;    (fangif    qword   :inline :offset-assert 80)
;    (hvdfoffs  vector  :inline :offset-assert 96)
;    (invhscale vector  :inline :offset-assert 112)
;    (guard     vector  :inline :offset-assert 128)
;    (atest     UNKNOWN 2       :offset-assert 144)
;    (atest-tra ad-cmd  :inline :offset-assert 144)
;    (atest-def ad-cmd  :inline :offset-assert 160)
;    )
;   :method-count-assert 9
;   :size-assert         #xb0
;   :flag-assert         #x9000000b0
;   )

;; tie-methods
(deftype tie-instance-debug (structure)
  ((max-instance uint32  :offset-assert 0)
   (min-instance uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; sparticle-launcher
; (deftype sparticle-birthinfo (structure)
;   ((sprite       uint32    :offset-assert 0)
;    (anim         int32     :offset-assert 4)
;    (anim-speed   float     :offset-assert 8)
;    (birth-func   basic     :offset-assert 12)
;    (joint-ppoint int32     :offset-assert 16)
;    (num-to-birth float     :offset-assert 20)
;    (sound        basic     :offset-assert 24)
;    (dataf        UNKNOWN 1 :offset-assert 0)
;    (data         UNKNOWN 1 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; sparticle-launcher
; (deftype sparticle-launcher (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

;; sparticle-launcher
(deftype sp-queued-launch-particles (structure)
  ((sp-system   basic          :offset-assert 0)
   (sp-launcher basic          :offset-assert 4)
   (pos         vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; sparticle-launcher
; (deftype sp-launch-queue (basic)
;   ((in-use int32      :offset-assert 4)
;    (queue  UNKNOWN 32 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x410
;   :flag-assert         #x900000410
;   )

; ;; sparticle-launcher
; (deftype particle-adgif-cache (basic)
;   ((used    int32           :offset-assert 4)
;    (last    uint16          :offset-assert 8)
;    (lastgif adgif-shader    :offset-assert 12)
;    (tidhash UNKNOWN      80 :offset-assert 16)
;    (spadgif UNKNOWN      80 :offset-assert 176)
;    )
;   :method-count-assert 9
;   :size-assert         #x19b0
;   :flag-assert         #x9000019b0
;   )

; ;; loader
; (deftype load-dir (basic)
;   ()
;   :method-count-assert 11
;   :size-assert         #x10
;   :flag-assert         #xb00000010
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

;; task-control-h
(deftype task-cstage (structure)
  ((game-task uint8   :offset-assert 0)
   (status    uint64  :offset-assert 8)
   (flags     uint8   :offset-assert 16)
   (condition basic   :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; task-control-h
(deftype task-control (basic)
  ((current-stage int16  :offset-assert 4)
   (stage         basic  :offset-assert 8)
   )
  :method-count-assert 19
  :size-assert         #xc
  :flag-assert         #x130000000c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    )
  )

;; task-control-h
(deftype ambient-control (structure)
  ((last-ambient-time uint64  :offset-assert 0)
   (last-ambient      basic   :offset-assert 8)
   (last-ambient-id   uint32  :offset-assert 12)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; task-control-h
(deftype process-taskable (process-drawable)
  ((~Ttasks                basic                   :offset-assert 176)
   (~Tquery                gui-query       :inline :offset-assert 180)
   (~Told-target-pos       transformq      :inline :offset-assert 208)
   (~Tcell-for-task        uint8                   :offset-assert 256)
   (~Tcell-x               uint64                  :offset-assert 264)
   (~Tcam-joint-index      int32                   :offset-assert 272)
   (~Tskippable            basic                   :offset-assert 276)
   (~Tblend-on-exit        basic                   :offset-assert 280)
   (~Tcamera               uint64                  :offset-assert 288)
   (~Twill-talk            basic                   :offset-assert 296)
   (~Ttalk-message         uint32                  :offset-assert 300)
   (~Tlast-talk            uint64                  :offset-assert 304)
   (~Tbounce-away          basic                   :offset-assert 312)
   (~Tambient              ambient-control :inline :offset-assert 320)
   (~Tcenter-joint-index   int32                   :offset-assert 336)
   (~Tdraw-bounds-y-offset float                   :offset-assert 340)
   (~Tneck-joint-index     int32                   :offset-assert 344)
   (~Tfuel-cell-anim       basic                   :offset-assert 348)
   (~Tsound-flava          uint8                   :offset-assert 352)
   (~Thave-flava           basic                   :offset-assert 356)
   (~Tmusic                basic                   :offset-assert 360)
   (~Thave-music           basic                   :offset-assert 364)
   (~Tbeen-kicked          basic                   :offset-assert 368)
   (~Tcur-trans-hook       basic                   :offset-assert 372)
   (~Tshadow-backup        basic                   :offset-assert 376)
   )
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    )
  )

; ;; game-save
; (deftype game-save-tag (structure)
;   ((user-object UNKNOWN 2 :offset-assert 0)
;    (user-uint64 uint64    :offset-assert 0)
;    (user-float0 float     :offset-assert 0)
;    (user-float  UNKNOWN 2 :offset-assert 0)
;    (user-int32  UNKNOWN 2 :offset-assert 0)
;    (user-uint32 UNKNOWN 2 :offset-assert 0)
;    (user-int16  UNKNOWN 4 :offset-assert 0)
;    (user-uint16 UNKNOWN 4 :offset-assert 0)
;    (user-int8   UNKNOWN 8 :offset-assert 0)
;    (user-int80  int8      :offset-assert 0)
;    (user-int81  int8      :offset-assert 1)
;    (user-uint8  UNKNOWN 8 :offset-assert 0)
;    (elt-count   int32     :offset-assert 8)
;    (elt-size    uint16    :offset-assert 12)
;    (elt-type    uint16    :offset-assert 14)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; game-save
; (deftype game-save (basic)
;   ((version               int32            :offset-assert 4)
;    (allocated-length      int32            :offset-assert 8)
;    (length                int32            :offset-assert 12)
;    (info-int32            UNKNOWN 16       :offset-assert 16)
;    (info-int8             UNKNOWN 64       :offset-assert 16)
;    (level-index           int32            :offset-assert 16)
;    (fuel-cell-count       float            :offset-assert 20)
;    (money-count           float            :offset-assert 24)
;    (buzzer-count          float            :offset-assert 28)
;    (completion-percentage float            :offset-assert 32)
;    (minute                uint8            :offset-assert 36)
;    (hour                  uint8            :offset-assert 37)
;    (week                  uint8            :offset-assert 38)
;    (day                   uint8            :offset-assert 39)
;    (month                 uint8            :offset-assert 40)
;    (year                  uint8            :offset-assert 41)
;    (new-game              int32            :offset-assert 44)
;    (tag                   UNKNOWN :dynamic :offset-assert 80)
;    )
;   :method-count-assert 12
;   :size-assert         #x50
;   :flag-assert         #xc00000050
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; game-save
; (deftype game-save (basic)
;   ()
;   :method-count-assert 12
;   :size-assert         #x50
;   :flag-assert         #xc00000050
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

;; game-save
(deftype auto-save (process)
  ((~Tcard       int32                :offset-assert 112)
   (~Tslot       int32                :offset-assert 116)
   (~Twhich      int32                :offset-assert 120)
   (~Tbuffer     kheap                :offset-assert 124)
   (~Tmode       basic                :offset-assert 128)
   (~Tresult     uint32               :offset-assert 132)
   (~Tsave       basic                :offset-assert 136)
   (~Tinfo       mc-slot-info :inline :offset-assert 140)
   (~Tnotify     uint64               :offset-assert 440)
   (~Tstate-time uint64               :offset-assert 448)
   (~Tpart       basic                :offset-assert 456)
   )
  :heap-base #x160
  :method-count-assert 23
  :size-assert         #x1cc
  :flag-assert         #x17016001cc
  ;; inherited inspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    )
  )

;; mood
(deftype flames-state (structure)
  ((index  uint8  :offset-assert 0)
   (time   uint8  :offset-assert 1)
   (length uint8  :offset-assert 2)
   (height uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype lightning-state (structure)
  ((val uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype light-time-state (structure)
  ((time uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype light-state (structure)
  ((fade uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype lava-state (structure)
  ((scale      float 4 :offset-assert 0)
   (time       uint8     :offset-assert 16)
   (last-index uint8     :offset-assert 17)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

;; mood
(deftype misty-states (structure)
  ((flames flames-state     :inline :offset-assert 0)
   (light0 light-state      :inline :offset-assert 4)
   (light1 light-state      :inline :offset-assert 5)
   (time0  light-time-state :inline :offset-assert 6)
   (time1  light-time-state :inline :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; mood
(deftype swamp-village2-states (structure)
  ((flames    flames-state    :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

;; mood
(deftype village1-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype jungle-states (structure)
  ((light    light-state      :inline :offset-assert 0)
   (time     light-time-state :inline :offset-assert 1)
   (one-shot uint8                    :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )

;; mood
(deftype sunken-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; mood
(deftype rolling-states (structure)
  ((light0    light-state      :inline :offset-assert 0)
   (light1    light-state      :inline :offset-assert 1)
   (light2    light-state      :inline :offset-assert 2)
   (light3    light-state      :inline :offset-assert 3)
   (time      light-time-state :inline :offset-assert 4)
   (lightning lightning-state  :inline :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

;; mood
(deftype firecanyon-states (structure)
  ((lava lava-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

;; mood
(deftype training-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; mood
(deftype maincave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype robocave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype snow-states (structure)
  ((flames   flames-state     :inline :offset-assert 0)
   (light    light-state      :inline :offset-assert 4)
   (time     light-time-state :inline :offset-assert 5)
   (one-shot uint8                    :offset-assert 6)
   (interp   float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; mood
(deftype village3-states (structure)
  ((flames    flames-state :inline :offset-assert 0)
   (scale     float                :offset-assert 4)
   (lava      lava-state   :inline :offset-assert 8)
   (lava-time float                :offset-assert 28)
   (time      uint8                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x21
  :flag-assert         #x900000021
  )

;; mood
(deftype lavatube-states (structure)
  ((lava  lava-state       :inline :offset-assert 0)
   (light light-state      :inline :offset-assert 18)
   (time  light-time-state :inline :offset-assert 19)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; mood
(deftype ogre-states (structure)
  ((lava      lava-state      :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 18)
   (lava-time float                   :offset-assert 20)
   (lava-fade float                   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; mood
(deftype finalboss-states (structure)
  ((start-time  uint64  :offset-assert 0)
   (secret-time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; mood
(deftype citadel-states (structure)
  ((flames      flames-state     :inline :offset-assert 0)
   (light       light-state      :inline :offset-assert 4)
   (time        light-time-state :inline :offset-assert 5)
   (flicker-off uint8                    :offset-assert 6)
   (flicker-on  uint8                    :offset-assert 7)
   (shield-fade float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; sky
; (deftype sky-frame-data (structure)
;   ((data              UNKNOWN 18      :offset-assert 0)
;    (world-homo-matrix matrix  :inline :offset-assert 0)
;    (hmge-scale        vector  :inline :offset-assert 64)
;    (hvdf-offset       vector  :inline :offset-assert 80)
;    (consts            vector  :inline :offset-assert 96)
;    (pfog0             float           :offset-assert 96)
;    (radius            float           :offset-assert 100)
;    (nokick            float           :offset-assert 108)
;    (strip-giftag      qword   :inline :offset-assert 112)
;    (col-adgif         qword   :inline :offset-assert 128)
;    (save              UNKNOWN 5       :offset-assert 144)
;    (sun-fan-giftag    qword   :inline :offset-assert 224)
;    (sun-strip-giftag  qword   :inline :offset-assert 240)
;    (sun-alpha         qword   :inline :offset-assert 256)
;    (sun-alpha-giftag  qword   :inline :offset-assert 272)
;    )
;   :method-count-assert 9
;   :size-assert         #x120
;   :flag-assert         #x900000120
;   )

; ;; sky-tng
; (deftype sky-vertex (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   ;; bad type dec string: sky-vertex [~X]:~%
;   )

;; load-boundary-h
(deftype lbvtx (structure)
  ((x    float           :offset-assert 0)
   (y    float           :offset-assert 4)
   (z    float           :offset-assert 8)
   (v0   uint8           :offset-assert 12)
   (v1   uint8           :offset-assert 13)
   (v2   uint8           :offset-assert 14)
   (ix   uint8           :offset-assert 15)
   (quad uint128         :offset 0)
   (v    vector  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; load-boundary-h
(deftype load-boundary-crossing-command (structure)
  ((cmd        uint8     :offset-assert 0)
   (bparm      uint8 3 :offset-assert 1)
   ;(parm       UNKNOWN 2 :offset-assert 4)
   (lev0       basic     :offset-assert 4)
   (lev1       basic     :offset-assert 8)
   (displev    basic     :offset 4)
   (dispcmd    basic     :offset 8)
   (nick       basic     :offset 4)
   (forcelev   basic     :offset 4)
   (forceonoff basic     :offset 8)
   (checkname  basic     :offset 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; load-boundary-h
(deftype load-boundary (basic)
  ((num-points uint16                                 :offset-assert 4)
   (flags      uint8                                  :offset-assert 6)
   (top-plane  float                                  :offset-assert 8)
   (bot-plane  float                                  :offset-assert 12)
   (tri-cnt    int32                                  :offset-assert 16)
   (next       basic                                  :offset-assert 20)
   (cmd-fwd    load-boundary-crossing-command :inline :offset-assert 24)
   (cmd-bwd    load-boundary-crossing-command :inline :offset-assert 36)
   (rejector   vector                         :inline :offset-assert 48)
   (data       uint128                        1       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; load-boundary
(deftype lb-editor-parms (basic)
  ((boundary basic  :offset-assert 4)
   (vertex   int32  :offset-assert 8)
   (x-origin float  :offset-assert 12)
   (z-origin float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


;;;; level

(define-extern lookup-level-info (function symbol level-load-info))
(define-extern remap-level-name (function level-load-info object))

; ;; text
; (deftype game-text-info (basic)
;   ()
;   :method-count-assert 10
;   :size-assert         #x10
;   :flag-assert         #xa00000010
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

;; collide-probe
(deftype collide-probe-stack-elem (structure)
  ((child uint32  :offset-assert 0)
   (count uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-probe
(deftype collide-probe-stack (structure)
  ((data collide-probe-stack-elem 1024 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

;; collide-mesh
(deftype sopt-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-mesh
(deftype spat-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-mesh
(deftype oot-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

; ;; collide-touch
; (deftype add-prims-touching-work (structure)
;   ((tri1 collide-tri-result  :offset-assert 0)
;    (tri2 collide-tri-result  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; collide-edge-grab
; (deftype pbhp-stack-vars (structure)
;   ((edge        collide-edge-edge         :offset-assert 0)
;    (allocated   basic                     :offset-assert 4)
;    (neg-hold-pt vector            :inline :offset-assert 16)
;    (split-vec   vector            :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; merc-death
(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert 4)
   (timer       uint8   :offset-assert 6)
   (overlap     uint8   :offset-assert 7)
   (effect      uint32  :offset-assert 8)
   (sound       basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; water-h
; (deftype water-control (basic)
;   ((flags             uint32                :offset-assert 4)
;    (process           basic                 :offset-assert 8)
;    (joint-index       int32                 :offset-assert 12)
;    (top-y-offset      float                 :offset-assert 16)
;    (ripple-size       meters                :offset-assert 20)
;    (enter-water-time  uint64                :offset-assert 24)
;    (wade-time         uint64                :offset-assert 32)
;    (on-water-time     uint64                :offset-assert 40)
;    (enter-swim-time   uint64                :offset-assert 48)
;    (swim-time         uint64                :offset-assert 56)
;    (base-height       meters                :offset-assert 64)
;    (wade-height       meters                :offset-assert 68)
;    (swim-height       meters                :offset-assert 72)
;    (surface-height    meters                :offset-assert 76)
;    (bottom-height     meters                :offset-assert 80)
;    (height            meters                :offset-assert 84)
;    (height-offset     UNKNOWN       4       :offset-assert 88)
;    (real-ocean-offset meters                :offset-assert 88)
;    (ocean-offset      meters                :offset-assert 92)
;    (bob-offset        meters                :offset-assert 96)
;    (align-offset      meters                :offset-assert 100)
;    (swim-depth        meters                :offset-assert 104)
;    (bob               smush-control :inline :offset-assert 112)
;    (volume            uint64                :offset-assert 144)
;    (bottom            UNKNOWN       2       :offset-assert 160)
;    (top               UNKNOWN       2       :offset-assert 192)
;    (enter-water-pos   vector        :inline :offset-assert 224)
;    (drip-old-pos      vector        :inline :offset-assert 240)
;    (drip-joint-index  int32                 :offset-assert 256)
;    (drip-wetness      float                 :offset-assert 260)
;    (drip-time         uint64                :offset-assert 264)
;    (drip-speed        float                 :offset-assert 272)
;    (drip-height       meters                :offset-assert 276)
;    (drip-mult         float                 :offset-assert 280)
;    )
;   :method-count-assert 17
;   :size-assert         #x11c
;   :flag-assert         #x110000011c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     )
;   )

;; water-h
(deftype water-vol (process-drawable)
  ((~Twater-height  float  :offset-assert 176) ;; meters
   (~Twade-height   float  :offset-assert 180) ;; meters
   (~Tswim-height   float  :offset-assert 184) ;; meters
   (~Tbottom-height float  :offset-assert 188) ;; meters
   (~Tattack-event  basic   :offset-assert 192)
   (~Ttarget        uint64  :offset-assert 200)
   (~Tflags         uint32  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  ;; inherited inspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

;; cam-master
(deftype camera-master-bank (basic)
  ((onscreen-head-height            float  :offset-assert 4) ;; meters
   (onscreen-foot-height            float  :offset-assert 8) ;; meters
   (target-height                   float  :offset-assert 12) ;; meters
   (up-move-to-pitch-ratio-in-air   float   :offset-assert 16)
   (down-move-to-pitch-ratio-in-air float   :offset-assert 20)
   (up-move-to-pitch-on-ground      float   :offset-assert 24)
   (down-move-to-pitch-on-ground    float   :offset-assert 28)
   (pitch-off-blend                 float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; cam-master
(deftype list-keeper (process)
  ((~Tdummy float  :offset-assert 112)
   )
  :heap-base #x10
  :method-count-assert 14
  :size-assert         #x74
  :flag-assert         #xe00100074
  ;; inherited inspect of process
  )

; ;; cam-states
; (deftype cam-eye-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-billy-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-string-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype los-dist (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype collide-los-dist-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype collide-los-result (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-stick-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-bike-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

;; cam-states-dbg
(deftype cam-point-watch-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed float    :offset-assert 8) ;; deg
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; cam-states-dbg
(deftype cam-free-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed float    :offset-assert 8) ;; deg
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; cam-states-dbg
(deftype camera-free-floating-move-info (structure)
  ((rv vector :inline :offset-assert 0)
   (tv vector :inline :offset-assert 16)
   (up vector :inline :offset-assert 32)
   (tm matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; cam-states-dbg
(deftype camera-orbit-info (structure)
  ((radius      float          :offset-assert 0)
   (rot         float          :offset-assert 4)
   (target-off  vector :inline :offset-assert 16)
   (orbit-off   vector :inline :offset-assert 32)
   (radius-lerp float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; cam-states-dbg
(deftype CAM_ORBIT-bank (basic)
  ((RADIUS_MAX        float  :offset-assert 4)
   (RADIUS_MIN        float  :offset-assert 8)
   (TARGET_OFF_ADJUST float  :offset-assert 12)
   (ORBIT_OFF_ADJUST  float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; vol-h
(deftype plane-volume (structure)
  ((volume-type  basic   :offset-assert 0)
   (point-count  int16   :offset-assert 4)
   (normal-count int16   :offset-assert 6)
   (first-point  vector  :offset-assert 8)
   (first-normal vector  :offset-assert 12)
   (num-planes   int32   :offset-assert 16)
   (plane        uint32  :offset-assert 20)
   )
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

; ;; vol-h
; (deftype vol-control (basic)
;   ((flags         uint32     :offset-assert 4)
;    (process       basic      :offset-assert 8)
;    (pos-vol-count int32      :offset-assert 12)
;    (pos-vol       UNKNOWN 32 :offset-assert 16)
;    (neg-vol-count int32      :offset-assert 784)
;    (neg-vol       UNKNOWN 32 :offset-assert 788)
;    (debug-point   basic      :offset-assert 1556)
;    (debug-normal  basic      :offset-assert 1560)
;    )
;   :method-count-assert 12
;   :size-assert         #x61c
;   :flag-assert         #xc0000061c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; cam-layout
; (deftype cam-layout-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-basic (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-item-action (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-item (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-list-item (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-list (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype volume-descriptor-array (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype cam-layout (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process) parent was UNKNOWN
;   )

; ;; cam-layout
; (deftype interp-test-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clmf-cam-flag-toggle-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-debug
; (deftype cam-dbg-scratch (structure)
;   ((linevec4w      UNKNOWN 2       :offset-assert 0)
;    (color          vector  :inline :offset-assert 32)
;    (plotvec        UNKNOWN 2       :offset-assert 48)
;    (linevec        UNKNOWN 2       :offset-assert 80)
;    (rel-vec        vector  :inline :offset-assert 112)
;    (sphere-v-start vector  :inline :offset-assert 128)
;    (sphere-v-end   vector  :inline :offset-assert 144)
;    (sphere-v-down  vector  :inline :offset-assert 160)
;    (sphere-vec     vector  :inline :offset-assert 176)
;    (crossvec       UNKNOWN 3       :offset-assert 192)
;    (bboxvec        UNKNOWN 6       :offset-assert 240)
;    (fov-vv         UNKNOWN 4       :offset-assert 336)
;    (fov-src        vector  :inline :offset-assert 400)
;    (fov-dest       vector  :inline :offset-assert 416)
;    (fov-vert       vector  :inline :offset-assert 432)
;    (fov-horz       vector  :inline :offset-assert 448)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d0
;   :flag-assert         #x9000001d0
;   )

; ;; cam-debug
; (deftype cam-debug-tri (structure)
;   ((vertex    UNKNOWN  3       :offset-assert 0)
;    (intersect vector   :inline :offset-assert 48)
;    (color     vector4w         :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x44
;   :flag-assert         #x900000044
;   )

;; cam-debug
(deftype cam-collision-record (structure)
  ((pos            vector :inline :offset-assert 0)
   (vel            vector :inline :offset-assert 16)
   (desired-pos    vector :inline :offset-assert 32)
   (cam-tpos-cur   vector :inline :offset-assert 48)
   (cam-tpos-old   vector :inline :offset-assert 64)
   (view-flat      vector :inline :offset-assert 80)
   (string-min-val vector :inline :offset-assert 96)
   (string-max-val vector :inline :offset-assert 112)
   (view-off       vector :inline :offset-assert 128)
   (min-z-override float          :offset-assert 144)
   (string-push-z  float          :offset-assert 148)
   (view-off-param float          :offset-assert 152)
   (frame          int32          :offset-assert 156)
   (iteration      int32          :offset-assert 160)
   (move-type      basic          :offset-assert 164)
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )

; ;; cam-debug
; (deftype cam-collision-record-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-obs
; (deftype target-start (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; generic-obs
; (deftype camera-start (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; generic-obs
; (deftype med-res-level (process-drawable)
;   ((~Tlevel     basic  :offset-assert 176)
;    (~Tpart-mode basic  :offset-assert 180)
;    (~Tindex     int32  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; generic-obs
; (deftype launcher (process-drawable)
;   ((~Tspring-height   meters         :offset-assert 176)
;    (~Tcamera          basic          :offset-assert 180)
;    (~Tactive-distance float          :offset-assert 184)
;    (~Tseek-time       uint64         :offset-assert 192)
;    (~Tdest            vector :inline :offset-assert 208)
;    (~Tsound-id        uint32         :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xe4
;   :flag-assert         #x14008000e4
;   ;; inherited inspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; target-util
; (deftype target-bank (basic)
;   ((jump-collide-offset          meters           :offset-assert 4)
;    (jump-height-min              meters           :offset-assert 8)
;    (jump-height-max              meters           :offset-assert 12)
;    (double-jump-height-min       meters           :offset-assert 16)
;    (double-jump-height-max       meters           :offset-assert 20)
;    (flip-jump-height-min         meters           :offset-assert 24)
;    (flip-jump-height-max         meters           :offset-assert 28)
;    (duck-jump-height-min         meters           :offset-assert 32)
;    (duck-jump-height-max         meters           :offset-assert 36)
;    (flop-jump-height-min         meters           :offset-assert 40)
;    (flop-jump-height-max         meters           :offset-assert 44)
;    (attack-jump-height-min       meters           :offset-assert 48)
;    (attack-jump-height-max       meters           :offset-assert 52)
;    (edge-grab-jump-height-min    meters           :offset-assert 56)
;    (edge-grab-jump-height-max    meters           :offset-assert 60)
;    (swim-jump-height-min         meters           :offset-assert 64)
;    (swim-jump-height-max         meters           :offset-assert 68)
;    (tube-jump-height-min         meters           :offset-assert 72)
;    (tube-jump-height-max         meters           :offset-assert 76)
;    (wheel-duration               uint64           :offset-assert 80)
;    (wheel-jump-pre-window        uint64           :offset-assert 88)
;    (wheel-jump-post-window       uint64           :offset-assert 96)
;    (wheel-timeout                uint64           :offset-assert 104)
;    (wheel-speed-min              meters           :offset-assert 112)
;    (wheel-speed-inc              meters           :offset-assert 116)
;    (wheel-flip-duration          uint64           :offset-assert 120)
;    (wheel-flip-height            meters           :offset-assert 128)
;    (wheel-flip-dist              meters           :offset-assert 132)
;    (wheel-flip-art-height        meters           :offset-assert 136)
;    (wheel-flip-art-dist          meters           :offset-assert 140)
;    (duck-slide-distance          meters           :offset-assert 144)
;    (fall-far                     meters           :offset-assert 148)
;    (fall-far-inc                 meters           :offset-assert 152)
;    (attack-timeout               uint64           :offset-assert 160)
;    (ground-timeout               uint64           :offset-assert 168)
;    (slide-down-timeout           uint64           :offset-assert 176)
;    (fall-timeout                 uint64           :offset-assert 184)
;    (fall-stumble-threshold       meters           :offset-assert 192)
;    (yellow-projectile-speed      meters           :offset-assert 196)
;    (hit-invulnerable-timeout     uint64           :offset-assert 200)
;    (run-cycle-length             float            :offset-assert 208)
;    (walk-cycle-dist              meters           :offset-assert 212)
;    (walk-up-cycle-dist           meters           :offset-assert 216)
;    (walk-down-cycle-dist         meters           :offset-assert 220)
;    (walk-side-cycle-dist         meters           :offset-assert 224)
;    (run-cycle-dist               meters           :offset-assert 228)
;    (run-up-cycle-dist            meters           :offset-assert 232)
;    (run-down-cycle-dist          meters           :offset-assert 236)
;    (run-side-cycle-dist          meters           :offset-assert 240)
;    (run-wall-cycle-dist          meters           :offset-assert 244)
;    (duck-walk-cycle-dist         meters           :offset-assert 248)
;    (wade-shallow-walk-cycle-dist meters           :offset-assert 252)
;    (wade-deep-walk-cycle-dist    meters           :offset-assert 256)
;    (smack-surface-dist           meters           :offset-assert 260)
;    (smack-surface-height         meters           :offset-assert 264)
;    (min-dive-depth               meters           :offset-assert 268)
;    (root-radius                  meters           :offset-assert 272)
;    (root-offset                  vector   :inline :offset-assert 288)
;    (body-radius                  meters           :offset-assert 304)
;    (edge-radius                  meters           :offset-assert 308)
;    (edge-offset                  vector   :inline :offset-assert 320)
;    (head-radius                  meters           :offset-assert 336)
;    (head-height                  meters           :offset-assert 340)
;    (head-offset                  vector   :inline :offset-assert 352)
;    (spin-radius                  meters           :offset-assert 368)
;    (spin-offset                  vector   :inline :offset-assert 384)
;    (duck-spin-radius             meters           :offset-assert 400)
;    (duck-spin-offset             vector   :inline :offset-assert 416)
;    (punch-radius                 meters           :offset-assert 432)
;    (punch-offset                 vector   :inline :offset-assert 448)
;    (uppercut-radius              meters           :offset-assert 464)
;    (uppercut0-offset             vector   :inline :offset-assert 480)
;    (uppercut1-offset             vector   :inline :offset-assert 496)
;    (flop-radius                  meters           :offset-assert 512)
;    (flop0-offset                 vector   :inline :offset-assert 528)
;    (flop1-offset                 vector   :inline :offset-assert 544)
;    (stuck-time                   useconds         :offset-assert 560)
;    (stuck-timeout                useconds         :offset-assert 568)
;    (stuck-distance               meters           :offset-assert 576)
;    (tongue-pull-speed-min        float            :offset-assert 580)
;    (tongue-pull-speed-max        float            :offset-assert 584)
;    (yellow-attack-timeout        uint64           :offset-assert 592)
;    )
;   :method-count-assert 9
;   :size-assert         #x258
;   :flag-assert         #x900000258
;   )

; ;; voicebox
; (deftype camera-voicebox (camera-slave)
;   ()
;   :method-count-assert 14
;   :size-assert         #xa04
;   :flag-assert         #xe09a00a04
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; voicebox
; (deftype voicebox (process-drawable)
;   ((~Tbase-trans vector           :inline :offset-assert 176)
;    (~Tseeker     cam-float-seeker :inline :offset-assert 192)
;    (~Tblend      float                    :offset-assert 216)
;    (~Ttwist      float                    :offset-assert 220)
;    (~Thint       uint64                   :offset-assert 224)
;    )
;   :method-count-assert 23
;   :size-assert         #xe8
;   :flag-assert         #x17008000e8
;   ;; inherited inspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; target2
; (deftype first-person-hud (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process) parent was UNKNOWN
;   )

; ;; menu
; (deftype debug-menu-context (basic)
;   ((is-active   basic     :offset-assert 4)
;    (sel-length  int32     :offset-assert 8)
;    (sel-menu    UNKNOWN 8 :offset-assert 12)
;    (root-menu   basic     :offset-assert 44)
;    (joypad-func basic     :offset-assert 48)
;    (joypad-item basic     :offset-assert 52)
;    (font        basic     :offset-assert 56)
;    (is-hidden   basic     :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; menu
; (deftype debug-menu-node (basic)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; menu
; (deftype debug-menu (debug-menu-node)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (context       basic  :offset-assert 20)
;    (selected-item basic  :offset-assert 24)
;    (pix-width     int32  :offset-assert 28)
;    (pix-height    int32  :offset-assert 32)
;    (items         basic  :offset-assert 36)
;    )
;   :method-count-assert 9
;   :size-assert         #x28
;   :flag-assert         #x900000028
;   )

; ;; menu
; (deftype debug-menu-item (debug-menu-node)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; menu
; (deftype debug-menu-item-submenu (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (submenu       basic  :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; menu
; (deftype debug-menu-item-function (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (activate-func basic  :offset-assert 24)
;    (hilite-timer  int8   :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d
;   :flag-assert         #x90000001d
;   )

; ;; menu
; (deftype debug-menu-item-flag (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (activate-func basic  :offset-assert 24)
;    (is-on         basic  :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; menu
; (deftype debug-menu-item-var (debug-menu-item)
;   ((name             basic  :offset-assert 4)
;    (parent           basic  :offset-assert 8)
;    (refresh-delay    int32  :offset-assert 12)
;    (refresh-ctr      int32  :offset-assert 16)
;    (id               int32  :offset-assert 20)
;    (display-str      basic  :offset-assert 24)
;    (grabbed-joypad-p basic  :offset-assert 28)
;    (float-p          basic  :offset-assert 32)
;    (range-p          basic  :offset-assert 36)
;    (show-len         int32  :offset-assert 40)
;    (inc-delay        int32  :offset-assert 44)
;    (inc-delay-ctr    int32  :offset-assert 48)
;    (step-delay-ctr   int32  :offset-assert 52)
;    (inc-dir          int32  :offset-assert 56)
;    (fval             float  :offset-assert 60)
;    (fundo-val        float  :offset-assert 64)
;    (frange-min       float  :offset-assert 68)
;    (frange-max       float  :offset-assert 72)
;    (fstart-inc       float  :offset-assert 76)
;    (fstep            float  :offset-assert 80)
;    (fprecision       int32  :offset-assert 84)
;    (factivate-func   basic  :offset-assert 88)
;    (ival             int32  :offset-assert 60)
;    (iundo-val        int32  :offset-assert 64)
;    (irange-min       int32  :offset-assert 68)
;    (irange-max       int32  :offset-assert 72)
;    (istart-inc       int32  :offset-assert 76)
;    (istep            int32  :offset-assert 80)
;    (ihex-p           basic  :offset-assert 92)
;    (iactivate-func   basic  :offset-assert 88)
;    (ifloat-p         basic  :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x64
;   :flag-assert         #x900000064
;   )

; ;; drawable-group
; (deftype drawable-group (drawable)
;   ()
;   :method-count-assert 18
;   :size-assert         #x24
;   :flag-assert         #x1200000024
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; collide-cache
; (deftype collide-puls-work (structure)
;   ((ignore-pat uint32                     :offset-assert 0)
;    (tri-out    collide-tri-result         :offset-assert 4)
;    (bsphere    sphere             :inline :offset-assert 16)
;    (move-dist  vector             :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; collide-cache
; (deftype lsmi-work (structure)
;   ((best-u      float                      :offset-assert 0)
;    (orig-best-u float                      :offset-assert 4)
;    (action      uint32                     :offset-assert 8)
;    (tri-out     collide-tri-result :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x64
;   :flag-assert         #x900000064
;   )

; ;; memory-usage
; (deftype memory-usage-block (basic)
;   ()
;   :method-count-assert 12
;   :size-assert         #x6e0
;   :flag-assert         #xc000006e0
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; entity
; (deftype entity (res-lump)
;   ()
;   :method-count-assert 27
;   :size-assert         #x34
;   :flag-assert         #x1b00000034
;   ;; unrecognized get op: (set! t9 find-parent-method) parent was res-lump
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; entity
; (deftype entity-actor (entity)
;   ()
;   :method-count-assert 31
;   :size-assert         #x50
;   :flag-assert         #x1f00000050
;   ;; unrecognized get op: (set! t9 find-parent-method) parent was entity
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     )
;   )

; ;; navigate
; (deftype cfs-travel-vec (structure)
;   ((dir         vector :inline :offset-assert 0)
;    (delta-angle float          :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; navigate
; (deftype cfs-work (structure)
;   ((desired-travel-dist float           :offset-assert 0)
;    (desired-angle       float           :offset-assert 4)
;    (max-dist            float           :offset-assert 8)
;    (old-angle           float           :offset-assert 12)
;    (modified            int32           :offset-assert 16)
;    (blocked-mask        uint64          :offset-assert 24)
;    (travel              vector  :inline :offset-assert 32)
;    (current             vector  :inline :offset-assert 48)
;    (new-travel          UNKNOWN 2       :offset-assert 64)
;    (temp-travel         UNKNOWN 2       :offset-assert 128)
;    (prev-dir            vector  :inline :offset-assert 192)
;    (attempt-dir         vector  :inline :offset-assert 208)
;    (tangent             UNKNOWN 2       :offset-assert 224)
;    )
;   :method-count-assert 9
;   :size-assert         #x100
;   :flag-assert         #x900000100
;   )

; ;; navigate
; (deftype nav-control-cfs-work (structure)
;   ((in-dir              vector  :inline :offset-assert 0)
;    (right-dir           vector  :inline :offset-assert 16)
;    (best-dir            UNKNOWN 2       :offset-assert 32)
;    (temp-dir            UNKNOWN 2       :offset-assert 64)
;    (away-dir            vector  :inline :offset-assert 96)
;    (best-dir-angle      UNKNOWN 2       :offset-assert 112)
;    (ignore-mask         uint64          :offset-assert 120)
;    (initial-ignore-mask uint64          :offset-assert 128)
;    (i-sphere            int32           :offset-assert 136)
;    (i-first-sphere      int32           :offset-assert 140)
;    (i-inside-sphere     int32           :offset-assert 144)
;    (inside-sphere-dist  float           :offset-assert 148)
;    (sign                float           :offset-assert 152)
;    (travel-len          float           :offset-assert 156)
;    (dist2               float           :offset-assert 160)
;    (inside-dist         float           :offset-assert 164)
;    (rand-angle          float           :offset-assert 168)
;    (dir-update          basic           :offset-assert 172)
;    (debug-offset        vector  :inline :offset-assert 176)
;    )
;   :method-count-assert 9
;   :size-assert         #xc0
;   :flag-assert         #x9000000c0
;   )

; ;; collectables
; (deftype collectable (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype eco-collectable (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype eco (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-yellow (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-red (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-blue (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype health (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-pill (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype money (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype fuel-cell (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 eco-collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype buzzer (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 eco-collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype ecovalve (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype vent (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype ventyellow (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ventred (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ventblue (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ecovent (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; crates
; (deftype crate-bank (basic)
;   ((COLLIDE_YOFF           float  :offset-assert 4)
;    (COLLIDE_RADIUS         float  :offset-assert 8)
;    (DARKECO_EXPLODE_RADIUS float  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; crates
; (deftype crate (process-drawable)
;   ((~Tsmush               smush-control :inline :offset-assert 176)
;    (~Tbase                vector        :inline :offset-assert 208)
;    (~Tlook                basic                 :offset-assert 224)
;    (~Tdefense             basic                 :offset-assert 228)
;    (~Tincomming-attack-id uint64                :offset-assert 232)
;    (~Ttarget              uint64                :offset-assert 240)
;    (~Tchild-count         int32                 :offset-assert 248)
;    (~Tvictory-anim        basic                 :offset-assert 252)
;    )
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;; inherited inspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype barrel (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype bucket (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype crate-buzzer (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype pickup-spawner (crate)
;   ((~Tblocker basic  :offset-assert 256)
;    )
;   :method-count-assert 30
;   :size-assert         #x104
;   :flag-assert         #x1e00a00104
;   ;; inherited inspect of crate
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; hud-classes
; (deftype hud-pickups (hud)
;   ()
;   :method-count-assert 27
;   :size-assert         #x118
;   :flag-assert         #x1b00b00118
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-health (hud)
;   ((~Tscale float  :offset-assert 280)
;    )
;   :method-count-assert 27
;   :size-assert         #x11c
;   :flag-assert         #x1b00b0011c
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-money-all (hud)
;   ((~Tx-scale     float   :offset-assert 280)
;    (~Ty-scale     float   :offset-assert 284)
;    (~Ty-pos       int32   :offset-assert 288)
;    (~Ttotal-orbs  int32   :offset-assert 292)
;    (~Tlevel-index int32   :offset-assert 296)
;    (~Tstart-time  uint64  :offset-assert 304)
;    )
;   :method-count-assert 27
;   :size-assert         #x138
;   :flag-assert         #x1b00d00138
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-money (hud)
;   ((~Tx-scale float  :offset-assert 280)
;    (~Ty-scale float  :offset-assert 284)
;    (~Ty-pos   int32  :offset-assert 288)
;    )
;   :method-count-assert 27
;   :size-assert         #x124
;   :flag-assert         #x1b00c00124
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-fuel-cell (hud)
;   ((~Tscale-starburst-3-x float  :offset-assert 280)
;    (~Tscale-starburst-3-y float  :offset-assert 284)
;    (~Tscale-starburst-4-x float  :offset-assert 288)
;    (~Tscale-starburst-4-y float  :offset-assert 292)
;    (~Tscale-icon          float  :offset-assert 296)
;    (~Tscale-center        float  :offset-assert 300)
;    (~Ticon-pos-y          int32  :offset-assert 304)
;    )
;   :method-count-assert 27
;   :size-assert         #x134
;   :flag-assert         #x1b00d00134
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-buzzers (hud)
;   ((~Tscale         float  :offset-assert 280)
;    (~Ttext-y-offset int32  :offset-assert 284)
;    )
;   :method-count-assert 27
;   :size-assert         #x120
;   :flag-assert         #x1b00b00120
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-power (hud)
;   ((~Tscale-timer   float  :offset-assert 280)
;    (~Tscale-backing float  :offset-assert 284)
;    (~Tscale-blue    float  :offset-assert 288)
;    )
;   :method-count-assert 27
;   :size-assert         #x124
;   :flag-assert         #x1b00c00124
;   ;; inherited inspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; progress
; (deftype progress-global-state (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; projectiles
; (deftype search-info (structure)
;   ((point        vector :inline :offset-assert 0)
;    (best-point   vector :inline :offset-assert 16)
;    (match-handle uint64         :offset-assert 32)
;    (match        basic          :offset-assert 40)
;    (best         float          :offset-assert 44)
;    (radius       float          :offset-assert 48)
;    (rating       uint32         :offset-assert 52)
;    (require      uint32         :offset-assert 56)
;    (mask         uint32         :offset-assert 60)
;    (rot-base     vector :inline :offset-assert 64)
;    (rot-range    float          :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x54
;   :flag-assert         #x900000054
;   )