;; built-in. these need to be listed so the type symbols have type of type
;; in the decompiler.
(define-extern symbol type)
(define-extern object type)
(define-extern #f symbol)
(define-extern #t symbol)
(define-extern integer type)
(define-extern structure type)
(define-extern pair type)
(define-extern number type)
(define-extern binteger type)
(define-extern function type)
(define-extern array type)
(define-extern basic type)
(define-extern type type)
(define-extern string type)
(define-extern uint8 type)
(define-extern int8 type)
(define-extern uint16 type)
(define-extern int16 type)
(define-extern uint32 type)
(define-extern int32 type)
(define-extern uint64 type)
(define-extern int64 type)
(define-extern uint128 type)
(define-extern int128 type)
(define-extern float type)
(define-extern nothing (function none))


;; functions defined in C. TODO - this will end up being a duplicate of kernel-defs.gc?
(define-extern dgo-load (function string kheap int int none))
(define-extern *kernel-boot-message* symbol)
(define-extern *debug-segment* symbol)
(define-extern _format (function _varargs_ object))
(define-extern method-set! (function type int function none)) ;; may actually return function.
(define-extern *listener-function* (function object))
(define-extern *enable-method-set* int)
(define-extern install-debug-handler (function int object symbol))
(define-extern install-handler (function int (function int) int))  ;; GOAL thinks it returns something.

(define-extern file-stream-open (function file-stream basic basic file-stream))
(define-extern file-stream-length (function file-stream int))
(define-extern file-stream-read (function file-stream pointer int int))

(define-extern kmalloc (function kheap int int string pointer))
(define-extern global kheap)

(define-extern dma-sync (function pointer int int int))
(define-extern flush-cache (function int none))

(define-extern mc-run (function none))
(define-extern mc-check-result (function int))